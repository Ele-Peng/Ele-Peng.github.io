{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-lx/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/main.min.css","path":"css/main.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/footer-l.jpeg","path":"images/footer-l.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/footer-r.jpeg","path":"images/footer-r.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/js/jquery.easing.min.js","path":"js/jquery.easing.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/js/jquery.jside.menu.js","path":"js/jquery.jside.menu.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/js/local.search.js","path":"js/local.search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/post_cover.jpeg","path":"images/post_cover.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/menu/button.styl","path":"css/menu/button.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/menu/menu.styl","path":"css/menu/menu.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/css/page_style/page_style.styl","path":"css/page_style/page_style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-lx/source/images/cover.jpeg","path":"images/cover.jpeg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-lx/CODE_OF_CONDUCT.md","hash":"4faa826cb7049aff196edbf38e0b29c3fec2cf17","modified":1586055390183},{"_id":"themes/hexo-theme-lx/CONTRIBUTING.md","hash":"c70e994eb59d431ccaaf8b114ad74c8962cc3f45","modified":1586055390183},{"_id":"themes/hexo-theme-lx/LICENSE","hash":"2e43fe50cb85afda5cbd30aa4c056125f0e11a53","modified":1586055390184},{"_id":"themes/hexo-theme-lx/.editorconfig","hash":"f8102695960fe708149c2e21934969700bfb0031","modified":1586055390182},{"_id":"themes/hexo-theme-lx/_config.yml","hash":"2b103b1f5527242323c4388a743907a5e45cee84","modified":1587557319953},{"_id":"themes/hexo-theme-lx/package.json","hash":"7c15e6d012eee8b69d625b26f61adfd018a15f7f","modified":1586055390190},{"_id":"themes/hexo-theme-lx/languages/en.yml","hash":"ec59da08e7c8dc61872b7896f167e42491965b2e","modified":1586055390185},{"_id":"themes/hexo-theme-lx/layout/archive.ejs","hash":"539ad764457af4434a6764c2044c4bbb9c34759f","modified":1586055390185},{"_id":"themes/hexo-theme-lx/languages/zh.yml","hash":"b9a174e46bd89df7d6bf3a7863c350a62dce8a81","modified":1586055390185},{"_id":"themes/hexo-theme-lx/layout/page.ejs","hash":"c0895bd2b63c5bba7c54686d6b7eaec9fbc520a5","modified":1586055390186},{"_id":"themes/hexo-theme-lx/layout/index.ejs","hash":"6c73bb34c29861124a0464a9a8dea95adf4fc5b0","modified":1590462552160},{"_id":"themes/hexo-theme-lx/layout/layout.ejs","hash":"a8e012724633a45c7601c38866176e11f88b0db9","modified":1590462557081},{"_id":"themes/hexo-theme-lx/layout/post.ejs","hash":"9396418ae3822ee444f44c509ec27955842c9360","modified":1586055390189},{"_id":"themes/hexo-theme-lx/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1586055390194},{"_id":"source/_posts/CSS-排版.md","hash":"1a3f628fa1b9f8abe14389794ae8c6c16fb35026","modified":1590915813693},{"_id":"source/_posts/CSS-选择器.md","hash":"c38ad6ce7843be0be5f5a17a437fb84ea947b3fe","modified":1590998369664},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1587689543989},{"_id":"source/_posts/CSS基本语法-基础机制.md","hash":"53d3e2a3626c1eb5c50efca42352e4d96280bd3c","modified":1590506353746},{"_id":"source/_posts/Elle-训练算法计划.md","hash":"c2cc3fac9bda2919d3a5d4125c9cfeb5af3c99a9","modified":1587898919123},{"_id":"source/_posts/Javascript-Atom+Types.md","hash":"1473f70b1a269bd8e1ad82cee09f91adb48d69aa","modified":1590634531369},{"_id":"source/_posts/Javascript-Expressions.md","hash":"1cc80757a1d9e834db2f1467a969a898a929c165","modified":1590635944636},{"_id":"source/_posts/Javascript-Statement.md","hash":"4aa61a66b0cca54cdab34a63efad5d565d4d014c","modified":1590647326241},{"_id":"source/_posts/Javascript-运行机制.md","hash":"86cb948ce8d0d37a921886f8b6f4c947f20d02d6","modified":1589274513600},{"_id":"source/_posts/Javascrtip-运行机制（二）.md","hash":"b278a3ea6c1bb0a9e41ad3ed283ce03bd590eff0","modified":1588516453589},{"_id":"source/_posts/Realm.md","hash":"58bd52898a57ee88cf9e093b56704ddac0f9f66c","modified":1590319937761},{"_id":"source/_posts/OOP-面向对象.md","hash":"18d83eec4ad46f5116c0245a4a462de723ab7273","modified":1588125143828},{"_id":"source/_posts/Reg-Number.md","hash":"2894028fcd9a9a7d2948bd0584716e65810f7548","modified":1587960218325},{"_id":"source/_posts/Reg-String.md","hash":"6eaab718b2b6fe27899e090d63ec995f434d625d","modified":1587960233327},{"_id":"source/_posts/Toy-Browser-DAY3.md","hash":"2360ff6d34e69e310218b02b8d4fce4a0ab007a6","modified":1590505419191},{"_id":"source/_posts/Toy-Browser-DAY4.md","hash":"4012d8c63f4c3bb0cf60b01f062329c50350652c","modified":1590506063947},{"_id":"source/_posts/Toy-Browser-DAY1.md","hash":"0d186dd29bc714b128e60be554e76e04f3681a5d","modified":1590504968827},{"_id":"source/_posts/Toy-Browser-DAY2.md","hash":"9fafb9f64c2686b80dc60064c1c905cd42dfefa2","modified":1590319950816},{"_id":"source/_posts/UTF8-Encoing.md","hash":"1533209dcc62e55db099d1a22cf067863c42dd43","modified":1587960239263},{"_id":"source/_posts/convertNumberToString.md","hash":"52719bcd03e170796aff1c1d9b9ed2c06c5dcc9a","modified":1587959975410},{"_id":"source/_posts/Toy-Browser-DAY5.md","hash":"f6e5ea69a287de1adacd1cce14302c34048fbe4f","modified":1590506274067},{"_id":"source/_posts/convertStringToNumber.md","hash":"b6ced6ca5d72ecb7323a431bfc5c700e17b5055b","modified":1587960224591},{"_id":"source/_posts/react-hooks.md","hash":"5a4f976a9f6676a18bea08c15c936389bf794fe0","modified":1587898938028},{"_id":"source/_posts/前端性能监控.md","hash":"72f3a6a519af1270de0e6cc22a31109011f1acb6","modified":1587898889248},{"_id":"source/_posts/从URL输入到.md","hash":"aaa47db747f78101d7a733219b15f859f82088fa","modified":1590596229023},{"_id":"source/_posts/基于KMP的FSM处理字符串.md","hash":"8b12dec68f8f6ae6e8130aa56d0a79da1f841089","modified":1590320821482},{"_id":"source/_posts/微信小程序-fix canvas原生组件最顶层.md","hash":"566bb1d0a5319be05916842f9e0bea0fe2331037","modified":1587898903767},{"_id":"source/_posts/微信小程序-气泡框 Popover.md","hash":"a772413e83590980e957be996e2f2c0a55b05485","modified":1587898899438},{"_id":"source/_posts/微信小程序-获取图片主色调.md","hash":"51f4b69c4b314824bdcd93e3193eba41a5090447","modified":1590460242757},{"_id":"source/_posts/数组、链表、跳表.md","hash":"4f58f68cbda32f19218b45e72aeae7500b8f6e9a","modified":1587898892414},{"_id":"source/_posts/编程语言通识.md","hash":"57a76375d878662966bdeb08a5689bd1d9228cbb","modified":1587898882849},{"_id":"source/_posts/自己的前端知识体系.md","hash":"5abc34d1cb6733afcb85b42400ea60888894a83e","modified":1588549994686},{"_id":"source/_posts/计算机图形学初探.md","hash":"851690f45d587242dc8e923a3a031f350e8d9914","modified":1587898825144},{"_id":"themes/hexo-theme-lx/layout/partials/aside.ejs","hash":"52d7e28c6c44ef8ea9e2ac465abe668a21f7ec4b","modified":1590462531593},{"_id":"themes/hexo-theme-lx/layout/partials/config.ejs","hash":"6809577629e67dc00a2b20c2326818fa7f2c29be","modified":1586055390186},{"_id":"themes/hexo-theme-lx/layout/partials/font.ejs","hash":"2dc65c0b4f60ed8329a296c5172aee8d42025a1e","modified":1586055390186},{"_id":"themes/hexo-theme-lx/layout/partials/menu.ejs","hash":"7c3d71999f233f5fb7549a472c922c8257711d5f","modified":1586055390187},{"_id":"themes/hexo-theme-lx/layout/partials/post-footer.ejs","hash":"a2dbce8103bdc694439e8709c7f636f68ccc3328","modified":1586055390187},{"_id":"themes/hexo-theme-lx/layout/partials/pagination.ejs","hash":"82c25643c1e3b16f0472eebfe77f4a03ad0e8824","modified":1586055390187},{"_id":"themes/hexo-theme-lx/layout/partials/footer.ejs","hash":"079fcedbca1fc74485d82510354a00a39f52b0e9","modified":1586246253990},{"_id":"themes/hexo-theme-lx/layout/partials/post-header.ejs","hash":"adc798cf72c82a069fb354f48f65bba5f1405b45","modified":1586055390188},{"_id":"themes/hexo-theme-lx/layout/partials/recent-posts.ejs","hash":"889018a6df0c62b61c1c03712a2d3eb39882559c","modified":1586055390188},{"_id":"themes/hexo-theme-lx/layout/partials/search.ejs","hash":"e68af7bfc83edcf8da639982e1766c53f129128f","modified":1590462565916},{"_id":"themes/hexo-theme-lx/layout/partials/sociallinks.ejs","hash":"4460e06f88084f545b4409685644c7f101d11ba5","modified":1586055390188},{"_id":"themes/hexo-theme-lx/layout/third-party/comment.ejs","hash":"f1d1c9425059e76c8481829797de44df637c0723","modified":1586055390190},{"_id":"themes/hexo-theme-lx/layout/third-party/mathjax.ejs","hash":"e857f83195594e6ffcacf08f07df0c229806113b","modified":1586055390190},{"_id":"themes/hexo-theme-lx/scripts/helpers/font.js","hash":"0e7adebaf7bb3ba516c8f82cf26100237584bf44","modified":1586055390191},{"_id":"themes/hexo-theme-lx/scripts/tags/button.js","hash":"dd5da28768a3ed3f2e3b308a9ff220403825579f","modified":1586055390191},{"_id":"themes/hexo-theme-lx/scripts/tags/center-quote.js","hash":"e5086a9b99ac1c8006f4fa7c5568b96cc1d47cf6","modified":1586055390191},{"_id":"themes/hexo-theme-lx/scripts/tags/label.js","hash":"7247ac0f614993d4d162b14b68e924fc969581f5","modified":1586055390191},{"_id":"themes/hexo-theme-lx/scripts/tags/note.js","hash":"19dc88f867d684101e851e25fe9da661c56acc66","modified":1586055390192},{"_id":"themes/hexo-theme-lx/scripts/tags/video.js","hash":"3a70f28b9769fd308c8df7d694fb7f896f12ae58","modified":1586055390192},{"_id":"themes/hexo-theme-lx/source/css/base.styl","hash":"f29e3f7ab355d599d186ffc4a457169df4af3ad5","modified":1586055390192},{"_id":"themes/hexo-theme-lx/source/css/main.styl","hash":"7d306db88b0fd5e32e7b89b9c459244c1348dc87","modified":1590462425020},{"_id":"themes/hexo-theme-lx/source/css/main.min.css","hash":"f92bf3eef5351215ee8bced4a40d88dab68330bf","modified":1586055390193},{"_id":"themes/hexo-theme-lx/source/images/footer-l.jpeg","hash":"f036edc5f66ffbcc34c3d855414c6ca5ef30a04b","modified":1586055390198},{"_id":"themes/hexo-theme-lx/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1586058157729},{"_id":"themes/hexo-theme-lx/source/images/footer-r.jpeg","hash":"5c7677ac85cf8a683b91e97702b7096017006b4f","modified":1586055390198},{"_id":"themes/hexo-theme-lx/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1586055390200},{"_id":"themes/hexo-theme-lx/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1586055390200},{"_id":"themes/hexo-theme-lx/source/js/jquery.easing.min.js","hash":"af83a43279779fbc716f40ba8c5280782027540a","modified":1586055390200},{"_id":"themes/hexo-theme-lx/source/js/jquery.jside.menu.js","hash":"d15b40199520d22771f9a211ac4282041df2ae5a","modified":1586055390200},{"_id":"themes/hexo-theme-lx/source/js/local.search.js","hash":"3dd788d1e64431feb8faca7a7f175d25ed31f25a","modified":1586055390201},{"_id":"themes/hexo-theme-lx/source/images/post_cover.jpeg","hash":"93f216636c87dbbe635d4bb6b944851d92d84723","modified":1586055390199},{"_id":"themes/hexo-theme-lx/layout/third-party/analytics/baidu-analytics.ejs","hash":"30cf8cd193777b1e071313528e06b16eca508187","modified":1586055390189},{"_id":"themes/hexo-theme-lx/layout/third-party/analytics/index.ejs","hash":"c98b574b2634de33694edb40b1f9120160b81acb","modified":1586055390189},{"_id":"themes/hexo-theme-lx/layout/third-party/analytics/google-analytics.ejs","hash":"09775c366a01c656b7185ef3da4bc7b33caa2241","modified":1586055390189},{"_id":"themes/hexo-theme-lx/source/css/menu/button.styl","hash":"d440d99e13b0f58edcab27bfce4e027e0e54fd77","modified":1586055390193},{"_id":"themes/hexo-theme-lx/source/css/menu/menu.styl","hash":"ebe4d6bc7e0081ad4d7659427abb98a1344c1aae","modified":1586055390194},{"_id":"themes/hexo-theme-lx/source/css/page_style/page_style.styl","hash":"d10cea4992ee10e2ab88a2ae0ebe08854f55d7c6","modified":1587895842414},{"_id":"themes/hexo-theme-lx/source/images/avatar.jpeg","hash":"b6aba9aa030f22221d4a357a46a6bc6ef0cce556","modified":1586058121609},{"_id":"themes/hexo-theme-lx/source/images/cover.jpeg","hash":"7dbe52d0aa3c1d6d90764f9a2c19d0dc5dd479c0","modified":1587550493675},{"_id":"public/search.xml","hash":"3789702bdea1e29e40111ef44a5da8567c462509","modified":1590998762043},{"_id":"public/2020/05/30/CSS-排版/index.html","hash":"69903bead38230f094aeac6d26bf390fb113ff96","modified":1590998762043},{"_id":"public/2020/04/21/Reg-String/index.html","hash":"5a5da215a54cd4ead5739f402212c113ad4d13cb","modified":1590998762043},{"_id":"public/2020/04/20/Reg-Number/index.html","hash":"8f2d1134ffbc776430a6a38b24aab34132d0bf9f","modified":1590998762043},{"_id":"public/2020/04/20/Javascript-Atom+Types/index.html","hash":"1f641f11086163499e55456288c2ed9c19f2c357","modified":1590998762043},{"_id":"public/2020/04/16/前端性能监控/index.html","hash":"ee0654022b6e648bf01669b66fefbfd65b97bd15","modified":1590998762043},{"_id":"public/2020/04/15/计算机图形学初探/index.html","hash":"b22db0611f0421e194b6ae0c7893bbbddc2dca70","modified":1590998762043},{"_id":"public/2020/04/13/react-hooks/index.html","hash":"39a773d8e12b05b4e32229fa49a78343c0b1ed7e","modified":1590998762043},{"_id":"public/2020/04/12/自己的前端知识体系/index.html","hash":"58f83de72ddd930e4bb53930b0d2cdf80c270ee0","modified":1590998762043},{"_id":"public/2020/04/07/数组、链表、跳表/index.html","hash":"0581e567124c99f59cbefc5734f85a2362939330","modified":1590998762043},{"_id":"public/2020/04/06/Elle-训练算法计划/index.html","hash":"0293112bca6af0dba05ba976078cb6f7a57ba812","modified":1590998762043},{"_id":"public/archives/index.html","hash":"859194614b707fdc2b2d25e12dfb4f7070020592","modified":1590998762043},{"_id":"public/archives/page/2/index.html","hash":"8bbb05bcd93b8068c026924d83a44bd9789d5998","modified":1590998762043},{"_id":"public/archives/page/3/index.html","hash":"edff4a3c7d101cbc1f8036e3bce959127455a8f9","modified":1590998762043},{"_id":"public/archives/page/4/index.html","hash":"30f0dd3f46929914bed610a6368415029180a3a9","modified":1590998762043},{"_id":"public/archives/2020/index.html","hash":"dd5e52d500984019a0e1e15116e55c3f5f9b7749","modified":1590998762043},{"_id":"public/archives/2020/page/2/index.html","hash":"a24aee5b654dd3325cda1b6c9f62981983060fa6","modified":1590998762043},{"_id":"public/archives/2020/page/3/index.html","hash":"6fae6a49576f76af6c60d387ed53e46f2dc4b5e0","modified":1590998762043},{"_id":"public/archives/2020/page/4/index.html","hash":"872d6954e57e6cec1d53093c5e04a0cb386a00f4","modified":1590998762043},{"_id":"public/archives/2020/04/index.html","hash":"19814d34f39d145c6dc3b3d3abae46eaa0672bac","modified":1590998762043},{"_id":"public/archives/2020/04/page/2/index.html","hash":"e600082e2317e737bc6468c1ca7ef1ef6ccb8fd5","modified":1590998762043},{"_id":"public/archives/2020/05/index.html","hash":"c9d56d66a883964db1b199636105908cda2389b5","modified":1590998762043},{"_id":"public/archives/2020/05/page/2/index.html","hash":"fd3ecada2ab8258940fa8608049d0a5ff2fbd034","modified":1590998762043},{"_id":"public/page/4/index.html","hash":"9ea37660f4bf928f68f5e3c05ab1bc2c8810a50c","modified":1590998762043},{"_id":"public/categories/CSS/index.html","hash":"809b899094d43708d53845dc931f88a627dc4a98","modified":1590998762043},{"_id":"public/categories/算法/index.html","hash":"cec3cf9273cdfa80c1adfb0d263afeef7fc72be4","modified":1590998762043},{"_id":"public/categories/前端概念/index.html","hash":"56ec3864d2a93e1d4fa905fe8fad50b718becdc8","modified":1590998762043},{"_id":"public/categories/前端概念/page/2/index.html","hash":"81b674256043d95b005668d90ae3f1b09588d168","modified":1590998762043},{"_id":"public/categories/浏览器/index.html","hash":"f5bfed45354a626452d26144e073d50b46477ab7","modified":1590998762043},{"_id":"public/categories/react/index.html","hash":"40ec5167c460c771a953d1677edf8b765201437b","modified":1590998762043},{"_id":"public/categories/性能监控/index.html","hash":"c2d30147e96b95cbbb06a961c6c45aa945a5f4f4","modified":1590998762043},{"_id":"public/categories/微信小程序/index.html","hash":"1f7e5e613224cda34ab9f9033fcbf832a8b37491","modified":1590998762043},{"_id":"public/categories/计算机图形学/index.html","hash":"6f5daf50761d1f9345f1689134968f5d41210597","modified":1590998762043},{"_id":"public/categories/计算机网络/index.html","hash":"a0671fbadf63b86a660813efc1aa52b4ea7dbcc1","modified":1590998762043},{"_id":"public/tags/CSS/index.html","hash":"b5acbc570252c29ad554f4b2259c449c541e70e7","modified":1590998762043},{"_id":"public/tags/算法/index.html","hash":"a65fae1ea3a01d5e40dbd36dd37efd8a0e745790","modified":1590998762043},{"_id":"public/tags/前端概念/index.html","hash":"d8b17ebbb0cfbd2c82af6b044e7882f0b70bc0de","modified":1590998762043},{"_id":"public/tags/前端概念/page/2/index.html","hash":"5bdaaa5d1fd54ef94ed42b5b0c3ae30bae96b808","modified":1590998762043},{"_id":"public/tags/正则表达式/index.html","hash":"5a8f3b4406093c54a88200796738b12507d357be","modified":1590998762043},{"_id":"public/tags/浏览器/index.html","hash":"b152012c3130d38341aa92f14a4c13af16b9deb1","modified":1590998762043},{"_id":"public/tags/react/index.html","hash":"e1aa3f3fc4810f0fbcc36edea2c2526d06fcc6d9","modified":1590998762043},{"_id":"public/tags/性能监控/index.html","hash":"d2886b3ea04f9119adcd8c4f95b670dddf99b047","modified":1590998762043},{"_id":"public/tags/微信小程序/index.html","hash":"ae8b8a49af54f69cb4ec11830282e8127f9a4781","modified":1590998762043},{"_id":"public/tags/计算机图形学/index.html","hash":"5b39e568d7bf8d611648497b77c9d129b9d51074","modified":1590998762043},{"_id":"public/tags/UTF-8/index.html","hash":"49730e1f753c216b6eed8ec4b166a5865dcdd04d","modified":1590998762043},{"_id":"public/tags/计算机网络/index.html","hash":"a26ea9ef86a84da7e68cf21f0e5ef79f244012b7","modified":1590998762043},{"_id":"public/2020/05/29/CSS-选择器/index.html","hash":"506c232f80b89032e9e1f15eaf112f1eff49eef0","modified":1590998762043},{"_id":"public/2020/05/24/CSS基本语法-基础机制/index.html","hash":"d5be30f4e8301a63da9d59aab120147f36752d79","modified":1590998762043},{"_id":"public/2020/05/24/Toy-Browser-DAY5/index.html","hash":"5e96f59541f53193227c2293b5e3c28eb0ee4f3c","modified":1590998762043},{"_id":"public/2020/05/22/Toy-Browser-DAY4/index.html","hash":"827849b4b08747885763ab5ec673488bc006751f","modified":1590998762043},{"_id":"public/2020/05/17/Toy-Browser-DAY3/index.html","hash":"7c8f0f6052bcdadf52e92be9749820817c8fbead","modified":1590998762043},{"_id":"public/2020/05/16/基于KMP的FSM处理字符串/index.html","hash":"f5f5b4ce3cb8d2128e1b796712b7a986f72b75a9","modified":1590998762043},{"_id":"public/2020/05/15/Toy-Browser-DAY2/index.html","hash":"4c459625929dc176766beaf0ded25bc0985c2214","modified":1590998762043},{"_id":"public/2020/05/12/从URL输入到/index.html","hash":"ae4262809bfac85871304b1b23ac25815b02b984","modified":1590998762043},{"_id":"public/2020/05/10/Toy-Browser-DAY1/index.html","hash":"5b8535738431c86326a160a0eb4dc8a75b6e2180","modified":1590998762043},{"_id":"public/2020/05/08/Realm/index.html","hash":"8a38e0de316fd5a1301d4e6daba62c2c3855c339","modified":1590998762043},{"_id":"public/2020/05/02/Javascrtip-运行机制（二）/index.html","hash":"323e9d8fc4e722a053188146e5482fe706597ad1","modified":1590998762043},{"_id":"public/2020/04/30/Javascript-运行机制/index.html","hash":"5eb28971a2e68b0718dbe4d9b09c2c2f5710cb38","modified":1590998762043},{"_id":"public/2020/04/26/Javascript-Statement/index.html","hash":"34d0c7c1f1c07910b149f40137a267a7e94e8eb6","modified":1590998762043},{"_id":"public/2020/04/25/convertNumberToString/index.html","hash":"208e98b9f237e2e1beb6e3fe9bdfddce9adf89be","modified":1590998762043},{"_id":"public/2020/04/24/convertStringToNumber/index.html","hash":"423c94f899ca008350d3250dbd49b6819c41d223","modified":1590998762043},{"_id":"public/2020/04/23/Javascript-Expressions/index.html","hash":"ad55caeeaed09b5f78afac7350c8d6aab681b8a8","modified":1590998762043},{"_id":"public/2020/04/21/UTF8-Encoing/index.html","hash":"338ae94ffa9ec8df9b6a6c73aaa39ebc03559fdc","modified":1590998762043},{"_id":"public/2020/04/20/编程语言通识/index.html","hash":"e6798dc6931554025c259980c166f39ed9601a73","modified":1590998762043},{"_id":"public/2020/04/09/OOP-面向对象/index.html","hash":"d1f015c63c42730ad362ec0bb7c8224d2c520b5c","modified":1590998762043},{"_id":"public/2020/04/05/微信小程序-获取图片主色调/index.html","hash":"89d039a3211dc621ab7aea18031b68f1647990c1","modified":1590998762043},{"_id":"public/2020/04/05/微信小程序-fix canvas原生组件最顶层/index.html","hash":"2a1ba302565a635b8ebd34ce35f819b2aa396969","modified":1590998762043},{"_id":"public/2020/04/05/微信小程序-气泡框 Popover/index.html","hash":"449ebe4f479b09c099863eb9def93db78471a71e","modified":1590998762043},{"_id":"public/index.html","hash":"34ef019122a5b1386f6e4bbaada0b79ef9fcf883","modified":1590998762043},{"_id":"public/page/2/index.html","hash":"2ee9498715d78022a9d5192fb201fe612e905496","modified":1590998762043},{"_id":"public/page/3/index.html","hash":"ddee3ef2c97edc46bfbd9c156bd8e5a433c46bec","modified":1590998762043},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1590998762043},{"_id":"public/images/footer-l.jpeg","hash":"f036edc5f66ffbcc34c3d855414c6ca5ef30a04b","modified":1590998762043},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1590998762043},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1590998762043},{"_id":"public/images/footer-r.jpeg","hash":"5c7677ac85cf8a683b91e97702b7096017006b4f","modified":1590998762043},{"_id":"public/images/post_cover.jpeg","hash":"93f216636c87dbbe635d4bb6b944851d92d84723","modified":1590998762043},{"_id":"public/css/base.css","hash":"6d884ebc4f4c1a7c750e4b871ecfff6c28b47ed0","modified":1590998762043},{"_id":"public/js/jquery.easing.min.js","hash":"af83a43279779fbc716f40ba8c5280782027540a","modified":1590998762043},{"_id":"public/js/jquery.jside.menu.js","hash":"688b8b03f8590a05e35a1fbbc59f37bc36051aa1","modified":1590998762043},{"_id":"public/css/menu/button.css","hash":"ce03713a291978281b66ce9d5738c456020a8e61","modified":1590998762043},{"_id":"public/css/menu/menu.css","hash":"70f8a5b346f4b106eebc1c5199bc4add479da3c5","modified":1590998762043},{"_id":"public/css/page_style/page_style.css","hash":"0488c30dc3e728ec5ec89bb49fe979bd84acc964","modified":1590998762043},{"_id":"public/js/local.search.js","hash":"3dd788d1e64431feb8faca7a7f175d25ed31f25a","modified":1590998762043},{"_id":"public/css/main.css","hash":"48d346373c9e4c720b3853bbe0b661d75d5590db","modified":1590998762043},{"_id":"public/css/main.min.css","hash":"f92bf3eef5351215ee8bced4a40d88dab68330bf","modified":1590998762043},{"_id":"public/images/avatar.jpeg","hash":"b6aba9aa030f22221d4a357a46a6bc6ef0cce556","modified":1590998762043},{"_id":"public/images/cover.jpeg","hash":"7dbe52d0aa3c1d6d90764f9a2c19d0dc5dd479c0","modified":1590998762043}],"Category":[{"name":"CSS","_id":"ckaw7l1vs00021wp33jjb7sx3"},{"name":"算法","_id":"ckaw7l1w2000c1wp3h9kmasih"},{"name":"前端概念","_id":"ckaw7l1w6000j1wp3372kg0i6"},{"name":"浏览器","_id":"ckaw7l1wk001h1wp3dmdzf151"},{"name":"react","_id":"ckaw7l1wm001m1wp38d3d4f1c"},{"name":"性能监控","_id":"ckaw7l1wn001s1wp33gulbvx0"},{"name":"微信小程序","_id":"ckaw7l1wp001x1wp3e8idcwd6"},{"name":"计算机图形学","_id":"ckaw7l1wq00211wp3959s227o"},{"name":"计算机网络","_id":"ckaw7l1xh003c1wp3fnx484hc"}],"Data":[],"Page":[],"Post":[{"title":"CSS-排版","date":"2020-05-30T10:45:04.000Z","description":["CSS 选择器"],"_content":"\n\n## 写在前面\n- CSS 排版相关知识\n\n<!-- more -->\n\n## 盒（Box）\n- 基本元素 盒 + 文字\n- 排版和渲染的基本单位是盒\n- CSS 在排版时可能产生多个盒\n\n## 盒模型\n- box-sizing: 为什么没有 margin-box\n\n## 正常流\n\n\n### 正常流排版\n\n\n### 正常流的行模型\n\n\n### 正常流的三大难题\n- overflow:visible 与 BFC\n- margin collapse\n- float 与 clear\n\t- \n\n## Flex\n\n### Flex 排版\n- 收集盒进行\n- 计算盒在主轴方向的排布\n- 计算盒在交叉轴方向的排布\n\n\n\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/CSS-排版.md","raw":"---\ntitle: CSS-排版\ndate: 2020-05-30 18:45:04\ntags: \n- CSS\ncategories:\n- CSS\ndescription:\n- CSS 选择器\n---\n\n\n## 写在前面\n- CSS 排版相关知识\n\n<!-- more -->\n\n## 盒（Box）\n- 基本元素 盒 + 文字\n- 排版和渲染的基本单位是盒\n- CSS 在排版时可能产生多个盒\n\n## 盒模型\n- box-sizing: 为什么没有 margin-box\n\n## 正常流\n\n\n### 正常流排版\n\n\n### 正常流的行模型\n\n\n### 正常流的三大难题\n- overflow:visible 与 BFC\n- margin collapse\n- float 与 clear\n\t- \n\n## Flex\n\n### Flex 排版\n- 收集盒进行\n- 计算盒在主轴方向的排布\n- 计算盒在交叉轴方向的排布\n\n\n\n\n## 写在后面\n- 祝大家多多发财\n","slug":"CSS-排版","published":1,"updated":"2020-05-31T09:03:33.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1vj00001wp34y6a11vp","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>CSS 排版相关知识</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"盒（Box）\"><a href=\"#盒（Box）\" class=\"headerlink\" title=\"盒（Box）\"></a>盒（Box）</h2><ul>\n<li>基本元素 盒 + 文字</li>\n<li>排版和渲染的基本单位是盒</li>\n<li>CSS 在排版时可能产生多个盒</li>\n</ul>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><ul>\n<li>box-sizing: 为什么没有 margin-box</li>\n</ul>\n<h2 id=\"正常流\"><a href=\"#正常流\" class=\"headerlink\" title=\"正常流\"></a>正常流</h2><h3 id=\"正常流排版\"><a href=\"#正常流排版\" class=\"headerlink\" title=\"正常流排版\"></a>正常流排版</h3><h3 id=\"正常流的行模型\"><a href=\"#正常流的行模型\" class=\"headerlink\" title=\"正常流的行模型\"></a>正常流的行模型</h3><h3 id=\"正常流的三大难题\"><a href=\"#正常流的三大难题\" class=\"headerlink\" title=\"正常流的三大难题\"></a>正常流的三大难题</h3><ul>\n<li>overflow:visible 与 BFC</li>\n<li>margin collapse</li>\n<li><h2 id=\"float-与-clear\"><a href=\"#float-与-clear\" class=\"headerlink\" title=\"float 与 clear\"></a>float 与 clear</h2></li>\n</ul>\n<h2 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h2><h3 id=\"Flex-排版\"><a href=\"#Flex-排版\" class=\"headerlink\" title=\"Flex 排版\"></a>Flex 排版</h3><ul>\n<li>收集盒进行</li>\n<li>计算盒在主轴方向的排布</li>\n<li>计算盒在交叉轴方向的排布</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>CSS 排版相关知识</li>\n</ul>","more":"<h2 id=\"盒（Box）\"><a href=\"#盒（Box）\" class=\"headerlink\" title=\"盒（Box）\"></a>盒（Box）</h2><ul>\n<li>基本元素 盒 + 文字</li>\n<li>排版和渲染的基本单位是盒</li>\n<li>CSS 在排版时可能产生多个盒</li>\n</ul>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><ul>\n<li>box-sizing: 为什么没有 margin-box</li>\n</ul>\n<h2 id=\"正常流\"><a href=\"#正常流\" class=\"headerlink\" title=\"正常流\"></a>正常流</h2><h3 id=\"正常流排版\"><a href=\"#正常流排版\" class=\"headerlink\" title=\"正常流排版\"></a>正常流排版</h3><h3 id=\"正常流的行模型\"><a href=\"#正常流的行模型\" class=\"headerlink\" title=\"正常流的行模型\"></a>正常流的行模型</h3><h3 id=\"正常流的三大难题\"><a href=\"#正常流的三大难题\" class=\"headerlink\" title=\"正常流的三大难题\"></a>正常流的三大难题</h3><ul>\n<li>overflow:visible 与 BFC</li>\n<li>margin collapse</li>\n<li><h2 id=\"float-与-clear\"><a href=\"#float-与-clear\" class=\"headerlink\" title=\"float 与 clear\"></a>float 与 clear</h2></li>\n</ul>\n<h2 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h2><h3 id=\"Flex-排版\"><a href=\"#Flex-排版\" class=\"headerlink\" title=\"Flex 排版\"></a>Flex 排版</h3><ul>\n<li>收集盒进行</li>\n<li>计算盒在主轴方向的排布</li>\n<li>计算盒在交叉轴方向的排布</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"CSS基本语法+基础机制","date":"2020-05-24T13:41:08.000Z","description":["CSS基本语法+基础机制"],"_content":"\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 整理一下平时所学+所用到的 CSS 基本语法\n\n<!-- more -->\n\n\n## CSS 基本语法\n### CSS2.1 语法\n- [Appendix G. Grammar of CSS 2.1](https://www.w3.org/TR/CSS21/grammar.html#q25.0)\n- [CSS Syntax Module Level 3](https://www.w3.org/TR/css-syntax-3/)\n\n\n### CSS2.1 总体结构\n![productions_1](http://p0.meituan.net/myvideodistribute/b9beefeab08a031d689d4e989de4c2f1197837.png)\n![productions_2](http://p0.meituan.net/myvideodistribute/7340e333e43e235776839a2c00bfb982147104.png)\n\n- 简化为：\n\t- @charset\n\t- @import\n\t- rules\n\t\t- @media\n\t\t- @page\n\t\t- rule\n\n\n## CSS @ Rules\n- [@charset](https://www.w3.org/TR/css-syntax-3/)\n- [@import](https://www.w3.org/TR/css-cascade-4/)\n- [@media](https://www.w3.org/TR/css3-conditional/)\n- [@page](https://www.w3.org/TR/css-page-3/)\n- [@counter-style](https://www.w3.org/TR/css-counter-styles-3/)\n- [@keyframes](https://www.w3.org/TR/css-animations-1/)\n- [@fontface](https://www.w3.org/TR/css-fonts-3/)\n- [@supports](https://www.w3.org/TR/css3-conditional/)\n- [@namespace](https://www.w3.org/TR/css-namespaces-3/)\n\n\n## CSS Qualified Rule 的结构\n- Selector\n\t- [selectors-3](https://www.w3.org/TR/selectors-3/)\n\t- [selectors-4](https://www.w3.org/TR/selectors-4/)\n- Key\n\t- Properties\n\t- Variables\n\t\t- [css-variables](https://www.w3.org/TR/css-variables/)\n- Value\n\t- [css-values-4](https://www.w3.org/TR/css-values-4/)\n\n\n## 初建 CSS 知识体系\n- ![CSS 知识体系](http://p0.meituan.net/myvideodistribute/236b6afc66be8e7c1ea00a43b76d43a7259289.png)\n\n\n## 收集标准\n![CSS standards](http://p0.meituan.net/myvideodistribute/77c702cce890b37809d44d258837f1bd733569.png)\n\n\n- all standards and drafts are in the id named container of the html document.\n- so we can write a script to collect the standards.\n\n### 第一步：获取所有 li dom 节点\n\t\n\t\n\t\n```javascript\nconst list = document.getElementById(\"container\").children\n  \nconsole.log('list', list)\n```\n![获取的所有 li 节点](http://p0.meituan.net/myvideodistribute/6cb3b64a2be23ea9ffce86db74757615120112.png)\n\n### 第二步：匹配出 data-tag 中为 css 的 standard\n- ![css standard](http://p1.meituan.net/myvideodistribute/3d1fb8e8198d5d5774cd861235d5682a314365.png)\n- 观察得到，我们只需要将 data-tag nodeValue 中有 “css” 抓出来即可\n\n\t```javascript\n\tconst list = document.getElementById(\"container\").children\n\tconst result = []\n\tfor (let i of list) {\n\t  if (i.getAttribute('data-tag').match(/css/)) {\n\t    result.push({\n\t      name: i.children[1].innerText,\n\t      url: i.children[1].children[0].href\n\t    })\n\t  }\n\t}\n\tconsole.log(JSON.stringify(result, null, '    '))\n\t```\n\n\n## 收集 CSS 属性相关标准\n\n```javascript\nlet iframe = document.createElement(\"iframe\");\ndocument.body.innerHTML = \"\";\ndocument.body.appendChild(iframe);\n\n\n\n\nfunction happen(element, event){\n    return new Promise(function(resolve){\n        let handler = () => {\n            resolve();\n            element.removeEventListener(event, handler);\n        }\n        element.addEventListener(event, handler);\n    })\n}\n\n\n\n\nvoid async function(){\n    for(let standard of standards) {\n        iframe.src = standard.url;\n        console.log(standard.name);\n        await happen(iframe, \"load\");\n    }\n}();\n```\n\n\n## 写在后面\n- 祝大家多多发财","source":"_posts/CSS基本语法-基础机制.md","raw":"---\ntitle: CSS基本语法+基础机制\ndate: 2020-05-24 21:41:08\ntags: \n- CSS\ncategories:\n- CSS\ndescription:\n- CSS基本语法+基础机制\n---\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 整理一下平时所学+所用到的 CSS 基本语法\n\n<!-- more -->\n\n\n## CSS 基本语法\n### CSS2.1 语法\n- [Appendix G. Grammar of CSS 2.1](https://www.w3.org/TR/CSS21/grammar.html#q25.0)\n- [CSS Syntax Module Level 3](https://www.w3.org/TR/css-syntax-3/)\n\n\n### CSS2.1 总体结构\n![productions_1](http://p0.meituan.net/myvideodistribute/b9beefeab08a031d689d4e989de4c2f1197837.png)\n![productions_2](http://p0.meituan.net/myvideodistribute/7340e333e43e235776839a2c00bfb982147104.png)\n\n- 简化为：\n\t- @charset\n\t- @import\n\t- rules\n\t\t- @media\n\t\t- @page\n\t\t- rule\n\n\n## CSS @ Rules\n- [@charset](https://www.w3.org/TR/css-syntax-3/)\n- [@import](https://www.w3.org/TR/css-cascade-4/)\n- [@media](https://www.w3.org/TR/css3-conditional/)\n- [@page](https://www.w3.org/TR/css-page-3/)\n- [@counter-style](https://www.w3.org/TR/css-counter-styles-3/)\n- [@keyframes](https://www.w3.org/TR/css-animations-1/)\n- [@fontface](https://www.w3.org/TR/css-fonts-3/)\n- [@supports](https://www.w3.org/TR/css3-conditional/)\n- [@namespace](https://www.w3.org/TR/css-namespaces-3/)\n\n\n## CSS Qualified Rule 的结构\n- Selector\n\t- [selectors-3](https://www.w3.org/TR/selectors-3/)\n\t- [selectors-4](https://www.w3.org/TR/selectors-4/)\n- Key\n\t- Properties\n\t- Variables\n\t\t- [css-variables](https://www.w3.org/TR/css-variables/)\n- Value\n\t- [css-values-4](https://www.w3.org/TR/css-values-4/)\n\n\n## 初建 CSS 知识体系\n- ![CSS 知识体系](http://p0.meituan.net/myvideodistribute/236b6afc66be8e7c1ea00a43b76d43a7259289.png)\n\n\n## 收集标准\n![CSS standards](http://p0.meituan.net/myvideodistribute/77c702cce890b37809d44d258837f1bd733569.png)\n\n\n- all standards and drafts are in the id named container of the html document.\n- so we can write a script to collect the standards.\n\n### 第一步：获取所有 li dom 节点\n\t\n\t\n\t\n```javascript\nconst list = document.getElementById(\"container\").children\n  \nconsole.log('list', list)\n```\n![获取的所有 li 节点](http://p0.meituan.net/myvideodistribute/6cb3b64a2be23ea9ffce86db74757615120112.png)\n\n### 第二步：匹配出 data-tag 中为 css 的 standard\n- ![css standard](http://p1.meituan.net/myvideodistribute/3d1fb8e8198d5d5774cd861235d5682a314365.png)\n- 观察得到，我们只需要将 data-tag nodeValue 中有 “css” 抓出来即可\n\n\t```javascript\n\tconst list = document.getElementById(\"container\").children\n\tconst result = []\n\tfor (let i of list) {\n\t  if (i.getAttribute('data-tag').match(/css/)) {\n\t    result.push({\n\t      name: i.children[1].innerText,\n\t      url: i.children[1].children[0].href\n\t    })\n\t  }\n\t}\n\tconsole.log(JSON.stringify(result, null, '    '))\n\t```\n\n\n## 收集 CSS 属性相关标准\n\n```javascript\nlet iframe = document.createElement(\"iframe\");\ndocument.body.innerHTML = \"\";\ndocument.body.appendChild(iframe);\n\n\n\n\nfunction happen(element, event){\n    return new Promise(function(resolve){\n        let handler = () => {\n            resolve();\n            element.removeEventListener(event, handler);\n        }\n        element.addEventListener(event, handler);\n    })\n}\n\n\n\n\nvoid async function(){\n    for(let standard of standards) {\n        iframe.src = standard.url;\n        console.log(standard.name);\n        await happen(iframe, \"load\");\n    }\n}();\n```\n\n\n## 写在后面\n- 祝大家多多发财","slug":"CSS基本语法-基础机制","published":1,"updated":"2020-05-26T15:19:13.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1vr00011wp36u9c1hte","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>整理一下平时所学+所用到的 CSS 基本语法</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"CSS-基本语法\"><a href=\"#CSS-基本语法\" class=\"headerlink\" title=\"CSS 基本语法\"></a>CSS 基本语法</h2><h3 id=\"CSS2-1-语法\"><a href=\"#CSS2-1-语法\" class=\"headerlink\" title=\"CSS2.1 语法\"></a>CSS2.1 语法</h3><ul>\n<li><a href=\"https://www.w3.org/TR/CSS21/grammar.html#q25.0\" target=\"_blank\" rel=\"noopener\">Appendix G. Grammar of CSS 2.1</a></li>\n<li><a href=\"https://www.w3.org/TR/css-syntax-3/\" target=\"_blank\" rel=\"noopener\">CSS Syntax Module Level 3</a></li>\n</ul>\n<h3 id=\"CSS2-1-总体结构\"><a href=\"#CSS2-1-总体结构\" class=\"headerlink\" title=\"CSS2.1 总体结构\"></a>CSS2.1 总体结构</h3><p><img src=\"http://p0.meituan.net/myvideodistribute/b9beefeab08a031d689d4e989de4c2f1197837.png\" alt=\"productions_1\"><br><img src=\"http://p0.meituan.net/myvideodistribute/7340e333e43e235776839a2c00bfb982147104.png\" alt=\"productions_2\"></p>\n<ul>\n<li>简化为：<ul>\n<li>@charset</li>\n<li>@import</li>\n<li>rules<ul>\n<li>@media</li>\n<li>@page</li>\n<li>rule</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CSS-Rules\"><a href=\"#CSS-Rules\" class=\"headerlink\" title=\"CSS @ Rules\"></a>CSS @ Rules</h2><ul>\n<li><a href=\"https://www.w3.org/TR/css-syntax-3/\" target=\"_blank\" rel=\"noopener\">@charset</a></li>\n<li><a href=\"https://www.w3.org/TR/css-cascade-4/\" target=\"_blank\" rel=\"noopener\">@import</a></li>\n<li><a href=\"https://www.w3.org/TR/css3-conditional/\" target=\"_blank\" rel=\"noopener\">@media</a></li>\n<li><a href=\"https://www.w3.org/TR/css-page-3/\" target=\"_blank\" rel=\"noopener\">@page</a></li>\n<li><a href=\"https://www.w3.org/TR/css-counter-styles-3/\" target=\"_blank\" rel=\"noopener\">@counter-style</a></li>\n<li><a href=\"https://www.w3.org/TR/css-animations-1/\" target=\"_blank\" rel=\"noopener\">@keyframes</a></li>\n<li><a href=\"https://www.w3.org/TR/css-fonts-3/\" target=\"_blank\" rel=\"noopener\">@fontface</a></li>\n<li><a href=\"https://www.w3.org/TR/css3-conditional/\" target=\"_blank\" rel=\"noopener\">@supports</a></li>\n<li><a href=\"https://www.w3.org/TR/css-namespaces-3/\" target=\"_blank\" rel=\"noopener\">@namespace</a></li>\n</ul>\n<h2 id=\"CSS-Qualified-Rule-的结构\"><a href=\"#CSS-Qualified-Rule-的结构\" class=\"headerlink\" title=\"CSS Qualified Rule 的结构\"></a>CSS Qualified Rule 的结构</h2><ul>\n<li>Selector<ul>\n<li><a href=\"https://www.w3.org/TR/selectors-3/\" target=\"_blank\" rel=\"noopener\">selectors-3</a></li>\n<li><a href=\"https://www.w3.org/TR/selectors-4/\" target=\"_blank\" rel=\"noopener\">selectors-4</a></li>\n</ul>\n</li>\n<li>Key<ul>\n<li>Properties</li>\n<li>Variables<ul>\n<li><a href=\"https://www.w3.org/TR/css-variables/\" target=\"_blank\" rel=\"noopener\">css-variables</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Value<ul>\n<li><a href=\"https://www.w3.org/TR/css-values-4/\" target=\"_blank\" rel=\"noopener\">css-values-4</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"初建-CSS-知识体系\"><a href=\"#初建-CSS-知识体系\" class=\"headerlink\" title=\"初建 CSS 知识体系\"></a>初建 CSS 知识体系</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/236b6afc66be8e7c1ea00a43b76d43a7259289.png\" alt=\"CSS 知识体系\"></li>\n</ul>\n<h2 id=\"收集标准\"><a href=\"#收集标准\" class=\"headerlink\" title=\"收集标准\"></a>收集标准</h2><p><img src=\"http://p0.meituan.net/myvideodistribute/77c702cce890b37809d44d258837f1bd733569.png\" alt=\"CSS standards\"></p>\n<ul>\n<li>all standards and drafts are in the id named container of the html document.</li>\n<li>so we can write a script to collect the standards.</li>\n</ul>\n<h3 id=\"第一步：获取所有-li-dom-节点\"><a href=\"#第一步：获取所有-li-dom-节点\" class=\"headerlink\" title=\"第一步：获取所有 li dom 节点\"></a>第一步：获取所有 li dom 节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).children</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list'</span>, list)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p0.meituan.net/myvideodistribute/6cb3b64a2be23ea9ffce86db74757615120112.png\" alt=\"获取的所有 li 节点\"></p>\n<h3 id=\"第二步：匹配出-data-tag-中为-css-的-standard\"><a href=\"#第二步：匹配出-data-tag-中为-css-的-standard\" class=\"headerlink\" title=\"第二步：匹配出 data-tag 中为 css 的 standard\"></a>第二步：匹配出 data-tag 中为 css 的 standard</h3><ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/3d1fb8e8198d5d5774cd861235d5682a314365.png\" alt=\"css standard\"></p>\n</li>\n<li><p>观察得到，我们只需要将 data-tag nodeValue 中有 “css” 抓出来即可</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).children</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i.getAttribute(<span class=\"string\">'data-tag'</span>).match(<span class=\"regexp\">/css/</span>)) &#123;</span><br><span class=\"line\">    result.push(&#123;</span><br><span class=\"line\">      name: i.children[<span class=\"number\">1</span>].innerText,</span><br><span class=\"line\">      url: i.children[<span class=\"number\">1</span>].children[<span class=\"number\">0</span>].href</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(result, <span class=\"literal\">null</span>, <span class=\"string\">'    '</span>))</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"收集-CSS-属性相关标准\"><a href=\"#收集-CSS-属性相关标准\" class=\"headerlink\" title=\"收集 CSS 属性相关标准\"></a>收集 CSS 属性相关标准</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">happen</span>(<span class=\"params\">element, event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> handler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">            element.removeEventListener(event, handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        element.addEventListener(event, handler);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> standard <span class=\"keyword\">of</span> standards) &#123;</span><br><span class=\"line\">        iframe.src = standard.url;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(standard.name);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> happen(iframe, <span class=\"string\">\"load\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>整理一下平时所学+所用到的 CSS 基本语法</li>\n</ul>","more":"<h2 id=\"CSS-基本语法\"><a href=\"#CSS-基本语法\" class=\"headerlink\" title=\"CSS 基本语法\"></a>CSS 基本语法</h2><h3 id=\"CSS2-1-语法\"><a href=\"#CSS2-1-语法\" class=\"headerlink\" title=\"CSS2.1 语法\"></a>CSS2.1 语法</h3><ul>\n<li><a href=\"https://www.w3.org/TR/CSS21/grammar.html#q25.0\" target=\"_blank\" rel=\"noopener\">Appendix G. Grammar of CSS 2.1</a></li>\n<li><a href=\"https://www.w3.org/TR/css-syntax-3/\" target=\"_blank\" rel=\"noopener\">CSS Syntax Module Level 3</a></li>\n</ul>\n<h3 id=\"CSS2-1-总体结构\"><a href=\"#CSS2-1-总体结构\" class=\"headerlink\" title=\"CSS2.1 总体结构\"></a>CSS2.1 总体结构</h3><p><img src=\"http://p0.meituan.net/myvideodistribute/b9beefeab08a031d689d4e989de4c2f1197837.png\" alt=\"productions_1\"><br><img src=\"http://p0.meituan.net/myvideodistribute/7340e333e43e235776839a2c00bfb982147104.png\" alt=\"productions_2\"></p>\n<ul>\n<li>简化为：<ul>\n<li>@charset</li>\n<li>@import</li>\n<li>rules<ul>\n<li>@media</li>\n<li>@page</li>\n<li>rule</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CSS-Rules\"><a href=\"#CSS-Rules\" class=\"headerlink\" title=\"CSS @ Rules\"></a>CSS @ Rules</h2><ul>\n<li><a href=\"https://www.w3.org/TR/css-syntax-3/\" target=\"_blank\" rel=\"noopener\">@charset</a></li>\n<li><a href=\"https://www.w3.org/TR/css-cascade-4/\" target=\"_blank\" rel=\"noopener\">@import</a></li>\n<li><a href=\"https://www.w3.org/TR/css3-conditional/\" target=\"_blank\" rel=\"noopener\">@media</a></li>\n<li><a href=\"https://www.w3.org/TR/css-page-3/\" target=\"_blank\" rel=\"noopener\">@page</a></li>\n<li><a href=\"https://www.w3.org/TR/css-counter-styles-3/\" target=\"_blank\" rel=\"noopener\">@counter-style</a></li>\n<li><a href=\"https://www.w3.org/TR/css-animations-1/\" target=\"_blank\" rel=\"noopener\">@keyframes</a></li>\n<li><a href=\"https://www.w3.org/TR/css-fonts-3/\" target=\"_blank\" rel=\"noopener\">@fontface</a></li>\n<li><a href=\"https://www.w3.org/TR/css3-conditional/\" target=\"_blank\" rel=\"noopener\">@supports</a></li>\n<li><a href=\"https://www.w3.org/TR/css-namespaces-3/\" target=\"_blank\" rel=\"noopener\">@namespace</a></li>\n</ul>\n<h2 id=\"CSS-Qualified-Rule-的结构\"><a href=\"#CSS-Qualified-Rule-的结构\" class=\"headerlink\" title=\"CSS Qualified Rule 的结构\"></a>CSS Qualified Rule 的结构</h2><ul>\n<li>Selector<ul>\n<li><a href=\"https://www.w3.org/TR/selectors-3/\" target=\"_blank\" rel=\"noopener\">selectors-3</a></li>\n<li><a href=\"https://www.w3.org/TR/selectors-4/\" target=\"_blank\" rel=\"noopener\">selectors-4</a></li>\n</ul>\n</li>\n<li>Key<ul>\n<li>Properties</li>\n<li>Variables<ul>\n<li><a href=\"https://www.w3.org/TR/css-variables/\" target=\"_blank\" rel=\"noopener\">css-variables</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Value<ul>\n<li><a href=\"https://www.w3.org/TR/css-values-4/\" target=\"_blank\" rel=\"noopener\">css-values-4</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"初建-CSS-知识体系\"><a href=\"#初建-CSS-知识体系\" class=\"headerlink\" title=\"初建 CSS 知识体系\"></a>初建 CSS 知识体系</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/236b6afc66be8e7c1ea00a43b76d43a7259289.png\" alt=\"CSS 知识体系\"></li>\n</ul>\n<h2 id=\"收集标准\"><a href=\"#收集标准\" class=\"headerlink\" title=\"收集标准\"></a>收集标准</h2><p><img src=\"http://p0.meituan.net/myvideodistribute/77c702cce890b37809d44d258837f1bd733569.png\" alt=\"CSS standards\"></p>\n<ul>\n<li>all standards and drafts are in the id named container of the html document.</li>\n<li>so we can write a script to collect the standards.</li>\n</ul>\n<h3 id=\"第一步：获取所有-li-dom-节点\"><a href=\"#第一步：获取所有-li-dom-节点\" class=\"headerlink\" title=\"第一步：获取所有 li dom 节点\"></a>第一步：获取所有 li dom 节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).children</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list'</span>, list)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p0.meituan.net/myvideodistribute/6cb3b64a2be23ea9ffce86db74757615120112.png\" alt=\"获取的所有 li 节点\"></p>\n<h3 id=\"第二步：匹配出-data-tag-中为-css-的-standard\"><a href=\"#第二步：匹配出-data-tag-中为-css-的-standard\" class=\"headerlink\" title=\"第二步：匹配出 data-tag 中为 css 的 standard\"></a>第二步：匹配出 data-tag 中为 css 的 standard</h3><ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/3d1fb8e8198d5d5774cd861235d5682a314365.png\" alt=\"css standard\"></p>\n</li>\n<li><p>观察得到，我们只需要将 data-tag nodeValue 中有 “css” 抓出来即可</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).children</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i.getAttribute(<span class=\"string\">'data-tag'</span>).match(<span class=\"regexp\">/css/</span>)) &#123;</span><br><span class=\"line\">    result.push(&#123;</span><br><span class=\"line\">      name: i.children[<span class=\"number\">1</span>].innerText,</span><br><span class=\"line\">      url: i.children[<span class=\"number\">1</span>].children[<span class=\"number\">0</span>].href</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(result, <span class=\"literal\">null</span>, <span class=\"string\">'    '</span>))</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"收集-CSS-属性相关标准\"><a href=\"#收集-CSS-属性相关标准\" class=\"headerlink\" title=\"收集 CSS 属性相关标准\"></a>收集 CSS 属性相关标准</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">happen</span>(<span class=\"params\">element, event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> handler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">            element.removeEventListener(event, handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        element.addEventListener(event, handler);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> standard <span class=\"keyword\">of</span> standards) &#123;</span><br><span class=\"line\">        iframe.src = standard.url;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(standard.name);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> happen(iframe, <span class=\"string\">\"load\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Elle-训练算法计划","date":"2020-04-06T10:37:00.000Z","description":["简单记录一下自己整个算法训练的基础步骤+学习方法"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 简单记录一下自己整个算法训练的基础步骤+学习方法\n- 主要的数据结构和算法会单开文档来写\n\n<!-- more -->\n## Chunk it up 切碎知识点\n- 数据结构\n\t- 一维数据结构\n\t\t- 基础：数组 array(string), 链表 linked list\n\t\t- 高级：栈 stack, 队列 queue, 双端队列 deque, 集合 set, 映射 map (hash or map), etc\n\t- 二维数据结构\n\t\t- 一维泛化\n\t\t- 基础：树 tree，图 graph\n\t\t- 高级：二叉搜索树 binary search tree (red-black tree, AVL)，堆 heap, 并查集 disjoint set, 字典树 trie, etc\n\t- 特殊数据结构\n\t\t-  位运算 bitwise, 布隆过滤器 bloom filter\n\t\t-  LRU Cache\n- 算法\n\t- if-else, switch --> branch\n\t- for, while loop --> iteration\n\t- 递归 recursion (divide & conquer 分治, backtrace 回溯)\n\t- 搜索 search: 深度优先搜索 depth first search, 广度优先搜索 breadth first search, A* (启发式搜索), etc\n\t- 动态规划 dynamic programing\n\t- 二分查找 binary search\n\t- 贪心 greedy\n\t- 数学 math, 集合 geometry\n\n## Deliberate Practicing 刻意练习\n- 刻意练习-过遍数 (五遍刷题法)\n\t- 刷题第一遍\n\t\t- 5分钟（5~15 mins）：读题+思考\n\t\t- 直接看解法：注意！多解法，比较解乏优劣\n\t\t- 有思路，直接写\n\t\t- 背诵+默写好的解法\n\t- 刷题第二遍\n\t\t- 马上自己写 --> LeetCode提交\n\t\t- 多种解法比较、体会 --> 优化\n\t\t- 多种解法自己写一遍，直到通过\n\t- 刷题第三遍\n\t\t- 24h后，再重复做题\n\t\t- 不同解法的熟练程度 --> 专项练习\n\t- 刷题第四遍\n\t\t- 过了一周后：反复回来练习相同的题目\n\t\t- 不熟练的题目 --> 专项练习\n\t- 刷题第五遍\n\t\t- 面试前二周恢复性训练\n- 练习缺陷、弱点地方\n\t- 中文站 leetcode-cn.com 刷题\n\t- 国际站 leetcode.com 看discuss-most votes\n- 切题\n\t- **Clarification 审题**\n\t- **Possible Solutions**\n\t\t- compare (time/space)\n\t\t- optimal (加强)\n\t- **Coding**\n\t- **Test cases**\n\n## Feedback 反馈\n- 即时反馈\n- 主动型反馈\n- 被动型反馈\n\t- code review\n\n## 指法\n- top tips for vscode\n\n## 自顶向下的编程方式\n- [自顶向下的编程方式](http://markhneedham.com/blog/2008/09/15/clean-code-book-review/)\n\n## Big O Notation\n- O(1): constant Complexity 常数复杂度\n- O(log n): Logarithmic Complexity 对数复杂度\n- O(n): Linear Complexity 线性时间复杂度\n- O(n^2): N square Complexity 平方\n- O(n^3): N cube Complexity 立方\n- O(2^n): Exponential Growth 指数\n- O(n!): Factorial 阶乘\n- ![时间复杂度](http://p0.meituan.net/myvideodistribute/c88294c6a8b88448ae14e2914c7bbfd2337181.png)\n\n## master theorem\n- 二分查找\n- 二叉树的遍历（每个节点都访问一次，且仅访问一次）\n- 二维有序矩阵\n- 归并排序 O(nlogn)\n- ![主定理](http://p1.meituan.net/myvideodistribute/5b978d58635ea2e9233ea5e502ab706f246540.png)","source":"_posts/Elle-训练算法计划.md","raw":"---\ntitle: Elle-训练算法计划\ndate: 2020-04-06 18:37:00\ntags: \n- 算法\ncategories:\n- 算法\ndescription:\n- 简单记录一下自己整个算法训练的基础步骤+学习方法\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 简单记录一下自己整个算法训练的基础步骤+学习方法\n- 主要的数据结构和算法会单开文档来写\n\n<!-- more -->\n## Chunk it up 切碎知识点\n- 数据结构\n\t- 一维数据结构\n\t\t- 基础：数组 array(string), 链表 linked list\n\t\t- 高级：栈 stack, 队列 queue, 双端队列 deque, 集合 set, 映射 map (hash or map), etc\n\t- 二维数据结构\n\t\t- 一维泛化\n\t\t- 基础：树 tree，图 graph\n\t\t- 高级：二叉搜索树 binary search tree (red-black tree, AVL)，堆 heap, 并查集 disjoint set, 字典树 trie, etc\n\t- 特殊数据结构\n\t\t-  位运算 bitwise, 布隆过滤器 bloom filter\n\t\t-  LRU Cache\n- 算法\n\t- if-else, switch --> branch\n\t- for, while loop --> iteration\n\t- 递归 recursion (divide & conquer 分治, backtrace 回溯)\n\t- 搜索 search: 深度优先搜索 depth first search, 广度优先搜索 breadth first search, A* (启发式搜索), etc\n\t- 动态规划 dynamic programing\n\t- 二分查找 binary search\n\t- 贪心 greedy\n\t- 数学 math, 集合 geometry\n\n## Deliberate Practicing 刻意练习\n- 刻意练习-过遍数 (五遍刷题法)\n\t- 刷题第一遍\n\t\t- 5分钟（5~15 mins）：读题+思考\n\t\t- 直接看解法：注意！多解法，比较解乏优劣\n\t\t- 有思路，直接写\n\t\t- 背诵+默写好的解法\n\t- 刷题第二遍\n\t\t- 马上自己写 --> LeetCode提交\n\t\t- 多种解法比较、体会 --> 优化\n\t\t- 多种解法自己写一遍，直到通过\n\t- 刷题第三遍\n\t\t- 24h后，再重复做题\n\t\t- 不同解法的熟练程度 --> 专项练习\n\t- 刷题第四遍\n\t\t- 过了一周后：反复回来练习相同的题目\n\t\t- 不熟练的题目 --> 专项练习\n\t- 刷题第五遍\n\t\t- 面试前二周恢复性训练\n- 练习缺陷、弱点地方\n\t- 中文站 leetcode-cn.com 刷题\n\t- 国际站 leetcode.com 看discuss-most votes\n- 切题\n\t- **Clarification 审题**\n\t- **Possible Solutions**\n\t\t- compare (time/space)\n\t\t- optimal (加强)\n\t- **Coding**\n\t- **Test cases**\n\n## Feedback 反馈\n- 即时反馈\n- 主动型反馈\n- 被动型反馈\n\t- code review\n\n## 指法\n- top tips for vscode\n\n## 自顶向下的编程方式\n- [自顶向下的编程方式](http://markhneedham.com/blog/2008/09/15/clean-code-book-review/)\n\n## Big O Notation\n- O(1): constant Complexity 常数复杂度\n- O(log n): Logarithmic Complexity 对数复杂度\n- O(n): Linear Complexity 线性时间复杂度\n- O(n^2): N square Complexity 平方\n- O(n^3): N cube Complexity 立方\n- O(2^n): Exponential Growth 指数\n- O(n!): Factorial 阶乘\n- ![时间复杂度](http://p0.meituan.net/myvideodistribute/c88294c6a8b88448ae14e2914c7bbfd2337181.png)\n\n## master theorem\n- 二分查找\n- 二叉树的遍历（每个节点都访问一次，且仅访问一次）\n- 二维有序矩阵\n- 归并排序 O(nlogn)\n- ![主定理](http://p1.meituan.net/myvideodistribute/5b978d58635ea2e9233ea5e502ab706f246540.png)","slug":"Elle-训练算法计划","published":1,"updated":"2020-04-26T11:01:59.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1vv00041wp31pcq7ncy","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>简单记录一下自己整个算法训练的基础步骤+学习方法</li>\n<li>主要的数据结构和算法会单开文档来写</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Chunk-it-up-切碎知识点\"><a href=\"#Chunk-it-up-切碎知识点\" class=\"headerlink\" title=\"Chunk it up 切碎知识点\"></a>Chunk it up 切碎知识点</h2><ul>\n<li>数据结构<ul>\n<li>一维数据结构<ul>\n<li>基础：数组 array(string), 链表 linked list</li>\n<li>高级：栈 stack, 队列 queue, 双端队列 deque, 集合 set, 映射 map (hash or map), etc</li>\n</ul>\n</li>\n<li>二维数据结构<ul>\n<li>一维泛化</li>\n<li>基础：树 tree，图 graph</li>\n<li>高级：二叉搜索树 binary search tree (red-black tree, AVL)，堆 heap, 并查集 disjoint set, 字典树 trie, etc</li>\n</ul>\n</li>\n<li>特殊数据结构<ul>\n<li>位运算 bitwise, 布隆过滤器 bloom filter</li>\n<li>LRU Cache</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法<ul>\n<li>if-else, switch –&gt; branch</li>\n<li>for, while loop –&gt; iteration</li>\n<li>递归 recursion (divide &amp; conquer 分治, backtrace 回溯)</li>\n<li>搜索 search: 深度优先搜索 depth first search, 广度优先搜索 breadth first search, A* (启发式搜索), etc</li>\n<li>动态规划 dynamic programing</li>\n<li>二分查找 binary search</li>\n<li>贪心 greedy</li>\n<li>数学 math, 集合 geometry</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deliberate-Practicing-刻意练习\"><a href=\"#Deliberate-Practicing-刻意练习\" class=\"headerlink\" title=\"Deliberate Practicing 刻意练习\"></a>Deliberate Practicing 刻意练习</h2><ul>\n<li>刻意练习-过遍数 (五遍刷题法)<ul>\n<li>刷题第一遍<ul>\n<li>5分钟（5~15 mins）：读题+思考</li>\n<li>直接看解法：注意！多解法，比较解乏优劣</li>\n<li>有思路，直接写</li>\n<li>背诵+默写好的解法</li>\n</ul>\n</li>\n<li>刷题第二遍<ul>\n<li>马上自己写 –&gt; LeetCode提交</li>\n<li>多种解法比较、体会 –&gt; 优化</li>\n<li>多种解法自己写一遍，直到通过</li>\n</ul>\n</li>\n<li>刷题第三遍<ul>\n<li>24h后，再重复做题</li>\n<li>不同解法的熟练程度 –&gt; 专项练习</li>\n</ul>\n</li>\n<li>刷题第四遍<ul>\n<li>过了一周后：反复回来练习相同的题目</li>\n<li>不熟练的题目 –&gt; 专项练习</li>\n</ul>\n</li>\n<li>刷题第五遍<ul>\n<li>面试前二周恢复性训练</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>练习缺陷、弱点地方<ul>\n<li>中文站 leetcode-cn.com 刷题</li>\n<li>国际站 leetcode.com 看discuss-most votes</li>\n</ul>\n</li>\n<li>切题<ul>\n<li><strong>Clarification 审题</strong></li>\n<li><strong>Possible Solutions</strong><ul>\n<li>compare (time/space)</li>\n<li>optimal (加强)</li>\n</ul>\n</li>\n<li><strong>Coding</strong></li>\n<li><strong>Test cases</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Feedback-反馈\"><a href=\"#Feedback-反馈\" class=\"headerlink\" title=\"Feedback 反馈\"></a>Feedback 反馈</h2><ul>\n<li>即时反馈</li>\n<li>主动型反馈</li>\n<li>被动型反馈<ul>\n<li>code review</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指法\"><a href=\"#指法\" class=\"headerlink\" title=\"指法\"></a>指法</h2><ul>\n<li>top tips for vscode</li>\n</ul>\n<h2 id=\"自顶向下的编程方式\"><a href=\"#自顶向下的编程方式\" class=\"headerlink\" title=\"自顶向下的编程方式\"></a>自顶向下的编程方式</h2><ul>\n<li><a href=\"http://markhneedham.com/blog/2008/09/15/clean-code-book-review/\" target=\"_blank\" rel=\"noopener\">自顶向下的编程方式</a></li>\n</ul>\n<h2 id=\"Big-O-Notation\"><a href=\"#Big-O-Notation\" class=\"headerlink\" title=\"Big O Notation\"></a>Big O Notation</h2><ul>\n<li>O(1): constant Complexity 常数复杂度</li>\n<li>O(log n): Logarithmic Complexity 对数复杂度</li>\n<li>O(n): Linear Complexity 线性时间复杂度</li>\n<li>O(n^2): N square Complexity 平方</li>\n<li>O(n^3): N cube Complexity 立方</li>\n<li>O(2^n): Exponential Growth 指数</li>\n<li>O(n!): Factorial 阶乘</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c88294c6a8b88448ae14e2914c7bbfd2337181.png\" alt=\"时间复杂度\"></li>\n</ul>\n<h2 id=\"master-theorem\"><a href=\"#master-theorem\" class=\"headerlink\" title=\"master theorem\"></a>master theorem</h2><ul>\n<li>二分查找</li>\n<li>二叉树的遍历（每个节点都访问一次，且仅访问一次）</li>\n<li>二维有序矩阵</li>\n<li>归并排序 O(nlogn)</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/5b978d58635ea2e9233ea5e502ab706f246540.png\" alt=\"主定理\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>简单记录一下自己整个算法训练的基础步骤+学习方法</li>\n<li>主要的数据结构和算法会单开文档来写</li>\n</ul>","more":"<h2 id=\"Chunk-it-up-切碎知识点\"><a href=\"#Chunk-it-up-切碎知识点\" class=\"headerlink\" title=\"Chunk it up 切碎知识点\"></a>Chunk it up 切碎知识点</h2><ul>\n<li>数据结构<ul>\n<li>一维数据结构<ul>\n<li>基础：数组 array(string), 链表 linked list</li>\n<li>高级：栈 stack, 队列 queue, 双端队列 deque, 集合 set, 映射 map (hash or map), etc</li>\n</ul>\n</li>\n<li>二维数据结构<ul>\n<li>一维泛化</li>\n<li>基础：树 tree，图 graph</li>\n<li>高级：二叉搜索树 binary search tree (red-black tree, AVL)，堆 heap, 并查集 disjoint set, 字典树 trie, etc</li>\n</ul>\n</li>\n<li>特殊数据结构<ul>\n<li>位运算 bitwise, 布隆过滤器 bloom filter</li>\n<li>LRU Cache</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法<ul>\n<li>if-else, switch –&gt; branch</li>\n<li>for, while loop –&gt; iteration</li>\n<li>递归 recursion (divide &amp; conquer 分治, backtrace 回溯)</li>\n<li>搜索 search: 深度优先搜索 depth first search, 广度优先搜索 breadth first search, A* (启发式搜索), etc</li>\n<li>动态规划 dynamic programing</li>\n<li>二分查找 binary search</li>\n<li>贪心 greedy</li>\n<li>数学 math, 集合 geometry</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deliberate-Practicing-刻意练习\"><a href=\"#Deliberate-Practicing-刻意练习\" class=\"headerlink\" title=\"Deliberate Practicing 刻意练习\"></a>Deliberate Practicing 刻意练习</h2><ul>\n<li>刻意练习-过遍数 (五遍刷题法)<ul>\n<li>刷题第一遍<ul>\n<li>5分钟（5~15 mins）：读题+思考</li>\n<li>直接看解法：注意！多解法，比较解乏优劣</li>\n<li>有思路，直接写</li>\n<li>背诵+默写好的解法</li>\n</ul>\n</li>\n<li>刷题第二遍<ul>\n<li>马上自己写 –&gt; LeetCode提交</li>\n<li>多种解法比较、体会 –&gt; 优化</li>\n<li>多种解法自己写一遍，直到通过</li>\n</ul>\n</li>\n<li>刷题第三遍<ul>\n<li>24h后，再重复做题</li>\n<li>不同解法的熟练程度 –&gt; 专项练习</li>\n</ul>\n</li>\n<li>刷题第四遍<ul>\n<li>过了一周后：反复回来练习相同的题目</li>\n<li>不熟练的题目 –&gt; 专项练习</li>\n</ul>\n</li>\n<li>刷题第五遍<ul>\n<li>面试前二周恢复性训练</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>练习缺陷、弱点地方<ul>\n<li>中文站 leetcode-cn.com 刷题</li>\n<li>国际站 leetcode.com 看discuss-most votes</li>\n</ul>\n</li>\n<li>切题<ul>\n<li><strong>Clarification 审题</strong></li>\n<li><strong>Possible Solutions</strong><ul>\n<li>compare (time/space)</li>\n<li>optimal (加强)</li>\n</ul>\n</li>\n<li><strong>Coding</strong></li>\n<li><strong>Test cases</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Feedback-反馈\"><a href=\"#Feedback-反馈\" class=\"headerlink\" title=\"Feedback 反馈\"></a>Feedback 反馈</h2><ul>\n<li>即时反馈</li>\n<li>主动型反馈</li>\n<li>被动型反馈<ul>\n<li>code review</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指法\"><a href=\"#指法\" class=\"headerlink\" title=\"指法\"></a>指法</h2><ul>\n<li>top tips for vscode</li>\n</ul>\n<h2 id=\"自顶向下的编程方式\"><a href=\"#自顶向下的编程方式\" class=\"headerlink\" title=\"自顶向下的编程方式\"></a>自顶向下的编程方式</h2><ul>\n<li><a href=\"http://markhneedham.com/blog/2008/09/15/clean-code-book-review/\" target=\"_blank\" rel=\"noopener\">自顶向下的编程方式</a></li>\n</ul>\n<h2 id=\"Big-O-Notation\"><a href=\"#Big-O-Notation\" class=\"headerlink\" title=\"Big O Notation\"></a>Big O Notation</h2><ul>\n<li>O(1): constant Complexity 常数复杂度</li>\n<li>O(log n): Logarithmic Complexity 对数复杂度</li>\n<li>O(n): Linear Complexity 线性时间复杂度</li>\n<li>O(n^2): N square Complexity 平方</li>\n<li>O(n^3): N cube Complexity 立方</li>\n<li>O(2^n): Exponential Growth 指数</li>\n<li>O(n!): Factorial 阶乘</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c88294c6a8b88448ae14e2914c7bbfd2337181.png\" alt=\"时间复杂度\"></li>\n</ul>\n<h2 id=\"master-theorem\"><a href=\"#master-theorem\" class=\"headerlink\" title=\"master theorem\"></a>master theorem</h2><ul>\n<li>二分查找</li>\n<li>二叉树的遍历（每个节点都访问一次，且仅访问一次）</li>\n<li>二维有序矩阵</li>\n<li>归并排序 O(nlogn)</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/5b978d58635ea2e9233ea5e502ab706f246540.png\" alt=\"主定理\"></li>\n</ul>"},{"title":"Javascript Types","date":"2020-04-20T03:19:06.000Z","description":["Javascript -- Atom - Types"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n# Javascript -- Atom - Types\n## Atom\n### Unicode （字符集）\n- Unicode Blocks\n\t- JS使用的不是ASCII字符集，但是都要兼容ASCII字符集\n\t\t- a 码点 --> 97, A 码点 --> 65\n\t- U+000A LINE FEED 换行\n\t\t- Form Feed 翻页\n\t\t- CJK 中文字符 Chinese Japan Korean\n\t- U+0020 SPACE 空格\n\t- BMP (Basic Multilingual Plane)基本字符平面 四位能表示的范围\n\t- 超出BMP范围\n\t\t- fromCodePoint\n\t\t- codePointAt\n\t- 隐性需求需要可以使用\\u转义\n\t\t- \"厉害\".codePointAt(0).toString(16)\n\t\t- \\u5389\\u5bb3\n<!-- more -->\n\n- InputElement\n\t- WhiteSpace 空格\n\t\t- &lt;TAB&gt; Character Tabulation\n\t\t- &lt;VT&gt; Vertical Line\n\t\t- &lt;FF&gt; Form Feed \n\t\t- &lt;SP&gt; \n\t\t- &lt;NBSP&gt; html根据空格分词，不想让词分根据空格分开，可以使用&nbsp;\n\t\t- &lt;ZWNBSP&gt; U+FEFF Zero WIDTH NO-BREAK SPACE，BOM --> Bit Order Mask\n\t\t- &lt;USP&gt;\n\t- LineTerminator 换行符\n\t\t- &lt;LF&gt; /n\n\t\t- &lt;CR&gt; Carriage Return 回车 /r\n\t\t- &lt;LS&gt; LINE SEPARATOR\n\t\t- &lt;PS&gt; PARAGRAPH SEPARATOR\n\t- Comment 注释\n\t- **Token** 与word不同，记号标记，JS中有效的东西\n\t\t- 自己写的，代码包含的有效信息\n\t\t\t- **Identifier** 标识符，以英文字母开头\n\t\t\t\t- 用作变量名，不能与关键字重复\n\t\t\t\t\t- undefined 全局变量名，修改不了\n\t\t\t\t\t- 离开全局作用域，便可以使用\n\t\t\t\t- 用作属性的部分，可以与关键字重复\n\t\t\t\t- Future reserved Keywords : enum\n\t\t\t- **Literal** 直接量\n\t\t\t\t- Number\t\n\t\t\t\t- String\n\t\t\t\t- Boolean\n\t\t\t\t- Object\n\t\t\t\t- Null\n\t\t\t\t- Undefined\n\t\t\t\t- Symbol\n\t\t- 帮助程序形成结构\n\t\t\t- **Punctuator** 符号\n\t\t\t- **Keywords** \n\n\t\t\t\n### Types\n#### Number\n- IEEE 754 Double Float\n\t- Sign(1)\n\t- Exponent(11) 指数，科学计数法\n\t- Fraction(52)\n- Grammar\n\t- DecimaLiteral\n\t\t- 0\n\t\t- 0.\n\t\t- .2\n\t\t- 1e3\n\t- BinaryIntegerLiteral\n\t\t- 0b111\n\t- OctalIntegerLiteral\n\t\t- 0o10\n\t- HexIntegerLiteral\n\t\t- 0xFF\n- 最佳实践\n\t- 浮点数比较时，需要加精度\n\t\n\t\t> Number.MAX\\_SAFE\\_INTEGER\n\t\t\n\t\t> Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON\n\t\n\t\n#### String\n- Character\n- Code Point\n- Encoding\n\t\n\t> 97 .toString(2)\n\t\n\t> \"97.\" 是一个合法的Number 01100001\n\t\n\t- ASCII\n\t- Unicode\n\t- UCS U+0000 - U+FFFF\n\t- GB\n\t\t- GB2312\n\t\t- GBK(GB13000)\n\t\t- GB18030\n\t- ISO-8859\n\t- BIG5\n- Grammar\n\t- \"abc\"\n\t\t- \"\\x10\" --> 8\n\t\t- \"\\u000a\"\n\t- 'abc'\n\t- \\`abc\\`\n\t\t\n\t\t```javascript\n\t\tvar a;\n\t\t/a/g 正则表达式直接量\n\t\t(a)\n\t\t/a/g --> 则表示除法\n\t\t(a)/a/g\n\t\t```\n\t\t\n\t\n#### Boolean\n- true\n- false\n\n\n\n\n#### Object\n\n#### Null\n- typeof 下为 Object\n\n\n#### Undefined\n\n#### Symbol\n\n## Expression\n## Statemment\n## Structure\n## Module\n","source":"_posts/Javascript-Atom+Types.md","raw":"---\ntitle: Javascript Types\ndate: 2020-04-20 11:19:06\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Atom - Types\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n# Javascript -- Atom - Types\n## Atom\n### Unicode （字符集）\n- Unicode Blocks\n\t- JS使用的不是ASCII字符集，但是都要兼容ASCII字符集\n\t\t- a 码点 --> 97, A 码点 --> 65\n\t- U+000A LINE FEED 换行\n\t\t- Form Feed 翻页\n\t\t- CJK 中文字符 Chinese Japan Korean\n\t- U+0020 SPACE 空格\n\t- BMP (Basic Multilingual Plane)基本字符平面 四位能表示的范围\n\t- 超出BMP范围\n\t\t- fromCodePoint\n\t\t- codePointAt\n\t- 隐性需求需要可以使用\\u转义\n\t\t- \"厉害\".codePointAt(0).toString(16)\n\t\t- \\u5389\\u5bb3\n<!-- more -->\n\n- InputElement\n\t- WhiteSpace 空格\n\t\t- &lt;TAB&gt; Character Tabulation\n\t\t- &lt;VT&gt; Vertical Line\n\t\t- &lt;FF&gt; Form Feed \n\t\t- &lt;SP&gt; \n\t\t- &lt;NBSP&gt; html根据空格分词，不想让词分根据空格分开，可以使用&nbsp;\n\t\t- &lt;ZWNBSP&gt; U+FEFF Zero WIDTH NO-BREAK SPACE，BOM --> Bit Order Mask\n\t\t- &lt;USP&gt;\n\t- LineTerminator 换行符\n\t\t- &lt;LF&gt; /n\n\t\t- &lt;CR&gt; Carriage Return 回车 /r\n\t\t- &lt;LS&gt; LINE SEPARATOR\n\t\t- &lt;PS&gt; PARAGRAPH SEPARATOR\n\t- Comment 注释\n\t- **Token** 与word不同，记号标记，JS中有效的东西\n\t\t- 自己写的，代码包含的有效信息\n\t\t\t- **Identifier** 标识符，以英文字母开头\n\t\t\t\t- 用作变量名，不能与关键字重复\n\t\t\t\t\t- undefined 全局变量名，修改不了\n\t\t\t\t\t- 离开全局作用域，便可以使用\n\t\t\t\t- 用作属性的部分，可以与关键字重复\n\t\t\t\t- Future reserved Keywords : enum\n\t\t\t- **Literal** 直接量\n\t\t\t\t- Number\t\n\t\t\t\t- String\n\t\t\t\t- Boolean\n\t\t\t\t- Object\n\t\t\t\t- Null\n\t\t\t\t- Undefined\n\t\t\t\t- Symbol\n\t\t- 帮助程序形成结构\n\t\t\t- **Punctuator** 符号\n\t\t\t- **Keywords** \n\n\t\t\t\n### Types\n#### Number\n- IEEE 754 Double Float\n\t- Sign(1)\n\t- Exponent(11) 指数，科学计数法\n\t- Fraction(52)\n- Grammar\n\t- DecimaLiteral\n\t\t- 0\n\t\t- 0.\n\t\t- .2\n\t\t- 1e3\n\t- BinaryIntegerLiteral\n\t\t- 0b111\n\t- OctalIntegerLiteral\n\t\t- 0o10\n\t- HexIntegerLiteral\n\t\t- 0xFF\n- 最佳实践\n\t- 浮点数比较时，需要加精度\n\t\n\t\t> Number.MAX\\_SAFE\\_INTEGER\n\t\t\n\t\t> Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON\n\t\n\t\n#### String\n- Character\n- Code Point\n- Encoding\n\t\n\t> 97 .toString(2)\n\t\n\t> \"97.\" 是一个合法的Number 01100001\n\t\n\t- ASCII\n\t- Unicode\n\t- UCS U+0000 - U+FFFF\n\t- GB\n\t\t- GB2312\n\t\t- GBK(GB13000)\n\t\t- GB18030\n\t- ISO-8859\n\t- BIG5\n- Grammar\n\t- \"abc\"\n\t\t- \"\\x10\" --> 8\n\t\t- \"\\u000a\"\n\t- 'abc'\n\t- \\`abc\\`\n\t\t\n\t\t```javascript\n\t\tvar a;\n\t\t/a/g 正则表达式直接量\n\t\t(a)\n\t\t/a/g --> 则表示除法\n\t\t(a)/a/g\n\t\t```\n\t\t\n\t\n#### Boolean\n- true\n- false\n\n\n\n\n#### Object\n\n#### Null\n- typeof 下为 Object\n\n\n#### Undefined\n\n#### Symbol\n\n## Expression\n## Statemment\n## Structure\n## Module\n","slug":"Javascript-Atom+Types","published":1,"updated":"2020-05-28T02:55:31.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1vw00051wp339e734ds","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h1 id=\"Javascript-–-Atom-Types\"><a href=\"#Javascript-–-Atom-Types\" class=\"headerlink\" title=\"Javascript – Atom - Types\"></a>Javascript – Atom - Types</h1><h2 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h2><h3 id=\"Unicode-（字符集）\"><a href=\"#Unicode-（字符集）\" class=\"headerlink\" title=\"Unicode （字符集）\"></a>Unicode （字符集）</h3><ul>\n<li><p>Unicode Blocks</p>\n<ul>\n<li>JS使用的不是ASCII字符集，但是都要兼容ASCII字符集<ul>\n<li>a 码点 –&gt; 97, A 码点 –&gt; 65</li>\n</ul>\n</li>\n<li>U+000A LINE FEED 换行<ul>\n<li>Form Feed 翻页</li>\n<li>CJK 中文字符 Chinese Japan Korean</li>\n</ul>\n</li>\n<li>U+0020 SPACE 空格</li>\n<li>BMP (Basic Multilingual Plane)基本字符平面 四位能表示的范围</li>\n<li>超出BMP范围<ul>\n<li>fromCodePoint</li>\n<li>codePointAt</li>\n</ul>\n</li>\n<li>隐性需求需要可以使用\\u转义<ul>\n<li>“厉害”.codePointAt(0).toString(16)</li>\n<li>\\u5389\\u5bb3<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>InputElement</p>\n<ul>\n<li>WhiteSpace 空格<ul>\n<li>&lt;TAB&gt; Character Tabulation</li>\n<li>&lt;VT&gt; Vertical Line</li>\n<li>&lt;FF&gt; Form Feed </li>\n<li>&lt;SP&gt; </li>\n<li>&lt;NBSP&gt; html根据空格分词，不想让词分根据空格分开，可以使用&nbsp;</li>\n<li>&lt;ZWNBSP&gt; U+FEFF Zero WIDTH NO-BREAK SPACE，BOM –&gt; Bit Order Mask</li>\n<li>&lt;USP&gt;</li>\n</ul>\n</li>\n<li>LineTerminator 换行符<ul>\n<li>&lt;LF&gt; /n</li>\n<li>&lt;CR&gt; Carriage Return 回车 /r</li>\n<li>&lt;LS&gt; LINE SEPARATOR</li>\n<li>&lt;PS&gt; PARAGRAPH SEPARATOR</li>\n</ul>\n</li>\n<li>Comment 注释</li>\n<li><strong>Token</strong> 与word不同，记号标记，JS中有效的东西<ul>\n<li>自己写的，代码包含的有效信息<ul>\n<li><strong>Identifier</strong> 标识符，以英文字母开头<ul>\n<li>用作变量名，不能与关键字重复<ul>\n<li>undefined 全局变量名，修改不了</li>\n<li>离开全局作用域，便可以使用</li>\n</ul>\n</li>\n<li>用作属性的部分，可以与关键字重复</li>\n<li>Future reserved Keywords : enum</li>\n</ul>\n</li>\n<li><strong>Literal</strong> 直接量<ul>\n<li>Number    </li>\n<li>String</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>帮助程序形成结构<ul>\n<li><strong>Punctuator</strong> 符号</li>\n<li><strong>Keywords</strong> </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h4><ul>\n<li><p>IEEE 754 Double Float</p>\n<ul>\n<li>Sign(1)</li>\n<li>Exponent(11) 指数，科学计数法</li>\n<li>Fraction(52)</li>\n</ul>\n</li>\n<li><p>Grammar</p>\n<ul>\n<li>DecimaLiteral<ul>\n<li>0</li>\n<li>0.</li>\n<li>.2</li>\n<li>1e3</li>\n</ul>\n</li>\n<li>BinaryIntegerLiteral<ul>\n<li>0b111</li>\n</ul>\n</li>\n<li>OctalIntegerLiteral<ul>\n<li>0o10</li>\n</ul>\n</li>\n<li>HexIntegerLiteral<ul>\n<li>0xFF</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li><p>浮点数比较时，需要加精度</p>\n<blockquote>\n<p>Number.MAX_SAFE_INTEGER</p>\n</blockquote>\n<blockquote>\n<p>Math.abs(0.1 + 0.2 - 0.3) &lt;= Number.EPSILON</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><ul>\n<li><p>Character</p>\n</li>\n<li><p>Code Point</p>\n</li>\n<li><p>Encoding</p>\n<blockquote>\n<p>97 .toString(2)</p>\n</blockquote>\n<blockquote>\n<p>“97.” 是一个合法的Number 01100001</p>\n</blockquote>\n<ul>\n<li>ASCII</li>\n<li>Unicode</li>\n<li>UCS U+0000 - U+FFFF</li>\n<li>GB<ul>\n<li>GB2312</li>\n<li>GBK(GB13000)</li>\n<li>GB18030</li>\n</ul>\n</li>\n<li>ISO-8859</li>\n<li>BIG5</li>\n</ul>\n</li>\n<li><p>Grammar</p>\n<ul>\n<li><p>“abc”</p>\n<ul>\n<li>“\\x10” –&gt; 8</li>\n<li>“\\u000a”</li>\n</ul>\n</li>\n<li><p>‘abc’</p>\n</li>\n<li><p>`abc`</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">/a/g 正则表达式直接量</span><br><span class=\"line\">(a)</span><br><span class=\"line\">/a/g --&gt; 则表示除法</span><br><span class=\"line\">(a)/a/g</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h4><ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><h4 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h4><ul>\n<li>typeof 下为 Object</li>\n</ul>\n<h4 id=\"Undefined\"><a href=\"#Undefined\" class=\"headerlink\" title=\"Undefined\"></a>Undefined</h4><h4 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h4><h2 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h2><h2 id=\"Statemment\"><a href=\"#Statemment\" class=\"headerlink\" title=\"Statemment\"></a>Statemment</h2><h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2>","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h1 id=\"Javascript-–-Atom-Types\"><a href=\"#Javascript-–-Atom-Types\" class=\"headerlink\" title=\"Javascript – Atom - Types\"></a>Javascript – Atom - Types</h1><h2 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h2><h3 id=\"Unicode-（字符集）\"><a href=\"#Unicode-（字符集）\" class=\"headerlink\" title=\"Unicode （字符集）\"></a>Unicode （字符集）</h3><ul>\n<li><p>Unicode Blocks</p>\n<ul>\n<li>JS使用的不是ASCII字符集，但是都要兼容ASCII字符集<ul>\n<li>a 码点 –&gt; 97, A 码点 –&gt; 65</li>\n</ul>\n</li>\n<li>U+000A LINE FEED 换行<ul>\n<li>Form Feed 翻页</li>\n<li>CJK 中文字符 Chinese Japan Korean</li>\n</ul>\n</li>\n<li>U+0020 SPACE 空格</li>\n<li>BMP (Basic Multilingual Plane)基本字符平面 四位能表示的范围</li>\n<li>超出BMP范围<ul>\n<li>fromCodePoint</li>\n<li>codePointAt</li>\n</ul>\n</li>\n<li>隐性需求需要可以使用\\u转义<ul>\n<li>“厉害”.codePointAt(0).toString(16)</li>\n<li>\\u5389\\u5bb3","more":"</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>InputElement</p>\n<ul>\n<li>WhiteSpace 空格<ul>\n<li>&lt;TAB&gt; Character Tabulation</li>\n<li>&lt;VT&gt; Vertical Line</li>\n<li>&lt;FF&gt; Form Feed </li>\n<li>&lt;SP&gt; </li>\n<li>&lt;NBSP&gt; html根据空格分词，不想让词分根据空格分开，可以使用&nbsp;</li>\n<li>&lt;ZWNBSP&gt; U+FEFF Zero WIDTH NO-BREAK SPACE，BOM –&gt; Bit Order Mask</li>\n<li>&lt;USP&gt;</li>\n</ul>\n</li>\n<li>LineTerminator 换行符<ul>\n<li>&lt;LF&gt; /n</li>\n<li>&lt;CR&gt; Carriage Return 回车 /r</li>\n<li>&lt;LS&gt; LINE SEPARATOR</li>\n<li>&lt;PS&gt; PARAGRAPH SEPARATOR</li>\n</ul>\n</li>\n<li>Comment 注释</li>\n<li><strong>Token</strong> 与word不同，记号标记，JS中有效的东西<ul>\n<li>自己写的，代码包含的有效信息<ul>\n<li><strong>Identifier</strong> 标识符，以英文字母开头<ul>\n<li>用作变量名，不能与关键字重复<ul>\n<li>undefined 全局变量名，修改不了</li>\n<li>离开全局作用域，便可以使用</li>\n</ul>\n</li>\n<li>用作属性的部分，可以与关键字重复</li>\n<li>Future reserved Keywords : enum</li>\n</ul>\n</li>\n<li><strong>Literal</strong> 直接量<ul>\n<li>Number    </li>\n<li>String</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>帮助程序形成结构<ul>\n<li><strong>Punctuator</strong> 符号</li>\n<li><strong>Keywords</strong> </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h4><ul>\n<li><p>IEEE 754 Double Float</p>\n<ul>\n<li>Sign(1)</li>\n<li>Exponent(11) 指数，科学计数法</li>\n<li>Fraction(52)</li>\n</ul>\n</li>\n<li><p>Grammar</p>\n<ul>\n<li>DecimaLiteral<ul>\n<li>0</li>\n<li>0.</li>\n<li>.2</li>\n<li>1e3</li>\n</ul>\n</li>\n<li>BinaryIntegerLiteral<ul>\n<li>0b111</li>\n</ul>\n</li>\n<li>OctalIntegerLiteral<ul>\n<li>0o10</li>\n</ul>\n</li>\n<li>HexIntegerLiteral<ul>\n<li>0xFF</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li><p>浮点数比较时，需要加精度</p>\n<blockquote>\n<p>Number.MAX_SAFE_INTEGER</p>\n</blockquote>\n<blockquote>\n<p>Math.abs(0.1 + 0.2 - 0.3) &lt;= Number.EPSILON</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><ul>\n<li><p>Character</p>\n</li>\n<li><p>Code Point</p>\n</li>\n<li><p>Encoding</p>\n<blockquote>\n<p>97 .toString(2)</p>\n</blockquote>\n<blockquote>\n<p>“97.” 是一个合法的Number 01100001</p>\n</blockquote>\n<ul>\n<li>ASCII</li>\n<li>Unicode</li>\n<li>UCS U+0000 - U+FFFF</li>\n<li>GB<ul>\n<li>GB2312</li>\n<li>GBK(GB13000)</li>\n<li>GB18030</li>\n</ul>\n</li>\n<li>ISO-8859</li>\n<li>BIG5</li>\n</ul>\n</li>\n<li><p>Grammar</p>\n<ul>\n<li><p>“abc”</p>\n<ul>\n<li>“\\x10” –&gt; 8</li>\n<li>“\\u000a”</li>\n</ul>\n</li>\n<li><p>‘abc’</p>\n</li>\n<li><p>`abc`</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">/a/g 正则表达式直接量</span><br><span class=\"line\">(a)</span><br><span class=\"line\">/a/g --&gt; 则表示除法</span><br><span class=\"line\">(a)/a/g</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h4><ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><h4 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h4><ul>\n<li>typeof 下为 Object</li>\n</ul>\n<h4 id=\"Undefined\"><a href=\"#Undefined\" class=\"headerlink\" title=\"Undefined\"></a>Undefined</h4><h4 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h4><h2 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h2><h2 id=\"Statemment\"><a href=\"#Statemment\" class=\"headerlink\" title=\"Statemment\"></a>Statemment</h2><h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2>"},{"title":"Javascript-Expressions","date":"2020-04-23T15:40:40.000Z","description":["Javascript -- Expression"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n# Javascript -- Expressions\n<!-- more -->\n\n# Atom\n\n\n# Expressions 表达式\n## Grammar\n\n\n\n\n### 引导：Grammar Tree vs Priority\n- \\+ -\n- \\* /\n- ()\n\n\n\n## Left Handside & Right Handside\n## Left Handside\n- ![Left Handside](http://p0.meituan.net/myvideodistribute/4fa36955e4edcb6c2ae15f638759b365164257.png)\n- 极限是 call\n\n### Member\n- a.b\n- a[b]\n- foo\\`string\\`\n\t\n\t```javascript\n\tvar name = \"Elle\"\n\tfunction foo() {\n\t  console.log(arguments)\n\t}\n\tfoo`Hello ${name}!`\n\t```\n- super.b\n\t- 只能在 constructor 里使用\n- super['b']\n\n\t```javascript\n\tclass Parent {\n\t\tconstructor() {\n\t\t\tthis.a = 1\n\t\t}\n\t}\n\tclass Child extends Parent {\n\t\tconstructor() {\n\t\t\tsuper()\n\t\t\tconsole.log(this.a)\n\t\t}\n\t}\n\tParent.a = 2;\n\tnew Child\n\t```\n\t\n\t- ![super 截图](http://p1.meituan.net/myvideodistribute/6dbc29d1a132b5099186f0f9ec8e6bd458489.png)\n\t\n- new.target\n\t- 函数外面不能使用，只能在函数里使用\n\n\t\t```javascript\n\t\tfunction foo() {\n\t\t\tconsole.log(this)\n\t\t}\n\t\t// 存在一个伪造对象的可能，无法知道对象是否是被 new 调起\n\t\tvar fakeObj = {}\n\t\tObject.setPrototypeOf(fakeObj, foo.prototype)\n\t\tfakeObj.constructor = foo\n\t\tfoo.apply(fakeObj)\n\t\tfakeObj instanceof foo\n\t\t\n\t\t```\n\n\t\t```javascript\n\t\tfunction foo() {\n\t\t\tconsole.log(new.target)\n\t\t}\n\t\t\n\t\tfoo()\n\t\t\n\t\tnew foo()\n\t\t\n\t\t```\n- new Foo()\n\t- high priority\n\t\n\t```javascript\n\tfunction cls1(s) {\n\t    console.log(s)\n\t}\n\tfunction cls2(s) {\n\t    console.log(\"2\", s)\n\t    return cls1\n\t}\n\t\n\tnew new cls2(\"goog\")\n\t```\n\t- ![new Foo()](http://p0.meituan.net/myvideodistribute/b94c06479581e9f07cea46eed00d5c6053648.png)\n\n- Member Expressions 返回的是一个 Reference 类型\n\t- Reference\n\n\t\t```javascript\n\t\tvar o = { x: 1 }\n\t\to.x + 2\n\t\t1 + 2\n\t\tdelete o.x\n\t\tdelete 1\n\t\t```\n\n### New\n- new Foo \n- new Foo() 优先级高\n\t\n- **Example**\n\t- new a()()\n\t- new new a()\n\n\t\t```javascript\n\t\tfunction cls1(s) {\n\t\t    console.log(s)\n\t\t}\n\t\tfunction cls2(s) {\n\t\t    console.log(\"2\", s)\n\t\t    return cls1\n\t\t}\n\t\tconsole.log('-=-=-=-new cls2-=-=-=-=')\n\t\tnew cls2\n\t\tconsole.log('-=-=-=-cls2(\"good\")-=-=-=-=')\n\t\tcls2(\"good\")\n\t\tconsole.log('-=-=-=-new cls2(\"good\")-=-=-=-=')\n\t\tnew cls2(\"good\") // 返回回来 cls2 实例，cls1对象\n\t\tconsole.log('-=-=-=-new (cls2(\"good\"))-=-=-=-=')\n\t\tnew (cls2(\"good\"))\n\t\tconsole.log('-=-=-=-new (new cls2)-=-=-=-=')\n\t\tnew (new cls2)\n\t\tconsole.log('-=-=-=-new new cls2(\"good\")-=-=-=-=')\n\t\tnew new cls2(\"good\")\n\t\t```\n\t- ![new Foo  优先级](http://p0.meituan.net/myvideodistribute/0ea9dc132069ffab80fc3260feef10d8228161.png)\n\n### Call\n- foo()\n- super()\n- foo()['b']\n- foo().b\n- foo()\\`abc\\`\n\n\n\n## Right Handside\n### Update\n- UpdateExpression\n\t- no LineTerminator here\n\t- ![no LineTerminator here](http://p0.meituan.net/myvideodistribute/c0869aae45e6bd6e9e6cc8261ed8888664190.png)\n\n\t\t```javascript\n\t\tvar a = 1, b = 1, c = 1;\n\t\ta\n\t\t++\n\t\tb\n\t\t++\n\t\tc\n\t\tconsole.log([a, b, c])\n\t\ta/*\n\t\t\n\t\t*/++\n\t\tb/*\n\t\t\n\t\t*/++\n\t\tc\n\t\tconsole.log([a, b, c])\n\t\t```\n- a ++\n- a --\n- -- a\n- ++ a\n\n### Unary 单目运算符\n- delete a.b\n- void foo() \n\t- void 不是返回值，是运算符在 JS 中\n\t- 不管后面是什么，都返回 undefined\n\t- IIFE 立即执行函数\n\t\t\n\t\t```javascript\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\tbutton.onClick = function () {\n\t\t\t\tconsole.log(i)\n\t\t\t}\n\t\t}\n\t\t// 点那个按钮，都是10，为解决这个问题，我们可以使用IIFE\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\t(function(i) {\n\t\t\t\tbutton.onClick = function (i) {\n\t\t\t\t\tconsole.log(i)\n\t\t\t\t}\n\t\t\t})()\n\t\t}\n\t\t// 如果前面不加分号，在一些写法中，会发生粘起来错误\n\t    (function(i) {\n\t      button.onClick = function (i) {\n\t        console.log(i)\n\t      }\n\t    })()\n\t    \n\t    (function(i) {\n\t      button.onClick = function (i) {\n\t        console.log(i)\n\t      }\n\t    })()\n\t\t// 最稳妥的就是，在前面加上void\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\tvoid function(i) {\n\t\t\t\tbutton.onClick = function (i) {\n\t\t\t\t\tconsole.log(i)\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\t// 并且语义正确，我们并不需要IIFE的返回值\n\t\t```\n- typeof a\n\t\n\t```javascript\n\ttypeof null\n\ttypeof function() {}\n\t```\n\t\n\t- ![typeof](http://p0.meituan.net/myvideodistribute/c45593f796e09721d1b10701e366669620756.png)\n- \\+ a\n- \\- a\n- ~ a 按位取反\n- ! a 取非\n\t- !!1\n- await a\n\n### Exponental\n- \\*\\*\n\t- 3 ** 2 ** 3\n\t- 3 ** (2 ** 3)\n\t- ![Exponental](http://p1.meituan.net/myvideodistribute/18947a64bdd8ad6c249ea3e214f5b11d17541.png)\n\n\n### Multiplicative\n- \\* / %\n\t- JS 中有1种乘法运算符\n\t\t- 运行时\n\t\t\t- number\n\t\t\t- string\n\n### Additive\n- \\+ -\n\t- JS 中有2种加法运算符\n\t\t- 运行时\n\t\t\t- number\n\t\t\t- string\n\n### Shift 左右移位\n- << >> >>>\n\n### Relationship 比较\n- < > <= >= instanceof in\n\n### Equality\n- ==\n- !=\n- ===\n- !==\n\n### Bitwise\n- & ^ |\n\n### Logical\n- 没有任何 boolean 转换\n- &&\n\t- 有短路逻辑\n\n\t\t```javascript\n\t\tfunction foo1() {\n\t\t\tconsole.log(1)\n\t\t\treturn false\n\t\t}\n\t\tfunction foo2() {\n\t\t\tconsole.log(2)\n\t\t}\n\t\tfoo1() && foo2()\n\t\t\n\t\tfoo1() || foo2()\n\t\t```\n\t\t\n\t- ![&& 短路逻辑运行截图](http://p1.meituan.net/myvideodistribute/76bacd40d3b17ddaca8fa40b7df168cc49722.png)\n- ||\n\n\n\n### Conditional\n- ? :\n\t- 同样有短路逻辑\n\t\t\n\t\t```javascript\n\t\tfalse ? foo1() : foo2()\n\t\t```\n\t- ![三目运算符短路逻辑](http://p0.meituan.net/myvideodistribute/bcb065e3ae7986b5c15333ea32404e5360600.png)\n\t\t\n### ,\n\n## Runtime\n### Type Convertion\n- ![Type Convertion](http://p1.meituan.net/myvideodistribute/92ac57b25bd03ca675ef9b0d694e4415353216.png)\n- undefined --> number NAN\n\n\n#### Boxing & Unboxing\n\n```javascript\n// Number String Boolean Symbol\nnew Number(1)\nnew String('hello')\nnew String('hello').length\n\"hello\".length\ntypeof \"hello\"\ntypeof new String('hello')\n!new String('')\n!\"\"\n// Number String Boolean 不作为 new 调用，就是转换成普通类型\nString(1)\nnew String(1)\n```\n\n- ![Boxing & Unboxing](http://p0.meituan.net/myvideodistribute/3f64818a6b39695d9dbc489cb8bc3f6281607.png)\n\n- toPremitive()\n- toString vs valueOf\n  - toString vs valueOf\n\n\t \t```javascript\n\t \t1 + {}\n\t \t1 + {valueOf(){return 2}}\n\t \t1 + {toString(){return 2}}\n\t \t1 + {toString(){return 4}}\n\t \t1 + {toString(){return \"4\"}}\n\t \t1 + {valueOf(){return 1}, toString(){return \"2\"}}\n\t \t\"1\" + {valueOf(){return 1}, toString(){return \"2\"}}\n\t \t```\n \t\n \t- ![toString vs valueOf](http://p1.meituan.net/myvideodistribute/78cc58a640f02d8de18f21eec0c80e2f71205.png)\n\n\n\n## Reference\n### Object\n### Key\n### 支持写\n- delete\n- assign\n\n\n# Statement\n\n# Structure\n\n# Program/Module\n\n#### ps. checkSign\n\n```javascript\nfunction check(number) {\n\tif (1 / number === Infinity) {\n\t\treturn 1\n\t}\n\tif (1 / number === -Infinity) {\n\t\treturn -1\n\t}\n\treturn number / Math.abs(number)\n}\n```\n- 【未完】Infinity 判断\n\n- 【未完】直接用流取出符号位\n","source":"_posts/Javascript-Expressions.md","raw":"---\ntitle: Javascript-Expressions\ndate: 2020-04-23 23:40:40\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Expression\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n# Javascript -- Expressions\n<!-- more -->\n\n# Atom\n\n\n# Expressions 表达式\n## Grammar\n\n\n\n\n### 引导：Grammar Tree vs Priority\n- \\+ -\n- \\* /\n- ()\n\n\n\n## Left Handside & Right Handside\n## Left Handside\n- ![Left Handside](http://p0.meituan.net/myvideodistribute/4fa36955e4edcb6c2ae15f638759b365164257.png)\n- 极限是 call\n\n### Member\n- a.b\n- a[b]\n- foo\\`string\\`\n\t\n\t```javascript\n\tvar name = \"Elle\"\n\tfunction foo() {\n\t  console.log(arguments)\n\t}\n\tfoo`Hello ${name}!`\n\t```\n- super.b\n\t- 只能在 constructor 里使用\n- super['b']\n\n\t```javascript\n\tclass Parent {\n\t\tconstructor() {\n\t\t\tthis.a = 1\n\t\t}\n\t}\n\tclass Child extends Parent {\n\t\tconstructor() {\n\t\t\tsuper()\n\t\t\tconsole.log(this.a)\n\t\t}\n\t}\n\tParent.a = 2;\n\tnew Child\n\t```\n\t\n\t- ![super 截图](http://p1.meituan.net/myvideodistribute/6dbc29d1a132b5099186f0f9ec8e6bd458489.png)\n\t\n- new.target\n\t- 函数外面不能使用，只能在函数里使用\n\n\t\t```javascript\n\t\tfunction foo() {\n\t\t\tconsole.log(this)\n\t\t}\n\t\t// 存在一个伪造对象的可能，无法知道对象是否是被 new 调起\n\t\tvar fakeObj = {}\n\t\tObject.setPrototypeOf(fakeObj, foo.prototype)\n\t\tfakeObj.constructor = foo\n\t\tfoo.apply(fakeObj)\n\t\tfakeObj instanceof foo\n\t\t\n\t\t```\n\n\t\t```javascript\n\t\tfunction foo() {\n\t\t\tconsole.log(new.target)\n\t\t}\n\t\t\n\t\tfoo()\n\t\t\n\t\tnew foo()\n\t\t\n\t\t```\n- new Foo()\n\t- high priority\n\t\n\t```javascript\n\tfunction cls1(s) {\n\t    console.log(s)\n\t}\n\tfunction cls2(s) {\n\t    console.log(\"2\", s)\n\t    return cls1\n\t}\n\t\n\tnew new cls2(\"goog\")\n\t```\n\t- ![new Foo()](http://p0.meituan.net/myvideodistribute/b94c06479581e9f07cea46eed00d5c6053648.png)\n\n- Member Expressions 返回的是一个 Reference 类型\n\t- Reference\n\n\t\t```javascript\n\t\tvar o = { x: 1 }\n\t\to.x + 2\n\t\t1 + 2\n\t\tdelete o.x\n\t\tdelete 1\n\t\t```\n\n### New\n- new Foo \n- new Foo() 优先级高\n\t\n- **Example**\n\t- new a()()\n\t- new new a()\n\n\t\t```javascript\n\t\tfunction cls1(s) {\n\t\t    console.log(s)\n\t\t}\n\t\tfunction cls2(s) {\n\t\t    console.log(\"2\", s)\n\t\t    return cls1\n\t\t}\n\t\tconsole.log('-=-=-=-new cls2-=-=-=-=')\n\t\tnew cls2\n\t\tconsole.log('-=-=-=-cls2(\"good\")-=-=-=-=')\n\t\tcls2(\"good\")\n\t\tconsole.log('-=-=-=-new cls2(\"good\")-=-=-=-=')\n\t\tnew cls2(\"good\") // 返回回来 cls2 实例，cls1对象\n\t\tconsole.log('-=-=-=-new (cls2(\"good\"))-=-=-=-=')\n\t\tnew (cls2(\"good\"))\n\t\tconsole.log('-=-=-=-new (new cls2)-=-=-=-=')\n\t\tnew (new cls2)\n\t\tconsole.log('-=-=-=-new new cls2(\"good\")-=-=-=-=')\n\t\tnew new cls2(\"good\")\n\t\t```\n\t- ![new Foo  优先级](http://p0.meituan.net/myvideodistribute/0ea9dc132069ffab80fc3260feef10d8228161.png)\n\n### Call\n- foo()\n- super()\n- foo()['b']\n- foo().b\n- foo()\\`abc\\`\n\n\n\n## Right Handside\n### Update\n- UpdateExpression\n\t- no LineTerminator here\n\t- ![no LineTerminator here](http://p0.meituan.net/myvideodistribute/c0869aae45e6bd6e9e6cc8261ed8888664190.png)\n\n\t\t```javascript\n\t\tvar a = 1, b = 1, c = 1;\n\t\ta\n\t\t++\n\t\tb\n\t\t++\n\t\tc\n\t\tconsole.log([a, b, c])\n\t\ta/*\n\t\t\n\t\t*/++\n\t\tb/*\n\t\t\n\t\t*/++\n\t\tc\n\t\tconsole.log([a, b, c])\n\t\t```\n- a ++\n- a --\n- -- a\n- ++ a\n\n### Unary 单目运算符\n- delete a.b\n- void foo() \n\t- void 不是返回值，是运算符在 JS 中\n\t- 不管后面是什么，都返回 undefined\n\t- IIFE 立即执行函数\n\t\t\n\t\t```javascript\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\tbutton.onClick = function () {\n\t\t\t\tconsole.log(i)\n\t\t\t}\n\t\t}\n\t\t// 点那个按钮，都是10，为解决这个问题，我们可以使用IIFE\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\t(function(i) {\n\t\t\t\tbutton.onClick = function (i) {\n\t\t\t\t\tconsole.log(i)\n\t\t\t\t}\n\t\t\t})()\n\t\t}\n\t\t// 如果前面不加分号，在一些写法中，会发生粘起来错误\n\t    (function(i) {\n\t      button.onClick = function (i) {\n\t        console.log(i)\n\t      }\n\t    })()\n\t    \n\t    (function(i) {\n\t      button.onClick = function (i) {\n\t        console.log(i)\n\t      }\n\t    })()\n\t\t// 最稳妥的就是，在前面加上void\n\t\tfor (var i = 0; i < 10; i ++) {\n\t\t\tvar button  = document.createElement('button');\n\t\t\tdocuments.body.append(button);\n\t\t\tbutton.innerHTML = 1;\n\t\t\tvoid function(i) {\n\t\t\t\tbutton.onClick = function (i) {\n\t\t\t\t\tconsole.log(i)\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\t// 并且语义正确，我们并不需要IIFE的返回值\n\t\t```\n- typeof a\n\t\n\t```javascript\n\ttypeof null\n\ttypeof function() {}\n\t```\n\t\n\t- ![typeof](http://p0.meituan.net/myvideodistribute/c45593f796e09721d1b10701e366669620756.png)\n- \\+ a\n- \\- a\n- ~ a 按位取反\n- ! a 取非\n\t- !!1\n- await a\n\n### Exponental\n- \\*\\*\n\t- 3 ** 2 ** 3\n\t- 3 ** (2 ** 3)\n\t- ![Exponental](http://p1.meituan.net/myvideodistribute/18947a64bdd8ad6c249ea3e214f5b11d17541.png)\n\n\n### Multiplicative\n- \\* / %\n\t- JS 中有1种乘法运算符\n\t\t- 运行时\n\t\t\t- number\n\t\t\t- string\n\n### Additive\n- \\+ -\n\t- JS 中有2种加法运算符\n\t\t- 运行时\n\t\t\t- number\n\t\t\t- string\n\n### Shift 左右移位\n- << >> >>>\n\n### Relationship 比较\n- < > <= >= instanceof in\n\n### Equality\n- ==\n- !=\n- ===\n- !==\n\n### Bitwise\n- & ^ |\n\n### Logical\n- 没有任何 boolean 转换\n- &&\n\t- 有短路逻辑\n\n\t\t```javascript\n\t\tfunction foo1() {\n\t\t\tconsole.log(1)\n\t\t\treturn false\n\t\t}\n\t\tfunction foo2() {\n\t\t\tconsole.log(2)\n\t\t}\n\t\tfoo1() && foo2()\n\t\t\n\t\tfoo1() || foo2()\n\t\t```\n\t\t\n\t- ![&& 短路逻辑运行截图](http://p1.meituan.net/myvideodistribute/76bacd40d3b17ddaca8fa40b7df168cc49722.png)\n- ||\n\n\n\n### Conditional\n- ? :\n\t- 同样有短路逻辑\n\t\t\n\t\t```javascript\n\t\tfalse ? foo1() : foo2()\n\t\t```\n\t- ![三目运算符短路逻辑](http://p0.meituan.net/myvideodistribute/bcb065e3ae7986b5c15333ea32404e5360600.png)\n\t\t\n### ,\n\n## Runtime\n### Type Convertion\n- ![Type Convertion](http://p1.meituan.net/myvideodistribute/92ac57b25bd03ca675ef9b0d694e4415353216.png)\n- undefined --> number NAN\n\n\n#### Boxing & Unboxing\n\n```javascript\n// Number String Boolean Symbol\nnew Number(1)\nnew String('hello')\nnew String('hello').length\n\"hello\".length\ntypeof \"hello\"\ntypeof new String('hello')\n!new String('')\n!\"\"\n// Number String Boolean 不作为 new 调用，就是转换成普通类型\nString(1)\nnew String(1)\n```\n\n- ![Boxing & Unboxing](http://p0.meituan.net/myvideodistribute/3f64818a6b39695d9dbc489cb8bc3f6281607.png)\n\n- toPremitive()\n- toString vs valueOf\n  - toString vs valueOf\n\n\t \t```javascript\n\t \t1 + {}\n\t \t1 + {valueOf(){return 2}}\n\t \t1 + {toString(){return 2}}\n\t \t1 + {toString(){return 4}}\n\t \t1 + {toString(){return \"4\"}}\n\t \t1 + {valueOf(){return 1}, toString(){return \"2\"}}\n\t \t\"1\" + {valueOf(){return 1}, toString(){return \"2\"}}\n\t \t```\n \t\n \t- ![toString vs valueOf](http://p1.meituan.net/myvideodistribute/78cc58a640f02d8de18f21eec0c80e2f71205.png)\n\n\n\n## Reference\n### Object\n### Key\n### 支持写\n- delete\n- assign\n\n\n# Statement\n\n# Structure\n\n# Program/Module\n\n#### ps. checkSign\n\n```javascript\nfunction check(number) {\n\tif (1 / number === Infinity) {\n\t\treturn 1\n\t}\n\tif (1 / number === -Infinity) {\n\t\treturn -1\n\t}\n\treturn number / Math.abs(number)\n}\n```\n- 【未完】Infinity 判断\n\n- 【未完】直接用流取出符号位\n","slug":"Javascript-Expressions","published":1,"updated":"2020-05-28T03:19:04.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1vx00061wp36jn5d10w","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h1 id=\"Javascript-–-Expressions\"><a href=\"#Javascript-–-Expressions\" class=\"headerlink\" title=\"Javascript – Expressions\"></a>Javascript – Expressions</h1><a id=\"more\"></a>\n\n<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><h1 id=\"Expressions-表达式\"><a href=\"#Expressions-表达式\" class=\"headerlink\" title=\"Expressions 表达式\"></a>Expressions 表达式</h1><h2 id=\"Grammar\"><a href=\"#Grammar\" class=\"headerlink\" title=\"Grammar\"></a>Grammar</h2><h3 id=\"引导：Grammar-Tree-vs-Priority\"><a href=\"#引导：Grammar-Tree-vs-Priority\" class=\"headerlink\" title=\"引导：Grammar Tree vs Priority\"></a>引导：Grammar Tree vs Priority</h3><ul>\n<li>+ -</li>\n<li>* /</li>\n<li>()</li>\n</ul>\n<h2 id=\"Left-Handside-amp-Right-Handside\"><a href=\"#Left-Handside-amp-Right-Handside\" class=\"headerlink\" title=\"Left Handside &amp; Right Handside\"></a>Left Handside &amp; Right Handside</h2><h2 id=\"Left-Handside\"><a href=\"#Left-Handside\" class=\"headerlink\" title=\"Left Handside\"></a>Left Handside</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4fa36955e4edcb6c2ae15f638759b365164257.png\" alt=\"Left Handside\"></li>\n<li>极限是 call</li>\n</ul>\n<h3 id=\"Member\"><a href=\"#Member\" class=\"headerlink\" title=\"Member\"></a>Member</h3><ul>\n<li><p>a.b</p>\n</li>\n<li><p>a[b]</p>\n</li>\n<li><p>foo`string`</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Elle\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span></span><br></pre></td></tr></table></figure></li>\n<li><p>super.b</p>\n<ul>\n<li>只能在 constructor 里使用</li>\n</ul>\n</li>\n<li><p>super[‘b’]</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Child</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/6dbc29d1a132b5099186f0f9ec8e6bd458489.png\" alt=\"super 截图\"></li>\n</ul>\n</li>\n<li><p>new.target</p>\n<ul>\n<li><p>函数外面不能使用，只能在函数里使用</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 存在一个伪造对象的可能，无法知道对象是否是被 new 调起</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fakeObj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(fakeObj, foo.prototype)</span><br><span class=\"line\">fakeObj.constructor = foo</span><br><span class=\"line\">foo.apply(fakeObj)</span><br><span class=\"line\">fakeObj <span class=\"keyword\">instanceof</span> foo</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> foo()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>new Foo()</p>\n<ul>\n<li><p>high priority</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls1</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls2</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>, s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> cls2(<span class=\"string\">\"goog\"</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/b94c06479581e9f07cea46eed00d5c6053648.png\" alt=\"new Foo()\"></p>\n</li>\n</ul>\n</li>\n<li><p>Member Expressions 返回的是一个 Reference 类型</p>\n<ul>\n<li><p>Reference</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">o.x + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.x</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li><p>new Foo </p>\n</li>\n<li><p>new Foo() 优先级高</p>\n</li>\n<li><p><strong>Example</strong></p>\n<ul>\n<li><p>new a()()</p>\n</li>\n<li><p>new new a()</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls1</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls2</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>, s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new cls2-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> cls2</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\">cls2(<span class=\"string\">\"good\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> cls2(<span class=\"string\">\"good\"</span>) <span class=\"comment\">// 返回回来 cls2 实例，cls1对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new (cls2(\"good\"))-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> (cls2(<span class=\"string\">\"good\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new (new cls2)-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> (<span class=\"keyword\">new</span> cls2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new new cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> cls2(<span class=\"string\">\"good\"</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/0ea9dc132069ffab80fc3260feef10d8228161.png\" alt=\"new Foo  优先级\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Call\"><a href=\"#Call\" class=\"headerlink\" title=\"Call\"></a>Call</h3><ul>\n<li>foo()</li>\n<li>super()</li>\n<li>foo()[‘b’]</li>\n<li>foo().b</li>\n<li>foo()`abc`</li>\n</ul>\n<h2 id=\"Right-Handside\"><a href=\"#Right-Handside\" class=\"headerlink\" title=\"Right Handside\"></a>Right Handside</h2><h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><ul>\n<li><p>UpdateExpression</p>\n<ul>\n<li><p>no LineTerminator here</p>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/c0869aae45e6bd6e9e6cc8261ed8888664190.png\" alt=\"no LineTerminator here\"></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">a</span><br><span class=\"line\">++</span><br><span class=\"line\">b</span><br><span class=\"line\">++</span><br><span class=\"line\">c</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a, b, c])</span><br><span class=\"line\">a<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span>++</span><br><span class=\"line\">b<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span>++</span><br><span class=\"line\">c</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a, b, c])</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>a ++</p>\n</li>\n<li><p>a –</p>\n</li>\n<li><p>– a</p>\n</li>\n<li><p>++ a</p>\n</li>\n</ul>\n<h3 id=\"Unary-单目运算符\"><a href=\"#Unary-单目运算符\" class=\"headerlink\" title=\"Unary 单目运算符\"></a>Unary 单目运算符</h3><ul>\n<li><p>delete a.b</p>\n</li>\n<li><p>void foo() </p>\n<ul>\n<li><p>void 不是返回值，是运算符在 JS 中</p>\n</li>\n<li><p>不管后面是什么，都返回 undefined</p>\n</li>\n<li><p>IIFE 立即执行函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 点那个按钮，都是10，为解决这个问题，我们可以使用IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果前面不加分号，在一些写法中，会发生粘起来错误</span></span><br><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">     button.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)()</span><br><span class=\"line\">   </span><br><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">     button.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)()</span><br><span class=\"line\"><span class=\"comment\">// 最稳妥的就是，在前面加上void</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 并且语义正确，我们并不需要IIFE的返回值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>typeof a</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c45593f796e09721d1b10701e366669620756.png\" alt=\"typeof\"></li>\n</ul>\n</li>\n<li><p>+ a</p>\n</li>\n<li><p>- a</p>\n</li>\n<li><p>~ a 按位取反</p>\n</li>\n<li><p>! a 取非</p>\n<ul>\n<li>!!1</li>\n</ul>\n</li>\n<li><p>await a</p>\n</li>\n</ul>\n<h3 id=\"Exponental\"><a href=\"#Exponental\" class=\"headerlink\" title=\"Exponental\"></a>Exponental</h3><ul>\n<li>**<ul>\n<li>3 ** 2 ** 3</li>\n<li>3 ** (2 ** 3)</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/18947a64bdd8ad6c249ea3e214f5b11d17541.png\" alt=\"Exponental\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Multiplicative\"><a href=\"#Multiplicative\" class=\"headerlink\" title=\"Multiplicative\"></a>Multiplicative</h3><ul>\n<li>* / %<ul>\n<li>JS 中有1种乘法运算符<ul>\n<li>运行时<ul>\n<li>number</li>\n<li>string</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Additive\"><a href=\"#Additive\" class=\"headerlink\" title=\"Additive\"></a>Additive</h3><ul>\n<li>+ -<ul>\n<li>JS 中有2种加法运算符<ul>\n<li>运行时<ul>\n<li>number</li>\n<li>string</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Shift-左右移位\"><a href=\"#Shift-左右移位\" class=\"headerlink\" title=\"Shift 左右移位\"></a>Shift 左右移位</h3><ul>\n<li>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</li>\n</ul>\n<h3 id=\"Relationship-比较\"><a href=\"#Relationship-比较\" class=\"headerlink\" title=\"Relationship 比较\"></a>Relationship 比较</h3><ul>\n<li>&lt; &gt; &lt;= &gt;= instanceof in</li>\n</ul>\n<h3 id=\"Equality\"><a href=\"#Equality\" class=\"headerlink\" title=\"Equality\"></a>Equality</h3><ul>\n<li>==</li>\n<li>!=</li>\n<li>===</li>\n<li>!==</li>\n</ul>\n<h3 id=\"Bitwise\"><a href=\"#Bitwise\" class=\"headerlink\" title=\"Bitwise\"></a>Bitwise</h3><ul>\n<li>&amp; ^ |</li>\n</ul>\n<h3 id=\"Logical\"><a href=\"#Logical\" class=\"headerlink\" title=\"Logical\"></a>Logical</h3><ul>\n<li><p>没有任何 boolean 转换</p>\n</li>\n<li><p>&amp;&amp;</p>\n<ul>\n<li><p>有短路逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo1() &amp;&amp; foo2()</span><br><span class=\"line\"></span><br><span class=\"line\">foo1() || foo2()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/76bacd40d3b17ddaca8fa40b7df168cc49722.png\" alt=\"&amp;&amp; 短路逻辑运行截图\"></p>\n</li>\n</ul>\n</li>\n<li><p>||</p>\n</li>\n</ul>\n<h3 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"Conditional\"></a>Conditional</h3><ul>\n<li><p>? :</p>\n<ul>\n<li><p>同样有短路逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> ? foo1() : foo2()</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bcb065e3ae7986b5c15333ea32404e5360600.png\" alt=\"三目运算符短路逻辑\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\",\"></a>,</h3><h2 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h2><h3 id=\"Type-Convertion\"><a href=\"#Type-Convertion\" class=\"headerlink\" title=\"Type Convertion\"></a>Type Convertion</h3><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/92ac57b25bd03ca675ef9b0d694e4415353216.png\" alt=\"Type Convertion\"></li>\n<li>undefined –&gt; number NAN</li>\n</ul>\n<h4 id=\"Boxing-amp-Unboxing\"><a href=\"#Boxing-amp-Unboxing\" class=\"headerlink\" title=\"Boxing &amp; Unboxing\"></a>Boxing &amp; Unboxing</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number String Boolean Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>).length</span><br><span class=\"line\"><span class=\"string\">\"hello\"</span>.length</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">!<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">''</span>)</span><br><span class=\"line\">!<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\">// Number String Boolean 不作为 new 调用，就是转换成普通类型</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/3f64818a6b39695d9dbc489cb8bc3f6281607.png\" alt=\"Boxing &amp; Unboxing\"></p>\n</li>\n<li><p>toPremitive()</p>\n</li>\n<li><p>toString vs valueOf</p>\n<ul>\n<li><p>toString vs valueOf</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"number\">4</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"4\"</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;, toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"string\">\"1\"</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;, toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/78cc58a640f02d8de18f21eec0c80e2f71205.png\" alt=\"toString vs valueOf\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h3 id=\"Key\"><a href=\"#Key\" class=\"headerlink\" title=\"Key\"></a>Key</h3><h3 id=\"支持写\"><a href=\"#支持写\" class=\"headerlink\" title=\"支持写\"></a>支持写</h3><ul>\n<li>delete</li>\n<li>assign</li>\n</ul>\n<h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><h1 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h1><h1 id=\"Program-Module\"><a href=\"#Program-Module\" class=\"headerlink\" title=\"Program/Module\"></a>Program/Module</h1><h4 id=\"ps-checkSign\"><a href=\"#ps-checkSign\" class=\"headerlink\" title=\"ps. checkSign\"></a>ps. checkSign</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> / number === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> / number === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> number / <span class=\"built_in\">Math</span>.abs(number)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>【未完】Infinity 判断</p>\n</li>\n<li><p>【未完】直接用流取出符号位</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h1 id=\"Javascript-–-Expressions\"><a href=\"#Javascript-–-Expressions\" class=\"headerlink\" title=\"Javascript – Expressions\"></a>Javascript – Expressions</h1>","more":"<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><h1 id=\"Expressions-表达式\"><a href=\"#Expressions-表达式\" class=\"headerlink\" title=\"Expressions 表达式\"></a>Expressions 表达式</h1><h2 id=\"Grammar\"><a href=\"#Grammar\" class=\"headerlink\" title=\"Grammar\"></a>Grammar</h2><h3 id=\"引导：Grammar-Tree-vs-Priority\"><a href=\"#引导：Grammar-Tree-vs-Priority\" class=\"headerlink\" title=\"引导：Grammar Tree vs Priority\"></a>引导：Grammar Tree vs Priority</h3><ul>\n<li>+ -</li>\n<li>* /</li>\n<li>()</li>\n</ul>\n<h2 id=\"Left-Handside-amp-Right-Handside\"><a href=\"#Left-Handside-amp-Right-Handside\" class=\"headerlink\" title=\"Left Handside &amp; Right Handside\"></a>Left Handside &amp; Right Handside</h2><h2 id=\"Left-Handside\"><a href=\"#Left-Handside\" class=\"headerlink\" title=\"Left Handside\"></a>Left Handside</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4fa36955e4edcb6c2ae15f638759b365164257.png\" alt=\"Left Handside\"></li>\n<li>极限是 call</li>\n</ul>\n<h3 id=\"Member\"><a href=\"#Member\" class=\"headerlink\" title=\"Member\"></a>Member</h3><ul>\n<li><p>a.b</p>\n</li>\n<li><p>a[b]</p>\n</li>\n<li><p>foo`string`</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Elle\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span></span><br></pre></td></tr></table></figure></li>\n<li><p>super.b</p>\n<ul>\n<li>只能在 constructor 里使用</li>\n</ul>\n</li>\n<li><p>super[‘b’]</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Child</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/6dbc29d1a132b5099186f0f9ec8e6bd458489.png\" alt=\"super 截图\"></li>\n</ul>\n</li>\n<li><p>new.target</p>\n<ul>\n<li><p>函数外面不能使用，只能在函数里使用</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 存在一个伪造对象的可能，无法知道对象是否是被 new 调起</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fakeObj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(fakeObj, foo.prototype)</span><br><span class=\"line\">fakeObj.constructor = foo</span><br><span class=\"line\">foo.apply(fakeObj)</span><br><span class=\"line\">fakeObj <span class=\"keyword\">instanceof</span> foo</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> foo()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>new Foo()</p>\n<ul>\n<li><p>high priority</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls1</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls2</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>, s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> cls2(<span class=\"string\">\"goog\"</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/b94c06479581e9f07cea46eed00d5c6053648.png\" alt=\"new Foo()\"></p>\n</li>\n</ul>\n</li>\n<li><p>Member Expressions 返回的是一个 Reference 类型</p>\n<ul>\n<li><p>Reference</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">o.x + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> o.x</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li><p>new Foo </p>\n</li>\n<li><p>new Foo() 优先级高</p>\n</li>\n<li><p><strong>Example</strong></p>\n<ul>\n<li><p>new a()()</p>\n</li>\n<li><p>new new a()</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls1</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cls2</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>, s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new cls2-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> cls2</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\">cls2(<span class=\"string\">\"good\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> cls2(<span class=\"string\">\"good\"</span>) <span class=\"comment\">// 返回回来 cls2 实例，cls1对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new (cls2(\"good\"))-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> (cls2(<span class=\"string\">\"good\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new (new cls2)-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> (<span class=\"keyword\">new</span> cls2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-=-=-=-new new cls2(\"good\")-=-=-=-='</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> cls2(<span class=\"string\">\"good\"</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/0ea9dc132069ffab80fc3260feef10d8228161.png\" alt=\"new Foo  优先级\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Call\"><a href=\"#Call\" class=\"headerlink\" title=\"Call\"></a>Call</h3><ul>\n<li>foo()</li>\n<li>super()</li>\n<li>foo()[‘b’]</li>\n<li>foo().b</li>\n<li>foo()`abc`</li>\n</ul>\n<h2 id=\"Right-Handside\"><a href=\"#Right-Handside\" class=\"headerlink\" title=\"Right Handside\"></a>Right Handside</h2><h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><ul>\n<li><p>UpdateExpression</p>\n<ul>\n<li><p>no LineTerminator here</p>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/c0869aae45e6bd6e9e6cc8261ed8888664190.png\" alt=\"no LineTerminator here\"></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">a</span><br><span class=\"line\">++</span><br><span class=\"line\">b</span><br><span class=\"line\">++</span><br><span class=\"line\">c</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a, b, c])</span><br><span class=\"line\">a<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span>++</span><br><span class=\"line\">b<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span>++</span><br><span class=\"line\">c</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a, b, c])</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>a ++</p>\n</li>\n<li><p>a –</p>\n</li>\n<li><p>– a</p>\n</li>\n<li><p>++ a</p>\n</li>\n</ul>\n<h3 id=\"Unary-单目运算符\"><a href=\"#Unary-单目运算符\" class=\"headerlink\" title=\"Unary 单目运算符\"></a>Unary 单目运算符</h3><ul>\n<li><p>delete a.b</p>\n</li>\n<li><p>void foo() </p>\n<ul>\n<li><p>void 不是返回值，是运算符在 JS 中</p>\n</li>\n<li><p>不管后面是什么，都返回 undefined</p>\n</li>\n<li><p>IIFE 立即执行函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 点那个按钮，都是10，为解决这个问题，我们可以使用IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果前面不加分号，在一些写法中，会发生粘起来错误</span></span><br><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">     button.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)()</span><br><span class=\"line\">   </span><br><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">     button.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)()</span><br><span class=\"line\"><span class=\"comment\">// 最稳妥的就是，在前面加上void</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> button  = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">\tdocuments.body.append(button);</span><br><span class=\"line\">\tbutton.innerHTML = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\tbutton.onClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 并且语义正确，我们并不需要IIFE的返回值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>typeof a</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c45593f796e09721d1b10701e366669620756.png\" alt=\"typeof\"></li>\n</ul>\n</li>\n<li><p>+ a</p>\n</li>\n<li><p>- a</p>\n</li>\n<li><p>~ a 按位取反</p>\n</li>\n<li><p>! a 取非</p>\n<ul>\n<li>!!1</li>\n</ul>\n</li>\n<li><p>await a</p>\n</li>\n</ul>\n<h3 id=\"Exponental\"><a href=\"#Exponental\" class=\"headerlink\" title=\"Exponental\"></a>Exponental</h3><ul>\n<li>**<ul>\n<li>3 ** 2 ** 3</li>\n<li>3 ** (2 ** 3)</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/18947a64bdd8ad6c249ea3e214f5b11d17541.png\" alt=\"Exponental\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Multiplicative\"><a href=\"#Multiplicative\" class=\"headerlink\" title=\"Multiplicative\"></a>Multiplicative</h3><ul>\n<li>* / %<ul>\n<li>JS 中有1种乘法运算符<ul>\n<li>运行时<ul>\n<li>number</li>\n<li>string</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Additive\"><a href=\"#Additive\" class=\"headerlink\" title=\"Additive\"></a>Additive</h3><ul>\n<li>+ -<ul>\n<li>JS 中有2种加法运算符<ul>\n<li>运行时<ul>\n<li>number</li>\n<li>string</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Shift-左右移位\"><a href=\"#Shift-左右移位\" class=\"headerlink\" title=\"Shift 左右移位\"></a>Shift 左右移位</h3><ul>\n<li>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</li>\n</ul>\n<h3 id=\"Relationship-比较\"><a href=\"#Relationship-比较\" class=\"headerlink\" title=\"Relationship 比较\"></a>Relationship 比较</h3><ul>\n<li>&lt; &gt; &lt;= &gt;= instanceof in</li>\n</ul>\n<h3 id=\"Equality\"><a href=\"#Equality\" class=\"headerlink\" title=\"Equality\"></a>Equality</h3><ul>\n<li>==</li>\n<li>!=</li>\n<li>===</li>\n<li>!==</li>\n</ul>\n<h3 id=\"Bitwise\"><a href=\"#Bitwise\" class=\"headerlink\" title=\"Bitwise\"></a>Bitwise</h3><ul>\n<li>&amp; ^ |</li>\n</ul>\n<h3 id=\"Logical\"><a href=\"#Logical\" class=\"headerlink\" title=\"Logical\"></a>Logical</h3><ul>\n<li><p>没有任何 boolean 转换</p>\n</li>\n<li><p>&amp;&amp;</p>\n<ul>\n<li><p>有短路逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo1() &amp;&amp; foo2()</span><br><span class=\"line\"></span><br><span class=\"line\">foo1() || foo2()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/76bacd40d3b17ddaca8fa40b7df168cc49722.png\" alt=\"&amp;&amp; 短路逻辑运行截图\"></p>\n</li>\n</ul>\n</li>\n<li><p>||</p>\n</li>\n</ul>\n<h3 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"Conditional\"></a>Conditional</h3><ul>\n<li><p>? :</p>\n<ul>\n<li><p>同样有短路逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> ? foo1() : foo2()</span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bcb065e3ae7986b5c15333ea32404e5360600.png\" alt=\"三目运算符短路逻辑\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\",\"></a>,</h3><h2 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h2><h3 id=\"Type-Convertion\"><a href=\"#Type-Convertion\" class=\"headerlink\" title=\"Type Convertion\"></a>Type Convertion</h3><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/92ac57b25bd03ca675ef9b0d694e4415353216.png\" alt=\"Type Convertion\"></li>\n<li>undefined –&gt; number NAN</li>\n</ul>\n<h4 id=\"Boxing-amp-Unboxing\"><a href=\"#Boxing-amp-Unboxing\" class=\"headerlink\" title=\"Boxing &amp; Unboxing\"></a>Boxing &amp; Unboxing</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number String Boolean Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>).length</span><br><span class=\"line\"><span class=\"string\">\"hello\"</span>.length</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">!<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">''</span>)</span><br><span class=\"line\">!<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\">// Number String Boolean 不作为 new 调用，就是转换成普通类型</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/3f64818a6b39695d9dbc489cb8bc3f6281607.png\" alt=\"Boxing &amp; Unboxing\"></p>\n</li>\n<li><p>toPremitive()</p>\n</li>\n<li><p>toString vs valueOf</p>\n<ul>\n<li><p>toString vs valueOf</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + &#123;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"number\">4</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"4\"</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;, toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"string\">\"1\"</span> + &#123;valueOf()&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;, toString()&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/78cc58a640f02d8de18f21eec0c80e2f71205.png\" alt=\"toString vs valueOf\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h3 id=\"Key\"><a href=\"#Key\" class=\"headerlink\" title=\"Key\"></a>Key</h3><h3 id=\"支持写\"><a href=\"#支持写\" class=\"headerlink\" title=\"支持写\"></a>支持写</h3><ul>\n<li>delete</li>\n<li>assign</li>\n</ul>\n<h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><h1 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h1><h1 id=\"Program-Module\"><a href=\"#Program-Module\" class=\"headerlink\" title=\"Program/Module\"></a>Program/Module</h1><h4 id=\"ps-checkSign\"><a href=\"#ps-checkSign\" class=\"headerlink\" title=\"ps. checkSign\"></a>ps. checkSign</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> / number === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> / number === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> number / <span class=\"built_in\">Math</span>.abs(number)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>【未完】Infinity 判断</p>\n</li>\n<li><p>【未完】直接用流取出符号位</p>\n</li>\n</ul>"},{"title":"Javascript-Statement","date":"2020-04-26T09:01:45.000Z","description":["Javascript -- Statement"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n# Atom\n\n# Expression\n\n# Statement\n\n## Grammar\n\n### 简单语句\n\n- ExpressionStatement\n\t- a = 1 + 2;\n- EmptyStatement\n\t- ;\n- DebuggerStatement\n\t- debugger\n- ThrowStatement\n\t- throw a;\n- ContinueStatement\n\t- continue ;\n\t- continue label;\n- BreakStatement\n\t- break ;\n\t- break label;\n- ReturnStatement\n\t- return ;\n\t- return expression;\n\n<!-- more -->\n\n### 组合语句\n\n- BlockStatement\n\t- 把多条语句从语法上括起来，让它像一条语句一样\n\t\n\t\t```javascript\n\t\t{\n\t\t  Statement...\n\t\t  Statement...\n\t\t  Statement...\n\t\t}\n\n  {\n    a: 1 // a 被理解为 label\n  }\n\t\t```\n\t- BlockStatement 中有非 normal ，就会中断\n\t\t\n\t\t```javascript\n\t\t{\n\t\t  const a = 1;\n\t\t  throw 1;\n\t\t  let b = 2;\n\t\t  b = foo();\n\t\t}\n\t\t```\n\t- 为 const / let 提供作用域\n\t- Completion Record\n\t\t- \\[\\[type]]: normal\n\t\t- \\[\\[value]]: --\n\t\t- \\[\\[target]]: --\n\n- IfStatement\n- SwitchStatement\n- IterationStatement\n    - <s>for await(... of ...)</s>\n\t- while(Expression...) Statement...\n\t- do Statement... while(Expression...);\n\t- for(Definition...; Expression...; Expression...) Statement...\n\t\t- Definition\n\t\t\t- var\n\t\t\t- const / let\n\t\t- for 会独立产生一个作用域，在 blockStatement 之外\n\t\t\n\t\t\t```javascript\n\t\t\t{\n\t\t\t  let i = 0;\n\t\t\t  {\n\t\t\t    let i = 1;\n\t\t\t    console.log(i)\n\t\t\t  }\n\t\t\t  console.log(i)\n\t\t\t}\n\t\t\t```\n\t- for(Definition... in Expression...) Statement....\n\t\n\t\t```javascript\n\t\tfor(let i in {a: 1, b: 2}) {\n\t\t  console.log(i)\n\t\t}\n\t\t```\n\t- for(Definition...of Expression...) Statement...\n\t\n\t\t```javascript\n\t\tfor(let i of [1, 2, 3]) {\n\t\t  console.log(i)\n\t\t}\n\t\t```\n\t\t```javascript\n\t\tfunction *g() {\n\t\t  yield 0;\n\t\t  yield 1;\n\t\t  yield 4;\n\t\t}\n\t\tfor(let p  of g()){\n\t\t  console.log(p)\n\t\t}\n\t\t```\n\t\t\n\t\t> for of --> Iterator --> Generator/Array\n\t\t\n\t\t\n\n- WithStatement\n- LabelledStatement\n- TryStatement\n\n\t```javascript\n\ttry {\n\t  Statement...\n\t} catch(definition...) {\n\t  Statement...\n\t} finally {\n\t  Statement...\n\t}\n\t```\n\t```javascript\n\ttry {\n\t  throw 2;\n\t} catch(e) {\n\t  let e;\n\t  console.log(e);\n\t}\n\t```\n\t```javascript\n\tvar e = 3;\n\ttry {\n\t  throw 2;\n\t} catch(e) {\n\t  console.log(e);\n\t}\n\t```\n\t- catch 中的声明，只在 {} 这一个作用域中，与 for 不一样。\n\t- 运行时产生错误的时候，都有可能产生 throw\n\t\t\n\t\t```javascript\n\t\t1 = a;\n\t\tnull.a;\n\t\t```\n\t- Completion Record\n\t\t- \\[\\[type]]: return\n\t\t- \\[\\[value]]: --\n\t\t- \\[\\[target]]: label\n\n### 标签、循环、break、continue\n- LabelledStatement\n- IterationStatement\n- ContinueStatement\n- BreakStatement\n- SwitchStatement\n- Completion Record\n\t- [[type]]: break continue\n\t- \\[\\[value]]: --\n\t- \\[\\[target]]: label\n\n### 声明机制\n- FunctionDeclaration\n- GeneratorDeclaration\n- AsyncFunctionDeclaration\n\t\n\t```javascript\n\tfunction sleep(d) {\n\t  return new Promise(resolve => setTimeout(resolve, d))\n\t}\n\tvoid async function() {\n\t  var i = 0;\n\t  while(true) {\n\t    console.log(i ++);\n\t    await sleep(1000);\n\t  }\n\t}()\n\t```\n- AsyncGeneratorDeclaration\n\t\n\t```javascript\n\tfunction sleep(d) {\n\t  return new Promise(resolve => setTimeout(resolve, d))\n\t}\n\tasync function* foo() {\n\t  var i = 0;\n\t  while(true) {\n\t    yield i ++;\n\t    await sleep(1000);\n\t  }\n\t}\n\tvoid async function() {\n\t  var g = foo();\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t}()\n\t// 想无限循环输出\n\t\n\tvoid async function() {\n\t  var g = foo();\n\t  for await(let e of g) {\n\t    console.log(e)\n\t  }\n\t}()\n\t```\n- VariableStatement\n- ClassDeclaration\n- LexicalDeclaration\n- 声明\n\t- function\n\t- function *\n\t- async function\n\t- async function*\n\t- var\n\t\t- 有 var 不建议写在任何语句子结构里，建议写在 function 的范围内\n\n\t\t```javascript\n\t\tvar x = 0;\n\t\tfunction foo() {\n\t\t  var o = {x: 1};\n\t\t  x = 2;\n\t\t  with(o) {\n\t\t    var x = 3;\n\t\t  }\n\t\t  console.log(x); // --> 2\n\t\t  console.log(o.x); // --> 3\n\t\t}\n\t\tfoo()\n\t\tconsole.log(x); // --> 0\n\n\t\t```\n\t\t\n\t\t```javascript\n\t\tvar x = 0;\n\t\tfunction foo() {\n\t\t  var o = {x: 1};\n\t\t  x = 2;\n\t\t  with(o) {\n\t\t    x = 3;\n\t\t  }\n\t\t  console.log(x); // --> 2\n\t\t  console.log(o.x); // --> 3\n\t\t}\n\t\tfoo()\n\t\tconsole.log(x); // --> 2\n\n\t\t```\n\n\t- class\n\t- const\n\t- let\n\n## Runtime\n\n### Completion Record\n\n- \\[\\[type]]: normal, break, continue, return, throw\n- \\[\\[value]]: Types\n- \\[\\[target]]: label\n\n\n\n### Lexical Environment\n\n## 预处理（pre-process）BoundNames\n\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  console.log(a) \n  return ;\n  var a;\n}()\nconsole.log('a', a);\n```\n![var 预处理](http://p0.meituan.net/myvideodistribute/f2ca7ffe01a1005a939392f8609685d733665.png)\n\n```javascript\nvoid a = 2;\nvoid function (){\n  a = 1;\n  return ;\n  const a;\n}();\nconsole.log(a);\n```\n![const 无预处理](http://p1.meituan.net/myvideodistribute/172ab6a2ba78132f1dd33f2f5b64e11044523.png)\n## 作用域\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  {\n    var a;\n  }\n}();\nconsole.log(a);\n```\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  {\n    const a;\n  }\n}();\nconsole.log(a);\n```\n\n![作用域](http://p0.meituan.net/myvideodistribute/8b9ac53e3ae6dfca675786084237d0d971523.png)\n\n- 作用域与上下文的区别\n\t- 作用域可以简单理解为源代码文本的作用区域\n\t- 执行上下文可以理解为，在用户的电脑上，内存里的，存变量的地方，JavaScript 引擎在执行过程中需要的变量，引擎里的那块内存。\n\n\n# Structure\n\n# Program/Module","source":"_posts/Javascript-Statement.md","raw":"---\ntitle: Javascript-Statement\ndate: 2020-04-26 17:01:45\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Statement\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n# Atom\n\n# Expression\n\n# Statement\n\n## Grammar\n\n### 简单语句\n\n- ExpressionStatement\n\t- a = 1 + 2;\n- EmptyStatement\n\t- ;\n- DebuggerStatement\n\t- debugger\n- ThrowStatement\n\t- throw a;\n- ContinueStatement\n\t- continue ;\n\t- continue label;\n- BreakStatement\n\t- break ;\n\t- break label;\n- ReturnStatement\n\t- return ;\n\t- return expression;\n\n<!-- more -->\n\n### 组合语句\n\n- BlockStatement\n\t- 把多条语句从语法上括起来，让它像一条语句一样\n\t\n\t\t```javascript\n\t\t{\n\t\t  Statement...\n\t\t  Statement...\n\t\t  Statement...\n\t\t}\n\n  {\n    a: 1 // a 被理解为 label\n  }\n\t\t```\n\t- BlockStatement 中有非 normal ，就会中断\n\t\t\n\t\t```javascript\n\t\t{\n\t\t  const a = 1;\n\t\t  throw 1;\n\t\t  let b = 2;\n\t\t  b = foo();\n\t\t}\n\t\t```\n\t- 为 const / let 提供作用域\n\t- Completion Record\n\t\t- \\[\\[type]]: normal\n\t\t- \\[\\[value]]: --\n\t\t- \\[\\[target]]: --\n\n- IfStatement\n- SwitchStatement\n- IterationStatement\n    - <s>for await(... of ...)</s>\n\t- while(Expression...) Statement...\n\t- do Statement... while(Expression...);\n\t- for(Definition...; Expression...; Expression...) Statement...\n\t\t- Definition\n\t\t\t- var\n\t\t\t- const / let\n\t\t- for 会独立产生一个作用域，在 blockStatement 之外\n\t\t\n\t\t\t```javascript\n\t\t\t{\n\t\t\t  let i = 0;\n\t\t\t  {\n\t\t\t    let i = 1;\n\t\t\t    console.log(i)\n\t\t\t  }\n\t\t\t  console.log(i)\n\t\t\t}\n\t\t\t```\n\t- for(Definition... in Expression...) Statement....\n\t\n\t\t```javascript\n\t\tfor(let i in {a: 1, b: 2}) {\n\t\t  console.log(i)\n\t\t}\n\t\t```\n\t- for(Definition...of Expression...) Statement...\n\t\n\t\t```javascript\n\t\tfor(let i of [1, 2, 3]) {\n\t\t  console.log(i)\n\t\t}\n\t\t```\n\t\t```javascript\n\t\tfunction *g() {\n\t\t  yield 0;\n\t\t  yield 1;\n\t\t  yield 4;\n\t\t}\n\t\tfor(let p  of g()){\n\t\t  console.log(p)\n\t\t}\n\t\t```\n\t\t\n\t\t> for of --> Iterator --> Generator/Array\n\t\t\n\t\t\n\n- WithStatement\n- LabelledStatement\n- TryStatement\n\n\t```javascript\n\ttry {\n\t  Statement...\n\t} catch(definition...) {\n\t  Statement...\n\t} finally {\n\t  Statement...\n\t}\n\t```\n\t```javascript\n\ttry {\n\t  throw 2;\n\t} catch(e) {\n\t  let e;\n\t  console.log(e);\n\t}\n\t```\n\t```javascript\n\tvar e = 3;\n\ttry {\n\t  throw 2;\n\t} catch(e) {\n\t  console.log(e);\n\t}\n\t```\n\t- catch 中的声明，只在 {} 这一个作用域中，与 for 不一样。\n\t- 运行时产生错误的时候，都有可能产生 throw\n\t\t\n\t\t```javascript\n\t\t1 = a;\n\t\tnull.a;\n\t\t```\n\t- Completion Record\n\t\t- \\[\\[type]]: return\n\t\t- \\[\\[value]]: --\n\t\t- \\[\\[target]]: label\n\n### 标签、循环、break、continue\n- LabelledStatement\n- IterationStatement\n- ContinueStatement\n- BreakStatement\n- SwitchStatement\n- Completion Record\n\t- [[type]]: break continue\n\t- \\[\\[value]]: --\n\t- \\[\\[target]]: label\n\n### 声明机制\n- FunctionDeclaration\n- GeneratorDeclaration\n- AsyncFunctionDeclaration\n\t\n\t```javascript\n\tfunction sleep(d) {\n\t  return new Promise(resolve => setTimeout(resolve, d))\n\t}\n\tvoid async function() {\n\t  var i = 0;\n\t  while(true) {\n\t    console.log(i ++);\n\t    await sleep(1000);\n\t  }\n\t}()\n\t```\n- AsyncGeneratorDeclaration\n\t\n\t```javascript\n\tfunction sleep(d) {\n\t  return new Promise(resolve => setTimeout(resolve, d))\n\t}\n\tasync function* foo() {\n\t  var i = 0;\n\t  while(true) {\n\t    yield i ++;\n\t    await sleep(1000);\n\t  }\n\t}\n\tvoid async function() {\n\t  var g = foo();\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t  console.log(await g.next());\n\t}()\n\t// 想无限循环输出\n\t\n\tvoid async function() {\n\t  var g = foo();\n\t  for await(let e of g) {\n\t    console.log(e)\n\t  }\n\t}()\n\t```\n- VariableStatement\n- ClassDeclaration\n- LexicalDeclaration\n- 声明\n\t- function\n\t- function *\n\t- async function\n\t- async function*\n\t- var\n\t\t- 有 var 不建议写在任何语句子结构里，建议写在 function 的范围内\n\n\t\t```javascript\n\t\tvar x = 0;\n\t\tfunction foo() {\n\t\t  var o = {x: 1};\n\t\t  x = 2;\n\t\t  with(o) {\n\t\t    var x = 3;\n\t\t  }\n\t\t  console.log(x); // --> 2\n\t\t  console.log(o.x); // --> 3\n\t\t}\n\t\tfoo()\n\t\tconsole.log(x); // --> 0\n\n\t\t```\n\t\t\n\t\t```javascript\n\t\tvar x = 0;\n\t\tfunction foo() {\n\t\t  var o = {x: 1};\n\t\t  x = 2;\n\t\t  with(o) {\n\t\t    x = 3;\n\t\t  }\n\t\t  console.log(x); // --> 2\n\t\t  console.log(o.x); // --> 3\n\t\t}\n\t\tfoo()\n\t\tconsole.log(x); // --> 2\n\n\t\t```\n\n\t- class\n\t- const\n\t- let\n\n## Runtime\n\n### Completion Record\n\n- \\[\\[type]]: normal, break, continue, return, throw\n- \\[\\[value]]: Types\n- \\[\\[target]]: label\n\n\n\n### Lexical Environment\n\n## 预处理（pre-process）BoundNames\n\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  console.log(a) \n  return ;\n  var a;\n}()\nconsole.log('a', a);\n```\n![var 预处理](http://p0.meituan.net/myvideodistribute/f2ca7ffe01a1005a939392f8609685d733665.png)\n\n```javascript\nvoid a = 2;\nvoid function (){\n  a = 1;\n  return ;\n  const a;\n}();\nconsole.log(a);\n```\n![const 无预处理](http://p1.meituan.net/myvideodistribute/172ab6a2ba78132f1dd33f2f5b64e11044523.png)\n## 作用域\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  {\n    var a;\n  }\n}();\nconsole.log(a);\n```\n\n```javascript\nvar a = 2;\nvoid function (){\n  a = 1;\n  {\n    const a;\n  }\n}();\nconsole.log(a);\n```\n\n![作用域](http://p0.meituan.net/myvideodistribute/8b9ac53e3ae6dfca675786084237d0d971523.png)\n\n- 作用域与上下文的区别\n\t- 作用域可以简单理解为源代码文本的作用区域\n\t- 执行上下文可以理解为，在用户的电脑上，内存里的，存变量的地方，JavaScript 引擎在执行过程中需要的变量，引擎里的那块内存。\n\n\n# Structure\n\n# Program/Module","slug":"Javascript-Statement","published":1,"updated":"2020-05-28T06:28:46.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w0000a1wp31avkdpap","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><h1 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h1><h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><h2 id=\"Grammar\"><a href=\"#Grammar\" class=\"headerlink\" title=\"Grammar\"></a>Grammar</h2><h3 id=\"简单语句\"><a href=\"#简单语句\" class=\"headerlink\" title=\"简单语句\"></a>简单语句</h3><ul>\n<li>ExpressionStatement<ul>\n<li>a = 1 + 2;</li>\n</ul>\n</li>\n<li>EmptyStatement<ul>\n<li>;</li>\n</ul>\n</li>\n<li>DebuggerStatement<ul>\n<li>debugger</li>\n</ul>\n</li>\n<li>ThrowStatement<ul>\n<li>throw a;</li>\n</ul>\n</li>\n<li>ContinueStatement<ul>\n<li>continue ;</li>\n<li>continue label;</li>\n</ul>\n</li>\n<li>BreakStatement<ul>\n<li>break ;</li>\n<li>break label;</li>\n</ul>\n</li>\n<li>ReturnStatement<ul>\n<li>return ;</li>\n<li>return expression;</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"组合语句\"><a href=\"#组合语句\" class=\"headerlink\" title=\"组合语句\"></a>组合语句</h3><ul>\n<li><p>BlockStatement</p>\n<ul>\n<li><p>把多条语句从语法上括起来，让它像一条语句一样</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span> <span class=\"comment\">// a 被理解为 label</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BlockStatement 中有非 normal ，就会中断</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  b = foo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>为 const / let 提供作用域</p>\n</li>\n<li><p>Completion Record</p>\n<ul>\n<li>[[type]]: normal</li>\n<li>[[value]]: –</li>\n<li>[[target]]: –</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IfStatement</p>\n</li>\n<li><p>SwitchStatement</p>\n</li>\n<li><p>IterationStatement</p>\n<ul>\n<li><p><s>for await(… of …)</s></p>\n</li>\n<li><p>while(Expression…) Statement…</p>\n</li>\n<li><p>do Statement… while(Expression…);</p>\n</li>\n<li><p>for(Definition…; Expression…; Expression…) Statement…</p>\n<ul>\n<li><p>Definition</p>\n<ul>\n<li>var</li>\n<li>const / let</li>\n</ul>\n</li>\n<li><p>for 会独立产生一个作用域，在 blockStatement 之外</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>for(Definition… in Expression…) Statement….</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>for(Definition…of Expression…) Statement…</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p  <span class=\"keyword\">of</span> g())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>for of –&gt; Iterator –&gt; Generator/Array</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>WithStatement</p>\n</li>\n<li><p>LabelledStatement</p>\n</li>\n<li><p>TryStatement</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(definition...) &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>catch 中的声明，只在 {} 这一个作用域中，与 for 不一样。</p>\n</li>\n<li><p>运行时产生错误的时候，都有可能产生 throw</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"literal\">null</span>.a;</span><br></pre></td></tr></table></figure></li>\n<li><p>Completion Record</p>\n<ul>\n<li>[[type]]: return</li>\n<li>[[value]]: –</li>\n<li>[[target]]: label</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"标签、循环、break、continue\"><a href=\"#标签、循环、break、continue\" class=\"headerlink\" title=\"标签、循环、break、continue\"></a>标签、循环、break、continue</h3><ul>\n<li>LabelledStatement</li>\n<li>IterationStatement</li>\n<li>ContinueStatement</li>\n<li>BreakStatement</li>\n<li>SwitchStatement</li>\n<li>Completion Record<ul>\n<li>[[type]]: break continue</li>\n<li>[[value]]: –</li>\n<li>[[target]]: label</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"声明机制\"><a href=\"#声明机制\" class=\"headerlink\" title=\"声明机制\"></a>声明机制</h3><ul>\n<li><p>FunctionDeclaration</p>\n</li>\n<li><p>GeneratorDeclaration</p>\n</li>\n<li><p>AsyncFunctionDeclaration</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, d))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i ++);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></li>\n<li><p>AsyncGeneratorDeclaration</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, d))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i ++;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = foo();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">// 想无限循环输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = foo();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span>(<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> g) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></li>\n<li><p>VariableStatement</p>\n</li>\n<li><p>ClassDeclaration</p>\n</li>\n<li><p>LexicalDeclaration</p>\n</li>\n<li><p>声明</p>\n<ul>\n<li><p>function</p>\n</li>\n<li><p>function *</p>\n</li>\n<li><p>async function</p>\n</li>\n<li><p>async function*</p>\n</li>\n<li><p>var</p>\n<ul>\n<li><p>有 var 不建议写在任何语句子结构里，建议写在 function 的范围内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">with</span>(o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o.x); <span class=\"comment\">// --&gt; 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">with</span>(o) &#123;</span><br><span class=\"line\">    x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o.x); <span class=\"comment\">// --&gt; 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>class</p>\n</li>\n<li><p>const</p>\n</li>\n<li><p>let</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h2><h3 id=\"Completion-Record\"><a href=\"#Completion-Record\" class=\"headerlink\" title=\"Completion Record\"></a>Completion Record</h3><ul>\n<li>[[type]]: normal, break, continue, return, throw</li>\n<li>[[value]]: Types</li>\n<li>[[target]]: label</li>\n</ul>\n<h3 id=\"Lexical-Environment\"><a href=\"#Lexical-Environment\" class=\"headerlink\" title=\"Lexical Environment\"></a>Lexical Environment</h3><h2 id=\"预处理（pre-process）BoundNames\"><a href=\"#预处理（pre-process）BoundNames\" class=\"headerlink\" title=\"预处理（pre-process）BoundNames\"></a>预处理（pre-process）BoundNames</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>, a);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p0.meituan.net/myvideodistribute/f2ca7ffe01a1005a939392f8609685d733665.png\" alt=\"var 预处理\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1.meituan.net/myvideodistribute/172ab6a2ba78132f1dd33f2f5b64e11044523.png\" alt=\"const 无预处理\"></p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://p0.meituan.net/myvideodistribute/8b9ac53e3ae6dfca675786084237d0d971523.png\" alt=\"作用域\"></p>\n<ul>\n<li>作用域与上下文的区别<ul>\n<li>作用域可以简单理解为源代码文本的作用区域</li>\n<li>执行上下文可以理解为，在用户的电脑上，内存里的，存变量的地方，JavaScript 引擎在执行过程中需要的变量，引擎里的那块内存。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h1><h1 id=\"Program-Module\"><a href=\"#Program-Module\" class=\"headerlink\" title=\"Program/Module\"></a>Program/Module</h1>","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h1 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h1><h1 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h1><h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><h2 id=\"Grammar\"><a href=\"#Grammar\" class=\"headerlink\" title=\"Grammar\"></a>Grammar</h2><h3 id=\"简单语句\"><a href=\"#简单语句\" class=\"headerlink\" title=\"简单语句\"></a>简单语句</h3><ul>\n<li>ExpressionStatement<ul>\n<li>a = 1 + 2;</li>\n</ul>\n</li>\n<li>EmptyStatement<ul>\n<li>;</li>\n</ul>\n</li>\n<li>DebuggerStatement<ul>\n<li>debugger</li>\n</ul>\n</li>\n<li>ThrowStatement<ul>\n<li>throw a;</li>\n</ul>\n</li>\n<li>ContinueStatement<ul>\n<li>continue ;</li>\n<li>continue label;</li>\n</ul>\n</li>\n<li>BreakStatement<ul>\n<li>break ;</li>\n<li>break label;</li>\n</ul>\n</li>\n<li>ReturnStatement<ul>\n<li>return ;</li>\n<li>return expression;</li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"组合语句\"><a href=\"#组合语句\" class=\"headerlink\" title=\"组合语句\"></a>组合语句</h3><ul>\n<li><p>BlockStatement</p>\n<ul>\n<li><p>把多条语句从语法上括起来，让它像一条语句一样</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span> <span class=\"comment\">// a 被理解为 label</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BlockStatement 中有非 normal ，就会中断</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  b = foo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>为 const / let 提供作用域</p>\n</li>\n<li><p>Completion Record</p>\n<ul>\n<li>[[type]]: normal</li>\n<li>[[value]]: –</li>\n<li>[[target]]: –</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IfStatement</p>\n</li>\n<li><p>SwitchStatement</p>\n</li>\n<li><p>IterationStatement</p>\n<ul>\n<li><p><s>for await(… of …)</s></p>\n</li>\n<li><p>while(Expression…) Statement…</p>\n</li>\n<li><p>do Statement… while(Expression…);</p>\n</li>\n<li><p>for(Definition…; Expression…; Expression…) Statement…</p>\n<ul>\n<li><p>Definition</p>\n<ul>\n<li>var</li>\n<li>const / let</li>\n</ul>\n</li>\n<li><p>for 会独立产生一个作用域，在 blockStatement 之外</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>for(Definition… in Expression…) Statement….</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>for(Definition…of Expression…) Statement…</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p  <span class=\"keyword\">of</span> g())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>for of –&gt; Iterator –&gt; Generator/Array</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>WithStatement</p>\n</li>\n<li><p>LabelledStatement</p>\n</li>\n<li><p>TryStatement</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(definition...) &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  Statement...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>catch 中的声明，只在 {} 这一个作用域中，与 for 不一样。</p>\n</li>\n<li><p>运行时产生错误的时候，都有可能产生 throw</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"literal\">null</span>.a;</span><br></pre></td></tr></table></figure></li>\n<li><p>Completion Record</p>\n<ul>\n<li>[[type]]: return</li>\n<li>[[value]]: –</li>\n<li>[[target]]: label</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"标签、循环、break、continue\"><a href=\"#标签、循环、break、continue\" class=\"headerlink\" title=\"标签、循环、break、continue\"></a>标签、循环、break、continue</h3><ul>\n<li>LabelledStatement</li>\n<li>IterationStatement</li>\n<li>ContinueStatement</li>\n<li>BreakStatement</li>\n<li>SwitchStatement</li>\n<li>Completion Record<ul>\n<li>[[type]]: break continue</li>\n<li>[[value]]: –</li>\n<li>[[target]]: label</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"声明机制\"><a href=\"#声明机制\" class=\"headerlink\" title=\"声明机制\"></a>声明机制</h3><ul>\n<li><p>FunctionDeclaration</p>\n</li>\n<li><p>GeneratorDeclaration</p>\n</li>\n<li><p>AsyncFunctionDeclaration</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, d))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i ++);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></li>\n<li><p>AsyncGeneratorDeclaration</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, d))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i ++;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = foo();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> g.next());</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">// 想无限循环输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> g = foo();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span>(<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> g) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></li>\n<li><p>VariableStatement</p>\n</li>\n<li><p>ClassDeclaration</p>\n</li>\n<li><p>LexicalDeclaration</p>\n</li>\n<li><p>声明</p>\n<ul>\n<li><p>function</p>\n</li>\n<li><p>function *</p>\n</li>\n<li><p>async function</p>\n</li>\n<li><p>async function*</p>\n</li>\n<li><p>var</p>\n<ul>\n<li><p>有 var 不建议写在任何语句子结构里，建议写在 function 的范围内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">with</span>(o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o.x); <span class=\"comment\">// --&gt; 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">with</span>(o) &#123;</span><br><span class=\"line\">    x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o.x); <span class=\"comment\">// --&gt; 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// --&gt; 2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>class</p>\n</li>\n<li><p>const</p>\n</li>\n<li><p>let</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h2><h3 id=\"Completion-Record\"><a href=\"#Completion-Record\" class=\"headerlink\" title=\"Completion Record\"></a>Completion Record</h3><ul>\n<li>[[type]]: normal, break, continue, return, throw</li>\n<li>[[value]]: Types</li>\n<li>[[target]]: label</li>\n</ul>\n<h3 id=\"Lexical-Environment\"><a href=\"#Lexical-Environment\" class=\"headerlink\" title=\"Lexical Environment\"></a>Lexical Environment</h3><h2 id=\"预处理（pre-process）BoundNames\"><a href=\"#预处理（pre-process）BoundNames\" class=\"headerlink\" title=\"预处理（pre-process）BoundNames\"></a>预处理（pre-process）BoundNames</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>, a);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p0.meituan.net/myvideodistribute/f2ca7ffe01a1005a939392f8609685d733665.png\" alt=\"var 预处理\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1.meituan.net/myvideodistribute/172ab6a2ba78132f1dd33f2f5b64e11044523.png\" alt=\"const 无预处理\"></p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://p0.meituan.net/myvideodistribute/8b9ac53e3ae6dfca675786084237d0d971523.png\" alt=\"作用域\"></p>\n<ul>\n<li>作用域与上下文的区别<ul>\n<li>作用域可以简单理解为源代码文本的作用区域</li>\n<li>执行上下文可以理解为，在用户的电脑上，内存里的，存变量的地方，JavaScript 引擎在执行过程中需要的变量，引擎里的那块内存。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h1><h1 id=\"Program-Module\"><a href=\"#Program-Module\" class=\"headerlink\" title=\"Program/Module\"></a>Program/Module</h1>"},{"title":"Reg-Number","date":"2020-04-20T14:27:51.000Z","description":["正则表达式，匹配所有 Number 字面量"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 利用正则表达式，匹配所有 Number 字面量\n<!-- more -->\n\n## 实践过程\n\n- ![NumbericLiteral 大纲](http://p1.meituan.net/myvideodistribute/fcc73488cd245a6c48cf067a6dc7641e16278.png)\n- NumericLiteral :: \n\t- DecimalLiteral\n\t\t- ![DecimalLiteral 大纲](http://p0.meituan.net/myvideodistribute/94398bab367ca56c0aa2435de753041520532.png)\n\t\t\t- ![DecimalLiteral 详情](http://p0.meituan.net/myvideodistribute/40d13f93242ff1f9321411cc7886586f52608.png)\n\t\t\t- DecimalIntegerLiteral . DecimalDigits(opt) ExponentPart(opt)\n\t\t\t\t- DecimalIntegerLiteral\n\t\t\t\t\t\n\t\t\t\t\t> (0)\n\t\t\t\t\t\n\t\t\t\t\t> ([1-9][0-9]*)\n\t\t\t\t- .\n\t\t\t\t\t> .\n\t\t\t\t- DecimalDigits\n\t\t\t\t\t> [0-9]*\n\t\t\t\t- ExponentPart\n\t\t\t\t\t> (e|E)(\\\\+|\\\\-)?([0-9])*\n\t\t\t\t- 可以推导出\n\t\t\t\t\t> /^((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?$/\n\t\t\t- . DecimalDigits ExponentPart(opt)\n\t\t\t\t- 可以推导出\n\t\t\t\t\t\n\t\t\t\t\t> /^**((0)|([1-9][0-9]\\*))?**.?([0-9]\\*)(((e|E)?(\\\\+|\\\\-)?([0-9])\\*)\\*)$/\n\t\t\t- DecimalIntegerLiteral ExponentPart(opt)\n\t\t\t\n\t\t\t\t> /^((0)|([1-9][0-9]\\*))?**.?**([0-9]*)((e|E)?(\\\\+|\\\\-)?([0-9]\\*))?$/\n\t\t\t- 最终\n\t\t\t\n\t\t\t\t> /^((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?$/\n\n\t- BinaryIntegerLiteral \n\t\t- ![BinaryIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/5a2e4c4c84c80cf794281290420928d78942.png)\n\t\t\t- ![BinaryIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/22c6b076cfe8b42d71003893bed4059512350.png)\n\n\t\t\t\t> /^0(b|B)(0|1)+$/\n\t- OctalIntegerLiteral \n\t\t- ![OctalIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/40145f430e5560e16f117863419eceea12195.png)\n\t\t\t- ![OctalIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/3049a1ac2a5071c0bcebae1e31db9a5512369.png)\n\t\t\t\t\n\t\t\t\t> /^0(O|o)[0-7]+$/\n\t- HexIntegerLiteral\n\t\t- ![HexIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/cfe61ed151be1f9e1ab58a860cc6c8638397.png)\n\t\t\t- ![HexIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/75544696fc619ce55f6555d0fddd5a0617749.png)\n\t\t\t\t\n\t\t\t\t> /^0(x|X)([0-9a-fA-F])+$/\n- 简单总结\n\n\t> /^(((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+)$/\n\t\n- 简化\n\n\t>  /^((((0)|([1-9]\\d\\*))?.?(\\d\\*)((e|E)?(\\\\+|\\\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/\n\n  ```javascript\n  /^((((0)|([1-9]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/\n  ```\n  \n## 结果测试\n- 十六进制数： 0x0233acdfACDF\n\t- ![十六进制数](http://p0.meituan.net/myvideodistribute/6b7064f71909191efad66a7a6899e17551930.png)\n- 八进制数：0o023657\n\t- ![八进制数](http://p0.meituan.net/myvideodistribute/a65a14040f2a483733b92a78ca7cb76956176.png)\n- 二进制数： 0b01010111\n\t- ![二进制数](http://p0.meituan.net/myvideodistribute/33e2f75a6f02ec627a4aa16f56c9d59251733.png)\n- 浮点数：.2373736\n\t- ![浮点数](http://p0.meituan.net/myvideodistribute/facf9ed43fe79a6e05525c9597f1014054052.png)\n- IEEE 754：1.2e+32\n\t- ![IEEE 754](http://p1.meituan.net/myvideodistribute/28058fac862347153c3d605fbb37272952996.png)\n- 特殊情况 .0\n\t- ![特殊情况](http://p0.meituan.net/myvideodistribute/5d38329b0247e224ac893957ae24e9a150951.png)\n\t\n\t\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/Reg-Number.md","raw":"---\ntitle: Reg-Number\ndate: 2020-04-20 22:27:51\ntags:\n- 前端概念\n- 正则表达式\ncategories:\n- [前端概念]\ndescription:\n- 正则表达式，匹配所有 Number 字面量\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 利用正则表达式，匹配所有 Number 字面量\n<!-- more -->\n\n## 实践过程\n\n- ![NumbericLiteral 大纲](http://p1.meituan.net/myvideodistribute/fcc73488cd245a6c48cf067a6dc7641e16278.png)\n- NumericLiteral :: \n\t- DecimalLiteral\n\t\t- ![DecimalLiteral 大纲](http://p0.meituan.net/myvideodistribute/94398bab367ca56c0aa2435de753041520532.png)\n\t\t\t- ![DecimalLiteral 详情](http://p0.meituan.net/myvideodistribute/40d13f93242ff1f9321411cc7886586f52608.png)\n\t\t\t- DecimalIntegerLiteral . DecimalDigits(opt) ExponentPart(opt)\n\t\t\t\t- DecimalIntegerLiteral\n\t\t\t\t\t\n\t\t\t\t\t> (0)\n\t\t\t\t\t\n\t\t\t\t\t> ([1-9][0-9]*)\n\t\t\t\t- .\n\t\t\t\t\t> .\n\t\t\t\t- DecimalDigits\n\t\t\t\t\t> [0-9]*\n\t\t\t\t- ExponentPart\n\t\t\t\t\t> (e|E)(\\\\+|\\\\-)?([0-9])*\n\t\t\t\t- 可以推导出\n\t\t\t\t\t> /^((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?$/\n\t\t\t- . DecimalDigits ExponentPart(opt)\n\t\t\t\t- 可以推导出\n\t\t\t\t\t\n\t\t\t\t\t> /^**((0)|([1-9][0-9]\\*))?**.?([0-9]\\*)(((e|E)?(\\\\+|\\\\-)?([0-9])\\*)\\*)$/\n\t\t\t- DecimalIntegerLiteral ExponentPart(opt)\n\t\t\t\n\t\t\t\t> /^((0)|([1-9][0-9]\\*))?**.?**([0-9]*)((e|E)?(\\\\+|\\\\-)?([0-9]\\*))?$/\n\t\t\t- 最终\n\t\t\t\n\t\t\t\t> /^((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?$/\n\n\t- BinaryIntegerLiteral \n\t\t- ![BinaryIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/5a2e4c4c84c80cf794281290420928d78942.png)\n\t\t\t- ![BinaryIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/22c6b076cfe8b42d71003893bed4059512350.png)\n\n\t\t\t\t> /^0(b|B)(0|1)+$/\n\t- OctalIntegerLiteral \n\t\t- ![OctalIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/40145f430e5560e16f117863419eceea12195.png)\n\t\t\t- ![OctalIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/3049a1ac2a5071c0bcebae1e31db9a5512369.png)\n\t\t\t\t\n\t\t\t\t> /^0(O|o)[0-7]+$/\n\t- HexIntegerLiteral\n\t\t- ![HexIntegerLiteral 大纲](http://p1.meituan.net/myvideodistribute/cfe61ed151be1f9e1ab58a860cc6c8638397.png)\n\t\t\t- ![HexIntegerLiteral 详情](http://p0.meituan.net/myvideodistribute/75544696fc619ce55f6555d0fddd5a0617749.png)\n\t\t\t\t\n\t\t\t\t> /^0(x|X)([0-9a-fA-F])+$/\n- 简单总结\n\n\t> /^(((0)|([1-9][0-9]\\*))?.?([0-9]\\*)((e|E)?(\\\\+|\\\\-)?([0-9]*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+)$/\n\t\n- 简化\n\n\t>  /^((((0)|([1-9]\\d\\*))?.?(\\d\\*)((e|E)?(\\\\+|\\\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/\n\n  ```javascript\n  /^((((0)|([1-9]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/\n  ```\n  \n## 结果测试\n- 十六进制数： 0x0233acdfACDF\n\t- ![十六进制数](http://p0.meituan.net/myvideodistribute/6b7064f71909191efad66a7a6899e17551930.png)\n- 八进制数：0o023657\n\t- ![八进制数](http://p0.meituan.net/myvideodistribute/a65a14040f2a483733b92a78ca7cb76956176.png)\n- 二进制数： 0b01010111\n\t- ![二进制数](http://p0.meituan.net/myvideodistribute/33e2f75a6f02ec627a4aa16f56c9d59251733.png)\n- 浮点数：.2373736\n\t- ![浮点数](http://p0.meituan.net/myvideodistribute/facf9ed43fe79a6e05525c9597f1014054052.png)\n- IEEE 754：1.2e+32\n\t- ![IEEE 754](http://p1.meituan.net/myvideodistribute/28058fac862347153c3d605fbb37272952996.png)\n- 特殊情况 .0\n\t- ![特殊情况](http://p0.meituan.net/myvideodistribute/5d38329b0247e224ac893957ae24e9a150951.png)\n\t\n\t\n## 写在后面\n- 祝大家多多发财\n","slug":"Reg-Number","published":1,"updated":"2020-04-27T04:03:38.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w2000b1wp395aw0vdf","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>利用正则表达式，匹配所有 Number 字面量<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/fcc73488cd245a6c48cf067a6dc7641e16278.png\" alt=\"NumbericLiteral 大纲\"></p>\n</li>\n<li><p>NumericLiteral :: </p>\n<ul>\n<li><p>DecimalLiteral</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/94398bab367ca56c0aa2435de753041520532.png\" alt=\"DecimalLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/40d13f93242ff1f9321411cc7886586f52608.png\" alt=\"DecimalLiteral 详情\"></p>\n</li>\n<li><p>DecimalIntegerLiteral . DecimalDigits(opt) ExponentPart(opt)</p>\n<ul>\n<li><p>DecimalIntegerLiteral</p>\n<blockquote>\n<p>(0)</p>\n</blockquote>\n<blockquote>\n<p>([1-9][0-9]*)</p>\n</blockquote>\n</li>\n<li><p>.</p>\n<blockquote>\n<p>.</p>\n</blockquote>\n</li>\n<li><p>DecimalDigits</p>\n<blockquote>\n<p>[0-9]*</p>\n</blockquote>\n</li>\n<li><p>ExponentPart</p>\n<blockquote>\n<p>(e|E)(\\+|\\-)?([0-9])*</p>\n</blockquote>\n</li>\n<li><p>可以推导出</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>. DecimalDigits ExponentPart(opt)</p>\n<ul>\n<li><p>可以推导出</p>\n<blockquote>\n<p>/^<strong>((0)|([1-9][0-9]*))?</strong>.?([0-9]*)(((e|E)?(\\+|\\-)?([0-9])*)*)$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>DecimalIntegerLiteral ExponentPart(opt)</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?<strong>.?</strong>([0-9]<em>)((e|E)?(\\+|\\-)?([0-9]\\</em>))?$/</p>\n</blockquote>\n</li>\n<li><p>最终</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BinaryIntegerLiteral </p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/5a2e4c4c84c80cf794281290420928d78942.png\" alt=\"BinaryIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/22c6b076cfe8b42d71003893bed4059512350.png\" alt=\"BinaryIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(b|B)(0|1)+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OctalIntegerLiteral </p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/40145f430e5560e16f117863419eceea12195.png\" alt=\"OctalIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/3049a1ac2a5071c0bcebae1e31db9a5512369.png\" alt=\"OctalIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(O|o)[0-7]+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HexIntegerLiteral</p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/cfe61ed151be1f9e1ab58a860cc6c8638397.png\" alt=\"HexIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/75544696fc619ce55f6555d0fddd5a0617749.png\" alt=\"HexIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(x|X)([0-9a-fA-F])+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单总结</p>\n<blockquote>\n<p>/^(((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+)$/</p>\n</blockquote>\n</li>\n<li><p>简化</p>\n<blockquote>\n<p> /^((((0)|([1-9]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((((<span class=\"number\">0</span>)|([<span class=\"number\">1</span><span class=\"number\">-9</span>]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(<span class=\"number\">0</span>(b|B)(<span class=\"number\">0</span>|<span class=\"number\">1</span>)+)|(<span class=\"number\">0</span>(O|o)[<span class=\"number\">0</span><span class=\"number\">-7</span>]+)|(<span class=\"number\">0</span>(x|X)([<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F])+))$/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h2><ul>\n<li>十六进制数： 0x0233acdfACDF<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6b7064f71909191efad66a7a6899e17551930.png\" alt=\"十六进制数\"></li>\n</ul>\n</li>\n<li>八进制数：0o023657<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a65a14040f2a483733b92a78ca7cb76956176.png\" alt=\"八进制数\"></li>\n</ul>\n</li>\n<li>二进制数： 0b01010111<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/33e2f75a6f02ec627a4aa16f56c9d59251733.png\" alt=\"二进制数\"></li>\n</ul>\n</li>\n<li>浮点数：.2373736<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/facf9ed43fe79a6e05525c9597f1014054052.png\" alt=\"浮点数\"></li>\n</ul>\n</li>\n<li>IEEE 754：1.2e+32<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/28058fac862347153c3d605fbb37272952996.png\" alt=\"IEEE 754\"></li>\n</ul>\n</li>\n<li>特殊情况 .0<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5d38329b0247e224ac893957ae24e9a150951.png\" alt=\"特殊情况\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>利用正则表达式，匹配所有 Number 字面量","more":"</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/fcc73488cd245a6c48cf067a6dc7641e16278.png\" alt=\"NumbericLiteral 大纲\"></p>\n</li>\n<li><p>NumericLiteral :: </p>\n<ul>\n<li><p>DecimalLiteral</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/94398bab367ca56c0aa2435de753041520532.png\" alt=\"DecimalLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/40d13f93242ff1f9321411cc7886586f52608.png\" alt=\"DecimalLiteral 详情\"></p>\n</li>\n<li><p>DecimalIntegerLiteral . DecimalDigits(opt) ExponentPart(opt)</p>\n<ul>\n<li><p>DecimalIntegerLiteral</p>\n<blockquote>\n<p>(0)</p>\n</blockquote>\n<blockquote>\n<p>([1-9][0-9]*)</p>\n</blockquote>\n</li>\n<li><p>.</p>\n<blockquote>\n<p>.</p>\n</blockquote>\n</li>\n<li><p>DecimalDigits</p>\n<blockquote>\n<p>[0-9]*</p>\n</blockquote>\n</li>\n<li><p>ExponentPart</p>\n<blockquote>\n<p>(e|E)(\\+|\\-)?([0-9])*</p>\n</blockquote>\n</li>\n<li><p>可以推导出</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>. DecimalDigits ExponentPart(opt)</p>\n<ul>\n<li><p>可以推导出</p>\n<blockquote>\n<p>/^<strong>((0)|([1-9][0-9]*))?</strong>.?([0-9]*)(((e|E)?(\\+|\\-)?([0-9])*)*)$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>DecimalIntegerLiteral ExponentPart(opt)</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?<strong>.?</strong>([0-9]<em>)((e|E)?(\\+|\\-)?([0-9]\\</em>))?$/</p>\n</blockquote>\n</li>\n<li><p>最终</p>\n<blockquote>\n<p>/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BinaryIntegerLiteral </p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/5a2e4c4c84c80cf794281290420928d78942.png\" alt=\"BinaryIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/22c6b076cfe8b42d71003893bed4059512350.png\" alt=\"BinaryIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(b|B)(0|1)+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OctalIntegerLiteral </p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/40145f430e5560e16f117863419eceea12195.png\" alt=\"OctalIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/3049a1ac2a5071c0bcebae1e31db9a5512369.png\" alt=\"OctalIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(O|o)[0-7]+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HexIntegerLiteral</p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/cfe61ed151be1f9e1ab58a860cc6c8638397.png\" alt=\"HexIntegerLiteral 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/75544696fc619ce55f6555d0fddd5a0617749.png\" alt=\"HexIntegerLiteral 详情\"></p>\n<blockquote>\n<p>/^0(x|X)([0-9a-fA-F])+$/</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单总结</p>\n<blockquote>\n<p>/^(((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+)$/</p>\n</blockquote>\n</li>\n<li><p>简化</p>\n<blockquote>\n<p> /^((((0)|([1-9]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(0(b|B)(0|1)+)|(0(O|o)[0-7]+)|(0(x|X)([0-9a-fA-F])+))$/</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((((<span class=\"number\">0</span>)|([<span class=\"number\">1</span><span class=\"number\">-9</span>]\\d*))?.?(\\d*)((e|E)?(\\+|\\-)?(\\d*))?)|(<span class=\"number\">0</span>(b|B)(<span class=\"number\">0</span>|<span class=\"number\">1</span>)+)|(<span class=\"number\">0</span>(O|o)[<span class=\"number\">0</span><span class=\"number\">-7</span>]+)|(<span class=\"number\">0</span>(x|X)([<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F])+))$/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"结果测试\"><a href=\"#结果测试\" class=\"headerlink\" title=\"结果测试\"></a>结果测试</h2><ul>\n<li>十六进制数： 0x0233acdfACDF<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6b7064f71909191efad66a7a6899e17551930.png\" alt=\"十六进制数\"></li>\n</ul>\n</li>\n<li>八进制数：0o023657<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a65a14040f2a483733b92a78ca7cb76956176.png\" alt=\"八进制数\"></li>\n</ul>\n</li>\n<li>二进制数： 0b01010111<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/33e2f75a6f02ec627a4aa16f56c9d59251733.png\" alt=\"二进制数\"></li>\n</ul>\n</li>\n<li>浮点数：.2373736<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/facf9ed43fe79a6e05525c9597f1014054052.png\" alt=\"浮点数\"></li>\n</ul>\n</li>\n<li>IEEE 754：1.2e+32<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/28058fac862347153c3d605fbb37272952996.png\" alt=\"IEEE 754\"></li>\n</ul>\n</li>\n<li>特殊情况 .0<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5d38329b0247e224ac893957ae24e9a150951.png\" alt=\"特殊情况\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Reg -- String","date":"2020-04-21T00:48:45.000Z","description":["正则表达式，匹配所有 字符串 字面量"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 正则表达式，匹配所有 字符串 字面量\n<!-- more -->\n\n\n## 实践过程\n\n- ![StringLiteral 大纲](http://p0.meituan.net/myvideodistribute/42c12116bea0d20ad46f3eaaec710ee419568.png)\n- StringLiteral ::\n\t- DoubleStringCharacters\n\t\t- ![DoubleStringCharacters 大纲](http://p0.meituan.net/myvideodistribute/03c05dd8a9fd5b8b621593fe039e4e6c16908.png)\n\t\t\t- ![DoubleStringCharacter 详情](http://p0.meituan.net/myvideodistribute/ef23a0f824e9fc948b61da6c4a8d2a4729602.png)\n\t\t\t\t- ![SourceCharacter 详情](http://p0.meituan.net/myvideodistribute/9004c303c8ebdbb8e38c00e7597b2c5b10649.png)\n\n\t\t\t\t\t> \\\\\\u[0-9a-fA-F]{4}\n\t\t\t\t- ![EscapeSequence 详情](http://p0.meituan.net/myvideodistribute/25a7c00f444aaead5b3a187d09ab280a16997.png)\n\t\t\t\t\t- ![CharacterEscapeSequence 详情](http://p0.meituan.net/myvideodistribute/ef30597fe4124e22ae7fcf243d9712a310845.png)\n\t\t\t\t\t\t- ![SingleEscapeCharacter 详情](http://p0.meituan.net/myvideodistribute/b495509fe89ca78a7d2f5f06831d45c79074.png)\n\n\t\t\t\t\t\t\t> '\"\\\\\\bfnrtv\n\t\t\t\t\t\t- ![NonEscapeCharacter 详情](http://p0.meituan.net/myvideodistribute/7ce330d5a54c7c8ac927771ee7a0540814453.png)\n\t\t\t\t\t\t\t- ![EscapeCharacter 详情](http://p1.meituan.net/myvideodistribute/f3d3a1b2fba86ebd4b8b6ab2959302e610550.png)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t> '\"\\\\\\bfnrtv0-9xu \n\t\t\t\t\t\t\t- ![LineTerminator 详情](http://p0.meituan.net/myvideodistribute/8c027b4dfef1876ad432fd62b6ecc4a59724.png)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t> \\n\\r\\u2028\\u2029\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t- ![LineTerminator 码点](http://p0.meituan.net/myvideodistribute/02a7f707581cb217ab5025d7a48e67e829247.png)\n\t\t\t\t\t\n\t\t\t\t\t- **CharacterEscapeSequence**总结为：\n\t\t\t\t\t\n\t\t\t\t\t\t> '\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029\n\t\t\t\t\t\n\t\t\t\t\t- ![HexEscapeSequence 详情](http://p1.meituan.net/myvideodistribute/9207083723607a9faa4f0a560599dde17694.png)\n\n\t\t\t\t\t- **HexEscapeSequence**总结为：\n\n\t\t\t\t\t\t> \\\\\\x[0-9a-fA-F]{2}\n\t\t\t\t\t\n\t\t\t\t\t- ![UnicodeEscapeSequence 详情](http://p0.meituan.net/myvideodistribute/545f52e053421a0e9c5e3b231a96276d10075.png)\n\t\t\t\t\t\t- ![Hex4Digits 详情](http://p1.meituan.net/myvideodistribute/8bb8c713ee753fd2844aea95e3ecde417620.png)\n\t\t\t\t\t- **UnicodeEscapeSequence**总结为：\n\n\t\t\t\t\t\t>  \\\\\\u[0-9a-fA-F]{4}\n\t\t\t\t\t\t\n\t\t\t\t- **EscapeSequence**总结为：\n\n\t\t\t\t\t> ('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4})\n\t\t\t\t\t\n\t\t\t\t- ![LineContinuation 详情](http://p0.meituan.net/myvideodistribute/bd86a4d39c1ae8d719eca6afbd9dcb147948.png)\n\t\t\t\t\t- ![LineTerminatorSequence 详情](http://p0.meituan.net/myvideodistribute/e8b4e35d4653ecb6a0f89d848085f69b14054.png)\n\t\t\t\t- **LineContinuation**总结为：\n\t\t\t\t\n\t\t\t\t\t> \\\\\\\\\\n\\r\\u\\2028]2029\n\t\t\t\t\t\n\t- **DoubleStringCharacters**总结为：\n\n\t\t> \"(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*\"\n\t\t\n\t- SingleStringCharacters\n\t\t- ![SingleStringCharacters 大纲](http://p0.meituan.net/myvideodistribute/6d2e2b31ed15050de59907d5537b9e9219247.png)\n\t- **SingleStringCharacters**总结为：\n\n\t\t> '(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*'\n\t\t\n- **StringLiteral**总结为：\n\t\n\t> (^\"(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*\"$)|(^'(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*'$)\n\t\n\t```javascript\n\t(^\"(?:(\\\\('\"\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\x[0-9a-fA-F]{2})|(\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*\"$)|(^'(?:(\\\\('\"\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\x[0-9a-fA-F]{2})|(\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*'$)\n\t```\n\n\n## 写在后面\n- 祝大家多多发财\n\n\n","source":"_posts/Reg-String.md","raw":"---\ntitle: Reg -- String\ndate: 2020-04-21 08:48:45\ntags:\n- 前端概念\n- 正则表达式\ncategories:\n- [前端概念]\ndescription:\n- 正则表达式，匹配所有 字符串 字面量\n\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 正则表达式，匹配所有 字符串 字面量\n<!-- more -->\n\n\n## 实践过程\n\n- ![StringLiteral 大纲](http://p0.meituan.net/myvideodistribute/42c12116bea0d20ad46f3eaaec710ee419568.png)\n- StringLiteral ::\n\t- DoubleStringCharacters\n\t\t- ![DoubleStringCharacters 大纲](http://p0.meituan.net/myvideodistribute/03c05dd8a9fd5b8b621593fe039e4e6c16908.png)\n\t\t\t- ![DoubleStringCharacter 详情](http://p0.meituan.net/myvideodistribute/ef23a0f824e9fc948b61da6c4a8d2a4729602.png)\n\t\t\t\t- ![SourceCharacter 详情](http://p0.meituan.net/myvideodistribute/9004c303c8ebdbb8e38c00e7597b2c5b10649.png)\n\n\t\t\t\t\t> \\\\\\u[0-9a-fA-F]{4}\n\t\t\t\t- ![EscapeSequence 详情](http://p0.meituan.net/myvideodistribute/25a7c00f444aaead5b3a187d09ab280a16997.png)\n\t\t\t\t\t- ![CharacterEscapeSequence 详情](http://p0.meituan.net/myvideodistribute/ef30597fe4124e22ae7fcf243d9712a310845.png)\n\t\t\t\t\t\t- ![SingleEscapeCharacter 详情](http://p0.meituan.net/myvideodistribute/b495509fe89ca78a7d2f5f06831d45c79074.png)\n\n\t\t\t\t\t\t\t> '\"\\\\\\bfnrtv\n\t\t\t\t\t\t- ![NonEscapeCharacter 详情](http://p0.meituan.net/myvideodistribute/7ce330d5a54c7c8ac927771ee7a0540814453.png)\n\t\t\t\t\t\t\t- ![EscapeCharacter 详情](http://p1.meituan.net/myvideodistribute/f3d3a1b2fba86ebd4b8b6ab2959302e610550.png)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t> '\"\\\\\\bfnrtv0-9xu \n\t\t\t\t\t\t\t- ![LineTerminator 详情](http://p0.meituan.net/myvideodistribute/8c027b4dfef1876ad432fd62b6ecc4a59724.png)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t> \\n\\r\\u2028\\u2029\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t- ![LineTerminator 码点](http://p0.meituan.net/myvideodistribute/02a7f707581cb217ab5025d7a48e67e829247.png)\n\t\t\t\t\t\n\t\t\t\t\t- **CharacterEscapeSequence**总结为：\n\t\t\t\t\t\n\t\t\t\t\t\t> '\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029\n\t\t\t\t\t\n\t\t\t\t\t- ![HexEscapeSequence 详情](http://p1.meituan.net/myvideodistribute/9207083723607a9faa4f0a560599dde17694.png)\n\n\t\t\t\t\t- **HexEscapeSequence**总结为：\n\n\t\t\t\t\t\t> \\\\\\x[0-9a-fA-F]{2}\n\t\t\t\t\t\n\t\t\t\t\t- ![UnicodeEscapeSequence 详情](http://p0.meituan.net/myvideodistribute/545f52e053421a0e9c5e3b231a96276d10075.png)\n\t\t\t\t\t\t- ![Hex4Digits 详情](http://p1.meituan.net/myvideodistribute/8bb8c713ee753fd2844aea95e3ecde417620.png)\n\t\t\t\t\t- **UnicodeEscapeSequence**总结为：\n\n\t\t\t\t\t\t>  \\\\\\u[0-9a-fA-F]{4}\n\t\t\t\t\t\t\n\t\t\t\t- **EscapeSequence**总结为：\n\n\t\t\t\t\t> ('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4})\n\t\t\t\t\t\n\t\t\t\t- ![LineContinuation 详情](http://p0.meituan.net/myvideodistribute/bd86a4d39c1ae8d719eca6afbd9dcb147948.png)\n\t\t\t\t\t- ![LineTerminatorSequence 详情](http://p0.meituan.net/myvideodistribute/e8b4e35d4653ecb6a0f89d848085f69b14054.png)\n\t\t\t\t- **LineContinuation**总结为：\n\t\t\t\t\n\t\t\t\t\t> \\\\\\\\\\n\\r\\u\\2028]2029\n\t\t\t\t\t\n\t- **DoubleStringCharacters**总结为：\n\n\t\t> \"(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*\"\n\t\t\n\t- SingleStringCharacters\n\t\t- ![SingleStringCharacters 大纲](http://p0.meituan.net/myvideodistribute/6d2e2b31ed15050de59907d5537b9e9219247.png)\n\t- **SingleStringCharacters**总结为：\n\n\t\t> '(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*'\n\t\t\n- **StringLiteral**总结为：\n\t\n\t> (^\"(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*\"$)|(^'(?:(\\\\\\\\('\"\\\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\\\\\x[0-9a-fA-F]{2})|(\\\\\\u[0-9a-fA-F]{4}))|(\\\\\\\\\\n\\r\\u\\2028]2029))*'$)\n\t\n\t```javascript\n\t(^\"(?:(\\\\('\"\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\x[0-9a-fA-F]{2})|(\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*\"$)|(^'(?:(\\\\('\"\\\\bfnrtv0-9xu\\n\\\\r\\u2028\\u2029])|(\\x[0-9a-fA-F]{2})|(\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*'$)\n\t```\n\n\n## 写在后面\n- 祝大家多多发财\n\n\n","slug":"Reg-String","published":1,"updated":"2020-04-27T04:03:53.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w4000g1wp33q19ad9a","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>正则表达式，匹配所有 字符串 字面量<a id=\"more\"></a>\n\n\n</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/42c12116bea0d20ad46f3eaaec710ee419568.png\" alt=\"StringLiteral 大纲\"></p>\n</li>\n<li><p>StringLiteral ::</p>\n<ul>\n<li><p>DoubleStringCharacters</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/03c05dd8a9fd5b8b621593fe039e4e6c16908.png\" alt=\"DoubleStringCharacters 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/ef23a0f824e9fc948b61da6c4a8d2a4729602.png\" alt=\"DoubleStringCharacter 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/9004c303c8ebdbb8e38c00e7597b2c5b10649.png\" alt=\"SourceCharacter 详情\"></p>\n<blockquote>\n<p>\\\\u[0-9a-fA-F]{4}</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/25a7c00f444aaead5b3a187d09ab280a16997.png\" alt=\"EscapeSequence 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/ef30597fe4124e22ae7fcf243d9712a310845.png\" alt=\"CharacterEscapeSequence 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/b495509fe89ca78a7d2f5f06831d45c79074.png\" alt=\"SingleEscapeCharacter 详情\"></p>\n<blockquote>\n<p>‘“\\\\bfnrtv</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/7ce330d5a54c7c8ac927771ee7a0540814453.png\" alt=\"NonEscapeCharacter 详情\"></p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/f3d3a1b2fba86ebd4b8b6ab2959302e610550.png\" alt=\"EscapeCharacter 详情\"></p>\n<blockquote>\n<p>‘“\\\\bfnrtv0-9xu </p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/8c027b4dfef1876ad432fd62b6ecc4a59724.png\" alt=\"LineTerminator 详情\"></p>\n<blockquote>\n<p>\\n\\r\\u2028\\u2029</p>\n</blockquote>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/02a7f707581cb217ab5025d7a48e67e829247.png\" alt=\"LineTerminator 码点\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>CharacterEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/9207083723607a9faa4f0a560599dde17694.png\" alt=\"HexEscapeSequence 详情\"></p>\n</li>\n<li><p><strong>HexEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>\\\\x[0-9a-fA-F]{2}</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/545f52e053421a0e9c5e3b231a96276d10075.png\" alt=\"UnicodeEscapeSequence 详情\"></p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/8bb8c713ee753fd2844aea95e3ecde417620.png\" alt=\"Hex4Digits 详情\"></li>\n</ul>\n</li>\n<li><p><strong>UnicodeEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p> \\\\u[0-9a-fA-F]{4}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>EscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4})</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bd86a4d39c1ae8d719eca6afbd9dcb147948.png\" alt=\"LineContinuation 详情\"></p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e8b4e35d4653ecb6a0f89d848085f69b14054.png\" alt=\"LineTerminatorSequence 详情\"></li>\n</ul>\n</li>\n<li><p><strong>LineContinuation</strong>总结为：</p>\n<blockquote>\n<p>\\\\\\n\\r\\u\\2028]2029</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>DoubleStringCharacters</strong>总结为：</p>\n<blockquote>\n<p>“(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*”</p>\n</blockquote>\n</li>\n<li><p>SingleStringCharacters</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6d2e2b31ed15050de59907d5537b9e9219247.png\" alt=\"SingleStringCharacters 大纲\"></li>\n</ul>\n</li>\n<li><p><strong>SingleStringCharacters</strong>总结为：</p>\n<blockquote>\n<p>‘(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>StringLiteral</strong>总结为：</p>\n<blockquote>\n<p>(^”(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*”$)|(^’(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*’$)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^<span class=\"string\">\"(?:(\\\\('\"</span>\\\\bfnrtv0<span class=\"number\">-9</span>xu\\n\\\\r\\u2028\\u2029])|(\\x[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">2</span>&#125;)|(\\u[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">4</span>&#125;))|(\\\\\\n\\r\\u\\<span class=\"number\">2028</span>]<span class=\"number\">2029</span>))*<span class=\"string\">\"$)|(^'(?:(\\\\('\"</span>\\\\bfnrtv0<span class=\"number\">-9</span>xu\\n\\\\r\\u2028\\u2029])|(\\x[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">2</span>&#125;)|(\\u[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">4</span>&#125;))|(\\\\\\n\\r\\u\\<span class=\"number\">2028</span>]<span class=\"number\">2029</span>))*<span class=\"string\">'$)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>正则表达式，匹配所有 字符串 字面量","more":"</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/42c12116bea0d20ad46f3eaaec710ee419568.png\" alt=\"StringLiteral 大纲\"></p>\n</li>\n<li><p>StringLiteral ::</p>\n<ul>\n<li><p>DoubleStringCharacters</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/03c05dd8a9fd5b8b621593fe039e4e6c16908.png\" alt=\"DoubleStringCharacters 大纲\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/ef23a0f824e9fc948b61da6c4a8d2a4729602.png\" alt=\"DoubleStringCharacter 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/9004c303c8ebdbb8e38c00e7597b2c5b10649.png\" alt=\"SourceCharacter 详情\"></p>\n<blockquote>\n<p>\\\\u[0-9a-fA-F]{4}</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/25a7c00f444aaead5b3a187d09ab280a16997.png\" alt=\"EscapeSequence 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/ef30597fe4124e22ae7fcf243d9712a310845.png\" alt=\"CharacterEscapeSequence 详情\"></p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/b495509fe89ca78a7d2f5f06831d45c79074.png\" alt=\"SingleEscapeCharacter 详情\"></p>\n<blockquote>\n<p>‘“\\\\bfnrtv</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/7ce330d5a54c7c8ac927771ee7a0540814453.png\" alt=\"NonEscapeCharacter 详情\"></p>\n<ul>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/f3d3a1b2fba86ebd4b8b6ab2959302e610550.png\" alt=\"EscapeCharacter 详情\"></p>\n<blockquote>\n<p>‘“\\\\bfnrtv0-9xu </p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/8c027b4dfef1876ad432fd62b6ecc4a59724.png\" alt=\"LineTerminator 详情\"></p>\n<blockquote>\n<p>\\n\\r\\u2028\\u2029</p>\n</blockquote>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/02a7f707581cb217ab5025d7a48e67e829247.png\" alt=\"LineTerminator 码点\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>CharacterEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/9207083723607a9faa4f0a560599dde17694.png\" alt=\"HexEscapeSequence 详情\"></p>\n</li>\n<li><p><strong>HexEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>\\\\x[0-9a-fA-F]{2}</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/545f52e053421a0e9c5e3b231a96276d10075.png\" alt=\"UnicodeEscapeSequence 详情\"></p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/8bb8c713ee753fd2844aea95e3ecde417620.png\" alt=\"Hex4Digits 详情\"></li>\n</ul>\n</li>\n<li><p><strong>UnicodeEscapeSequence</strong>总结为：</p>\n<blockquote>\n<p> \\\\u[0-9a-fA-F]{4}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>EscapeSequence</strong>总结为：</p>\n<blockquote>\n<p>(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4})</p>\n</blockquote>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bd86a4d39c1ae8d719eca6afbd9dcb147948.png\" alt=\"LineContinuation 详情\"></p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e8b4e35d4653ecb6a0f89d848085f69b14054.png\" alt=\"LineTerminatorSequence 详情\"></li>\n</ul>\n</li>\n<li><p><strong>LineContinuation</strong>总结为：</p>\n<blockquote>\n<p>\\\\\\n\\r\\u\\2028]2029</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>DoubleStringCharacters</strong>总结为：</p>\n<blockquote>\n<p>“(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*”</p>\n</blockquote>\n</li>\n<li><p>SingleStringCharacters</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6d2e2b31ed15050de59907d5537b9e9219247.png\" alt=\"SingleStringCharacters 大纲\"></li>\n</ul>\n</li>\n<li><p><strong>SingleStringCharacters</strong>总结为：</p>\n<blockquote>\n<p>‘(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>StringLiteral</strong>总结为：</p>\n<blockquote>\n<p>(^”(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*”$)|(^’(?:(\\\\(‘“\\\\bfnrtv0-9xu\\n\\r\\u2028\\u2029])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4}))|(\\\\\\n\\r\\u\\2028]2029))*’$)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^<span class=\"string\">\"(?:(\\\\('\"</span>\\\\bfnrtv0<span class=\"number\">-9</span>xu\\n\\\\r\\u2028\\u2029])|(\\x[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">2</span>&#125;)|(\\u[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">4</span>&#125;))|(\\\\\\n\\r\\u\\<span class=\"number\">2028</span>]<span class=\"number\">2029</span>))*<span class=\"string\">\"$)|(^'(?:(\\\\('\"</span>\\\\bfnrtv0<span class=\"number\">-9</span>xu\\n\\\\r\\u2028\\u2029])|(\\x[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">2</span>&#125;)|(\\u[<span class=\"number\">0</span><span class=\"number\">-9</span>a-fA-F]&#123;<span class=\"number\">4</span>&#125;))|(\\\\\\n\\r\\u\\<span class=\"number\">2028</span>]<span class=\"number\">2029</span>))*<span class=\"string\">'$)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"convertNumberToString","date":"2020-04-25T05:48:55.000Z","description":["是的我要折腾一下 Javascript convertNumberToString 了🙆"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 是的我要折腾一下 Javascript convertNumberToString 了🙆\n- [convertStringToNumber 实现](https://ele-peng.github.io/2020/04/24/convertStringToNumber/)\n\n<!-- more -->\n## 实践准备\n- 首先我们依旧需要简单梳理一下我们的实践过程，再根据 [ECMAScript-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm) 标准P61完善实践\n- input: @params: { num } 输入需要转换的number, { radix } 转换的指定基数\n- 对 input-num 的特殊处理\n\t- ![input-num 的特殊处理](http://p1.meituan.net/myvideodistribute/e0405830e24314df04f89a21078cc64198443.png)\n- 简单算法处理\n\t- 获取符号位\n\t\t- \\- 负 显示\n\t\t- \\+ 正 不显示\n\t- 十进制\n\t- 二进制\n\t- 八进制\n\t- 十六进制\n\n- output: return resStr\n\n## 实践过程\n- 经过上面的分析，我们代码可以先写成\n\n\t```javascript\n\t  function convertNumberToString(num) {\n\t    try {\n\t      const formatNum = Number(num) // 处理Number为十进制\n\t      if (isNaN(formatNum)) return 'NaN'\n\t      if (isZero(formatNum)) return '0'\n\t      const sign = getSign(formatNum)\n\t      if (!isFinite(formatNum)) return sign + 'Infinity'\n\t      return convertDecimalNumberToString(formatNum)\n\t    } catch (err) {\n\t      throw new Error(err)\n\t    }\n\t  }\n\t```\n- input number 的特殊处理\n\t- If m is NaN, return the String \"NaN\".\n\t\n\t\t> if (isNaN(formatNum)) return 'NaN'\n\t\n\t- If m is +0 or -0, return the String \"0\".\n\t\t\n\t\t```javascript\n\t\t  if (isZero(formatNum)) return '0'\n\t\t  function isZero(num) {\n\t\t    if (1 / num === Infinity || 1 / num === -Infinity) {\n\t\t      return true\n\t\t    }\n\t\t    return false\n\t\t  }\n\t\t```\n\t- If m is less than zero, return the string-concatenation of \"-\" and ! NumberToString(-m).\n\n\t\t```javascript\n\t\t  const sign = getSign(formatNum)\n\t\t  function getSign(num) {\n\t\t    if (num === -Infinity) {\n\t\t      return \"-\"\n\t\t    } else if (num === Infinity) {\n\t\t      return \"\"\n\t\t    } // 特殊情况 0 前面已经处理\n\t\t    return num / Math.abs(num) === 1 ? \"\" : \"-\"\n\t\t  }\n\t\t```\n\t\n\t- If m is +∞, return the String \"Infinity\".\n\n\t\t> if (!isFinite(formatNum)) return sign + 'Infinity'\n\n- 常规 Decimal Number 处理\n\n\t```javascript\n\t  function convertDecimalNumberToString(num) {\n\t    const radix = 10\n\t    let int = Math.floor(num)\n\t    let float = (num - int) * 100 / 100\n\t    let resInt = ''\n\t    let resFloat = ''\n\t    // 整数部分 取余，除以基数\n\t    while (int > 0) {\n\t      resInt = String(int % radix) + resInt\n\t      int = Math.floor(int / radix)\n\t    }\n\t    if (float) {\n\t      resFloat = '.'\n\t      // 小数部分，乘以基数，取整\n\t      while (float > 0) {\n\t        resFloat = resFloat + Math.floor(float * radix)\n\t        float -= Math.floor(float * radix)\n\t      }\n\t    }\n\t    return resInt + resFloat\n\t  }\n\t```\n\t\n## 测试用例\n\n```javascript\n  console.log(convertNumberToString(-Infinity))\n  console.log('toString', -Infinity.toString())\n  console.log(convertNumberToString(+Infinity))\n  console.log('toString', +Infinity.toString())\n  console.log(convertNumberToString(120.11112))\n  console.log('toString', 120.11112.toString())\n  console.log(convertNumberToString(120))\n  console.log('toString', (120).toString())\n```\n- 测试截图\n\t- ![测试截图](http://p0.meituan.net/myvideodistribute/b741d6a87bab9c52f01871781745689124911.png)\n\n## 写在后面\n- 可以看出，我们写的 converNumbertoString 遇到浮点数，就失灵了，有想到说 用 toString，然后正则匹配出小数点后面的浮点数，舍入相应位数，但是这样，就用到了 toString 方法，似乎与我的最初想法实现 convertNumbertToString 死锁了 🙃\n- 大家有其他的不用 toString 实践，欢迎评论告诉我呀~\n- [代码地址](https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertNumberToString.html)\n- 祝大家多多发财\n","source":"_posts/convertNumberToString.md","raw":"---\ntitle: convertNumberToString\ndate: 2020-04-25 13:48:55\ntags: \n- 前端概念\n- 算法\ncategories:\n- 前端概念\ndescription:\n- 是的我要折腾一下 Javascript convertNumberToString 了🙆\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 是的我要折腾一下 Javascript convertNumberToString 了🙆\n- [convertStringToNumber 实现](https://ele-peng.github.io/2020/04/24/convertStringToNumber/)\n\n<!-- more -->\n## 实践准备\n- 首先我们依旧需要简单梳理一下我们的实践过程，再根据 [ECMAScript-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm) 标准P61完善实践\n- input: @params: { num } 输入需要转换的number, { radix } 转换的指定基数\n- 对 input-num 的特殊处理\n\t- ![input-num 的特殊处理](http://p1.meituan.net/myvideodistribute/e0405830e24314df04f89a21078cc64198443.png)\n- 简单算法处理\n\t- 获取符号位\n\t\t- \\- 负 显示\n\t\t- \\+ 正 不显示\n\t- 十进制\n\t- 二进制\n\t- 八进制\n\t- 十六进制\n\n- output: return resStr\n\n## 实践过程\n- 经过上面的分析，我们代码可以先写成\n\n\t```javascript\n\t  function convertNumberToString(num) {\n\t    try {\n\t      const formatNum = Number(num) // 处理Number为十进制\n\t      if (isNaN(formatNum)) return 'NaN'\n\t      if (isZero(formatNum)) return '0'\n\t      const sign = getSign(formatNum)\n\t      if (!isFinite(formatNum)) return sign + 'Infinity'\n\t      return convertDecimalNumberToString(formatNum)\n\t    } catch (err) {\n\t      throw new Error(err)\n\t    }\n\t  }\n\t```\n- input number 的特殊处理\n\t- If m is NaN, return the String \"NaN\".\n\t\n\t\t> if (isNaN(formatNum)) return 'NaN'\n\t\n\t- If m is +0 or -0, return the String \"0\".\n\t\t\n\t\t```javascript\n\t\t  if (isZero(formatNum)) return '0'\n\t\t  function isZero(num) {\n\t\t    if (1 / num === Infinity || 1 / num === -Infinity) {\n\t\t      return true\n\t\t    }\n\t\t    return false\n\t\t  }\n\t\t```\n\t- If m is less than zero, return the string-concatenation of \"-\" and ! NumberToString(-m).\n\n\t\t```javascript\n\t\t  const sign = getSign(formatNum)\n\t\t  function getSign(num) {\n\t\t    if (num === -Infinity) {\n\t\t      return \"-\"\n\t\t    } else if (num === Infinity) {\n\t\t      return \"\"\n\t\t    } // 特殊情况 0 前面已经处理\n\t\t    return num / Math.abs(num) === 1 ? \"\" : \"-\"\n\t\t  }\n\t\t```\n\t\n\t- If m is +∞, return the String \"Infinity\".\n\n\t\t> if (!isFinite(formatNum)) return sign + 'Infinity'\n\n- 常规 Decimal Number 处理\n\n\t```javascript\n\t  function convertDecimalNumberToString(num) {\n\t    const radix = 10\n\t    let int = Math.floor(num)\n\t    let float = (num - int) * 100 / 100\n\t    let resInt = ''\n\t    let resFloat = ''\n\t    // 整数部分 取余，除以基数\n\t    while (int > 0) {\n\t      resInt = String(int % radix) + resInt\n\t      int = Math.floor(int / radix)\n\t    }\n\t    if (float) {\n\t      resFloat = '.'\n\t      // 小数部分，乘以基数，取整\n\t      while (float > 0) {\n\t        resFloat = resFloat + Math.floor(float * radix)\n\t        float -= Math.floor(float * radix)\n\t      }\n\t    }\n\t    return resInt + resFloat\n\t  }\n\t```\n\t\n## 测试用例\n\n```javascript\n  console.log(convertNumberToString(-Infinity))\n  console.log('toString', -Infinity.toString())\n  console.log(convertNumberToString(+Infinity))\n  console.log('toString', +Infinity.toString())\n  console.log(convertNumberToString(120.11112))\n  console.log('toString', 120.11112.toString())\n  console.log(convertNumberToString(120))\n  console.log('toString', (120).toString())\n```\n- 测试截图\n\t- ![测试截图](http://p0.meituan.net/myvideodistribute/b741d6a87bab9c52f01871781745689124911.png)\n\n## 写在后面\n- 可以看出，我们写的 converNumbertoString 遇到浮点数，就失灵了，有想到说 用 toString，然后正则匹配出小数点后面的浮点数，舍入相应位数，但是这样，就用到了 toString 方法，似乎与我的最初想法实现 convertNumbertToString 死锁了 🙃\n- 大家有其他的不用 toString 实践，欢迎评论告诉我呀~\n- [代码地址](https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertNumberToString.html)\n- 祝大家多多发财\n","slug":"convertNumberToString","published":1,"updated":"2020-04-27T03:59:35.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w5000h1wp3apxbhmox","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>是的我要折腾一下 Javascript convertNumberToString 了🙆</li>\n<li><a href=\"https://ele-peng.github.io/2020/04/24/convertStringToNumber/\" target=\"_blank\" rel=\"noopener\">convertStringToNumber 实现</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><ul>\n<li><p>首先我们依旧需要简单梳理一下我们的实践过程，再根据 <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMAScript-262</a> 标准P61完善实践</p>\n</li>\n<li><p>input: @params: { num } 输入需要转换的number, { radix } 转换的指定基数</p>\n</li>\n<li><p>对 input-num 的特殊处理</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e0405830e24314df04f89a21078cc64198443.png\" alt=\"input-num 的特殊处理\"></li>\n</ul>\n</li>\n<li><p>简单算法处理</p>\n<ul>\n<li>获取符号位<ul>\n<li>- 负 显示</li>\n<li>+ 正 不显示</li>\n</ul>\n</li>\n<li>十进制</li>\n<li>二进制</li>\n<li>八进制</li>\n<li>十六进制</li>\n</ul>\n</li>\n<li><p>output: return resStr</p>\n</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p>经过上面的分析，我们代码可以先写成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertNumberToString</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formatNum = <span class=\"built_in\">Number</span>(num) <span class=\"comment\">// 处理Number为十进制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'NaN'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isZero(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'0'</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sign = getSign(formatNum)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isFinite</span>(formatNum)) <span class=\"keyword\">return</span> sign + <span class=\"string\">'Infinity'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> convertDecimalNumberToString(formatNum)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>input number 的特殊处理</p>\n<ul>\n<li><p>If m is NaN, return the String “NaN”.</p>\n<blockquote>\n<p>if (isNaN(formatNum)) return ‘NaN’</p>\n</blockquote>\n</li>\n<li><p>If m is +0 or -0, return the String “0”.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isZero(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isZero</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">1</span> / num === <span class=\"literal\">Infinity</span> || <span class=\"number\">1</span> / num === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>If m is less than zero, return the string-concatenation of “-“ and ! NumberToString(-m).</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sign = getSign(formatNum)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// 特殊情况 0 前面已经处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num / <span class=\"built_in\">Math</span>.abs(num) === <span class=\"number\">1</span> ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"-\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If m is +∞, return the String “Infinity”.</p>\n<blockquote>\n<p>if (!isFinite(formatNum)) return sign + ‘Infinity’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>常规 Decimal Number 处理</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertDecimalNumberToString</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> int = <span class=\"built_in\">Math</span>.floor(num)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> float = (num - int) * <span class=\"number\">100</span> / <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resInt = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resFloat = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"comment\">// 整数部分 取余，除以基数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (int &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    resInt = <span class=\"built_in\">String</span>(int % radix) + resInt</span><br><span class=\"line\">    int = <span class=\"built_in\">Math</span>.floor(int / radix)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (float) &#123;</span><br><span class=\"line\">    resFloat = <span class=\"string\">'.'</span></span><br><span class=\"line\">    <span class=\"comment\">// 小数部分，乘以基数，取整</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (float &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      resFloat = resFloat + <span class=\"built_in\">Math</span>.floor(float * radix)</span><br><span class=\"line\">      float -= <span class=\"built_in\">Math</span>.floor(float * radix)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resInt + resFloat</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(-<span class=\"literal\">Infinity</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, -<span class=\"literal\">Infinity</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(+<span class=\"literal\">Infinity</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, +<span class=\"literal\">Infinity</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(<span class=\"number\">120.11112</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, <span class=\"number\">120.11112</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(<span class=\"number\">120</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, (<span class=\"number\">120</span>).toString())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试截图<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b741d6a87bab9c52f01871781745689124911.png\" alt=\"测试截图\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>可以看出，我们写的 converNumbertoString 遇到浮点数，就失灵了，有想到说 用 toString，然后正则匹配出小数点后面的浮点数，舍入相应位数，但是这样，就用到了 toString 方法，似乎与我的最初想法实现 convertNumbertToString 死锁了 🙃</li>\n<li>大家有其他的不用 toString 实践，欢迎评论告诉我呀~</li>\n<li><a href=\"https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertNumberToString.html\" target=\"_blank\" rel=\"noopener\">代码地址</a></li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>是的我要折腾一下 Javascript convertNumberToString 了🙆</li>\n<li><a href=\"https://ele-peng.github.io/2020/04/24/convertStringToNumber/\" target=\"_blank\" rel=\"noopener\">convertStringToNumber 实现</a></li>\n</ul>","more":"<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><ul>\n<li><p>首先我们依旧需要简单梳理一下我们的实践过程，再根据 <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMAScript-262</a> 标准P61完善实践</p>\n</li>\n<li><p>input: @params: { num } 输入需要转换的number, { radix } 转换的指定基数</p>\n</li>\n<li><p>对 input-num 的特殊处理</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e0405830e24314df04f89a21078cc64198443.png\" alt=\"input-num 的特殊处理\"></li>\n</ul>\n</li>\n<li><p>简单算法处理</p>\n<ul>\n<li>获取符号位<ul>\n<li>- 负 显示</li>\n<li>+ 正 不显示</li>\n</ul>\n</li>\n<li>十进制</li>\n<li>二进制</li>\n<li>八进制</li>\n<li>十六进制</li>\n</ul>\n</li>\n<li><p>output: return resStr</p>\n</li>\n</ul>\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><ul>\n<li><p>经过上面的分析，我们代码可以先写成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertNumberToString</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formatNum = <span class=\"built_in\">Number</span>(num) <span class=\"comment\">// 处理Number为十进制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'NaN'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isZero(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'0'</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sign = getSign(formatNum)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isFinite</span>(formatNum)) <span class=\"keyword\">return</span> sign + <span class=\"string\">'Infinity'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> convertDecimalNumberToString(formatNum)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>input number 的特殊处理</p>\n<ul>\n<li><p>If m is NaN, return the String “NaN”.</p>\n<blockquote>\n<p>if (isNaN(formatNum)) return ‘NaN’</p>\n</blockquote>\n</li>\n<li><p>If m is +0 or -0, return the String “0”.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isZero(formatNum)) <span class=\"keyword\">return</span> <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isZero</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">1</span> / num === <span class=\"literal\">Infinity</span> || <span class=\"number\">1</span> / num === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>If m is less than zero, return the string-concatenation of “-“ and ! NumberToString(-m).</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sign = getSign(formatNum)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// 特殊情况 0 前面已经处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num / <span class=\"built_in\">Math</span>.abs(num) === <span class=\"number\">1</span> ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"-\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If m is +∞, return the String “Infinity”.</p>\n<blockquote>\n<p>if (!isFinite(formatNum)) return sign + ‘Infinity’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>常规 Decimal Number 处理</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertDecimalNumberToString</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> int = <span class=\"built_in\">Math</span>.floor(num)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> float = (num - int) * <span class=\"number\">100</span> / <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resInt = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resFloat = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"comment\">// 整数部分 取余，除以基数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (int &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    resInt = <span class=\"built_in\">String</span>(int % radix) + resInt</span><br><span class=\"line\">    int = <span class=\"built_in\">Math</span>.floor(int / radix)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (float) &#123;</span><br><span class=\"line\">    resFloat = <span class=\"string\">'.'</span></span><br><span class=\"line\">    <span class=\"comment\">// 小数部分，乘以基数，取整</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (float &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      resFloat = resFloat + <span class=\"built_in\">Math</span>.floor(float * radix)</span><br><span class=\"line\">      float -= <span class=\"built_in\">Math</span>.floor(float * radix)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resInt + resFloat</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(-<span class=\"literal\">Infinity</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, -<span class=\"literal\">Infinity</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(+<span class=\"literal\">Infinity</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, +<span class=\"literal\">Infinity</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(<span class=\"number\">120.11112</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, <span class=\"number\">120.11112</span>.toString())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(convertNumberToString(<span class=\"number\">120</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>, (<span class=\"number\">120</span>).toString())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试截图<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b741d6a87bab9c52f01871781745689124911.png\" alt=\"测试截图\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>可以看出，我们写的 converNumbertoString 遇到浮点数，就失灵了，有想到说 用 toString，然后正则匹配出小数点后面的浮点数，舍入相应位数，但是这样，就用到了 toString 方法，似乎与我的最初想法实现 convertNumbertToString 死锁了 🙃</li>\n<li>大家有其他的不用 toString 实践，欢迎评论告诉我呀~</li>\n<li><a href=\"https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertNumberToString.html\" target=\"_blank\" rel=\"noopener\">代码地址</a></li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Toy-Browser-DAY5","date":"2020-05-24T09:21:06.000Z","description":["浏览器 -- toy-browser"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 最末篇：浏览器的绘制，完结 toy-browser ✊\n- ![DOM with Position](http://p0.meituan.net/myvideodistribute/5c3903a71266e72d2e3f21a276c0efad94997.png)\n\n<!-- more -->\n\n## 第一步：绘制单个元素\n- 绘制需要依赖一个图形环境\n- 这里采用 npm package -- images\n- 绘制先在一个 viewport 上进行\n- 暂时只处理绘制属性：background-color\n- render1.js\n\n\t```javascript\n\tconst images = require('images')\n\n\tfunction render(viewport, element) {\n\t  if (element.style) {\n\t    const img = images(element.style.width, element.style.height)\n\t\n\t    if (element.style[\"background-color\"]) {\n\t      let color = element.style[\"background-color\"] || \"rgb(0,0,0)\"\n\t      color.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/)\n\t      // .fill(red, green, blue[, alpha])\n\t      img.fill(Number(RegExp.$1), Number(RegExp.$2), Number(RegExp.$3), 1)\n\t      viewport.draw(img, element.style.left || 0, element.style.top || 0)\n\t    }\n\t  }\n\t}\n\t\n\tmodule.exports = render\n\t```\n\t\n- client.js\n\t\n\t```javascript\n\t\n\t// ... some code\n\t\n\tvoid async function () {\n\t\n\t  // ... some code\n\t\t\n\t  let dom = parser.parseHTML(response.body)\n\t\n\t  let viewport = images(800, 600)\n\t\n\t  // 绘制 cls1 元素点，rgb(0, 255, 0)\n\t  render(viewport, dom.children[0].children[3].children[1].children[3])\n\t\n\t  viewport.save(\"viewport.jpg\")\n\t}()\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/c8641c2200150079f9f29c91b1102ac83945.png)\n\n- [render1.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/render1.js)\n\n## 第二步：绘制 DOM\n- 递归调用子元素的绘制方法完成 DOM 树的构建\n- render2.js\n\n\t```javascript\n\tconst images = require('images')\n\n\tfunction render(viewport, element) {\n\t  if (element.style) {\n\t    \n\t    // some code\n\t    \n\t  }\n\t\n\t  if (element.children) {\n\t    for (let child of element.children) {\n\t      render(viewport, child)\n\t    }\n\t  }\n\t  \n\t}\n\t\n\tmodule.exports = render\n\t```\n- 忽略一些不需要绘制的节点\n- 实际浏览器中，文字绘制是难点，需要依赖字体库，这里忽略\n- 实际浏览器中，还会对一些图层做 compositing，这里忽略\n- server.js 将response Content-Type 设置为 text/html\n\n\t```javascript\n\t\n\t// some code\n\t\n\tres.writeHead(200, { 'Content-Type': 'text/html' });\n\t\n\t// some code\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/b04d62bb5f32ee07cb640e0b97014fb147655.png)\n\n\t\n- [render2.js 完整代码 点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/render2.js)\n\n\n## 写在后面\n- [toy-browser 完整代码 点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财\n\n","source":"_posts/Toy-Browser-DAY5.md","raw":"---\ntitle: Toy-Browser-DAY5\ndate: 2020-05-24 17:21:06\ntags:\n- 浏览器\ncategories:\n- 浏览器\ndescription:\n- 浏览器 -- toy-browser\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 最末篇：浏览器的绘制，完结 toy-browser ✊\n- ![DOM with Position](http://p0.meituan.net/myvideodistribute/5c3903a71266e72d2e3f21a276c0efad94997.png)\n\n<!-- more -->\n\n## 第一步：绘制单个元素\n- 绘制需要依赖一个图形环境\n- 这里采用 npm package -- images\n- 绘制先在一个 viewport 上进行\n- 暂时只处理绘制属性：background-color\n- render1.js\n\n\t```javascript\n\tconst images = require('images')\n\n\tfunction render(viewport, element) {\n\t  if (element.style) {\n\t    const img = images(element.style.width, element.style.height)\n\t\n\t    if (element.style[\"background-color\"]) {\n\t      let color = element.style[\"background-color\"] || \"rgb(0,0,0)\"\n\t      color.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/)\n\t      // .fill(red, green, blue[, alpha])\n\t      img.fill(Number(RegExp.$1), Number(RegExp.$2), Number(RegExp.$3), 1)\n\t      viewport.draw(img, element.style.left || 0, element.style.top || 0)\n\t    }\n\t  }\n\t}\n\t\n\tmodule.exports = render\n\t```\n\t\n- client.js\n\t\n\t```javascript\n\t\n\t// ... some code\n\t\n\tvoid async function () {\n\t\n\t  // ... some code\n\t\t\n\t  let dom = parser.parseHTML(response.body)\n\t\n\t  let viewport = images(800, 600)\n\t\n\t  // 绘制 cls1 元素点，rgb(0, 255, 0)\n\t  render(viewport, dom.children[0].children[3].children[1].children[3])\n\t\n\t  viewport.save(\"viewport.jpg\")\n\t}()\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/c8641c2200150079f9f29c91b1102ac83945.png)\n\n- [render1.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/render1.js)\n\n## 第二步：绘制 DOM\n- 递归调用子元素的绘制方法完成 DOM 树的构建\n- render2.js\n\n\t```javascript\n\tconst images = require('images')\n\n\tfunction render(viewport, element) {\n\t  if (element.style) {\n\t    \n\t    // some code\n\t    \n\t  }\n\t\n\t  if (element.children) {\n\t    for (let child of element.children) {\n\t      render(viewport, child)\n\t    }\n\t  }\n\t  \n\t}\n\t\n\tmodule.exports = render\n\t```\n- 忽略一些不需要绘制的节点\n- 实际浏览器中，文字绘制是难点，需要依赖字体库，这里忽略\n- 实际浏览器中，还会对一些图层做 compositing，这里忽略\n- server.js 将response Content-Type 设置为 text/html\n\n\t```javascript\n\t\n\t// some code\n\t\n\tres.writeHead(200, { 'Content-Type': 'text/html' });\n\t\n\t// some code\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/b04d62bb5f32ee07cb640e0b97014fb147655.png)\n\n\t\n- [render2.js 完整代码 点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/render2.js)\n\n\n## 写在后面\n- [toy-browser 完整代码 点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财\n\n","slug":"Toy-Browser-DAY5","published":1,"updated":"2020-05-26T15:17:54.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w7000l1wp3ewsob9en","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>最末篇：浏览器的绘制，完结 toy-browser ✊</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5c3903a71266e72d2e3f21a276c0efad94997.png\" alt=\"DOM with Position\"></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"第一步：绘制单个元素\"><a href=\"#第一步：绘制单个元素\" class=\"headerlink\" title=\"第一步：绘制单个元素\"></a>第一步：绘制单个元素</h2><ul>\n<li><p>绘制需要依赖一个图形环境</p>\n</li>\n<li><p>这里采用 npm package – images</p>\n</li>\n<li><p>绘制先在一个 viewport 上进行</p>\n</li>\n<li><p>暂时只处理绘制属性：background-color</p>\n</li>\n<li><p>render1.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">require</span>(<span class=\"string\">'images'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">viewport, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.style) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = images(element.style.width, element.style.height)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.style[<span class=\"string\">\"background-color\"</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> color = element.style[<span class=\"string\">\"background-color\"</span>] || <span class=\"string\">\"rgb(0,0,0)\"</span></span><br><span class=\"line\">      color.match(<span class=\"regexp\">/rgb\\((\\d+),(\\d+),(\\d+)\\)/</span>)</span><br><span class=\"line\">      <span class=\"comment\">// .fill(red, green, blue[, alpha])</span></span><br><span class=\"line\">      img.fill(<span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>), <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>), <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\">      viewport.draw(img, element.style.left || <span class=\"number\">0</span>, element.style.top || <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = render</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>client.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dom = parser.parseHTML(response.body)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> viewport = images(<span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绘制 cls1 元素点，rgb(0, 255, 0)</span></span><br><span class=\"line\">  render(viewport, dom.children[<span class=\"number\">0</span>].children[<span class=\"number\">3</span>].children[<span class=\"number\">1</span>].children[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  viewport.save(<span class=\"string\">\"viewport.jpg\"</span>)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c8641c2200150079f9f29c91b1102ac83945.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/render1.js\" target=\"_blank\" rel=\"noopener\">render1.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h2 id=\"第二步：绘制-DOM\"><a href=\"#第二步：绘制-DOM\" class=\"headerlink\" title=\"第二步：绘制 DOM\"></a>第二步：绘制 DOM</h2><ul>\n<li><p>递归调用子元素的绘制方法完成 DOM 树的构建</p>\n</li>\n<li><p>render2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">require</span>(<span class=\"string\">'images'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">viewport, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.style) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.children) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> child <span class=\"keyword\">of</span> element.children) &#123;</span><br><span class=\"line\">      render(viewport, child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = render</span><br></pre></td></tr></table></figure></li>\n<li><p>忽略一些不需要绘制的节点</p>\n</li>\n<li><p>实际浏览器中，文字绘制是难点，需要依赖字体库，这里忽略</p>\n</li>\n<li><p>实际浏览器中，还会对一些图层做 compositing，这里忽略</p>\n</li>\n<li><p>server.js 将response Content-Type 设置为 text/html</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some code</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b04d62bb5f32ee07cb640e0b97014fb147655.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/render2.js\" target=\"_blank\" rel=\"noopener\">render2.js 完整代码 点击一下</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">toy-browser 完整代码 点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>最末篇：浏览器的绘制，完结 toy-browser ✊</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5c3903a71266e72d2e3f21a276c0efad94997.png\" alt=\"DOM with Position\"></li>\n</ul>","more":"<h2 id=\"第一步：绘制单个元素\"><a href=\"#第一步：绘制单个元素\" class=\"headerlink\" title=\"第一步：绘制单个元素\"></a>第一步：绘制单个元素</h2><ul>\n<li><p>绘制需要依赖一个图形环境</p>\n</li>\n<li><p>这里采用 npm package – images</p>\n</li>\n<li><p>绘制先在一个 viewport 上进行</p>\n</li>\n<li><p>暂时只处理绘制属性：background-color</p>\n</li>\n<li><p>render1.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">require</span>(<span class=\"string\">'images'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">viewport, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.style) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = images(element.style.width, element.style.height)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.style[<span class=\"string\">\"background-color\"</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> color = element.style[<span class=\"string\">\"background-color\"</span>] || <span class=\"string\">\"rgb(0,0,0)\"</span></span><br><span class=\"line\">      color.match(<span class=\"regexp\">/rgb\\((\\d+),(\\d+),(\\d+)\\)/</span>)</span><br><span class=\"line\">      <span class=\"comment\">// .fill(red, green, blue[, alpha])</span></span><br><span class=\"line\">      img.fill(<span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>), <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>), <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\">      viewport.draw(img, element.style.left || <span class=\"number\">0</span>, element.style.top || <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = render</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>client.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dom = parser.parseHTML(response.body)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> viewport = images(<span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绘制 cls1 元素点，rgb(0, 255, 0)</span></span><br><span class=\"line\">  render(viewport, dom.children[<span class=\"number\">0</span>].children[<span class=\"number\">3</span>].children[<span class=\"number\">1</span>].children[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  viewport.save(<span class=\"string\">\"viewport.jpg\"</span>)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c8641c2200150079f9f29c91b1102ac83945.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/render1.js\" target=\"_blank\" rel=\"noopener\">render1.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h2 id=\"第二步：绘制-DOM\"><a href=\"#第二步：绘制-DOM\" class=\"headerlink\" title=\"第二步：绘制 DOM\"></a>第二步：绘制 DOM</h2><ul>\n<li><p>递归调用子元素的绘制方法完成 DOM 树的构建</p>\n</li>\n<li><p>render2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> images = <span class=\"built_in\">require</span>(<span class=\"string\">'images'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">viewport, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.style) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.children) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> child <span class=\"keyword\">of</span> element.children) &#123;</span><br><span class=\"line\">      render(viewport, child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = render</span><br></pre></td></tr></table></figure></li>\n<li><p>忽略一些不需要绘制的节点</p>\n</li>\n<li><p>实际浏览器中，文字绘制是难点，需要依赖字体库，这里忽略</p>\n</li>\n<li><p>实际浏览器中，还会对一些图层做 compositing，这里忽略</p>\n</li>\n<li><p>server.js 将response Content-Type 设置为 text/html</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some code</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b04d62bb5f32ee07cb640e0b97014fb147655.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/render2.js\" target=\"_blank\" rel=\"noopener\">render2.js 完整代码 点击一下</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">toy-browser 完整代码 点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"【未完】react-hooks","date":"2020-04-13T01:37:12.000Z","description":["记录学习 react-hooks 过程中的思考🤔"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录学习 react-hooks 过程中的思考🤔\n<!-- more -->\n\n## 主要概念\n- react 16.8 推出\n- 能够在函数组件内部使用 state 和组件生命周期方法\n- 定义组件\n\t- class\n\t- F(x) + react-hooks(灵活、可测试、代码复用)\n- 什么是 hooks ?\n\t- 允许你hook一些业务逻辑到组件内部 state 和 render 函数上\n\t- hooks 允许我们去操作这个内部state了\n\t- 更好的去关注分离和代码复用(传统 HOC，函数作为子组件)，将相关代码\n- Why Hooks?\n\t- Mixins\n\t\t- 命名空间耦合\n\t\t- 静态检查\n\t\t- 组件参数不清晰\n\t- HOC\n\t\t- 解决命名空间解耦\n\t\t- 对 Class 进行静态检查\n\t\t- 组件参数不清晰\n\t\t- 组件实例增加\n\t- Hooks\n\t\t- 命名空间解耦\n\t\t- 静态检查\n\t\t- 组件参数清晰\n\t\t- 单组件实例\n- 三个基础 hooks\n\t- useState\n\t\t- 允许操作组件的内部状态\n\t\t- 如果要根据之前的状态决定下一个状态\n\t\t\t- 参数可以写成一个函数，函数接受的参数就是之前的状态，prevState => nowState\n\t- useEffect\n\t\t- 使用副作用\n\t\t- 指定一个函数在每次render完，去执行什么样的逻辑\n\t\t- 第二个参数，传入一个数组，这个数组是当前闭包中的任何变量\n\t\t\t- 只有当数组中的发生变化，才会调用回调函数\n\t\t\t- 函数组件内部，很容易监听props变化\n\t\t- 可以在 useEffect 回调函数中，返回一个函数，作为组建销毁时的一个回调，允许执行一些资源回收的逻辑\n\t\t- **useCallback**\n\t\t\t- 将回调函数进行一个缓存，只有在需要时才会返回一个新的事件处理函数\n\t\t\t- useEffect 和 useCallback，现在都有一个约定，回调函数内如果使用了外部闭包中的变量，那么都应该在第二个参数中进行声明\n\t\t\t\t- eslint-plugin-react-hooks\n\t\t\t\t\t- \"react-hooks/rules-of-hooks\": \"error\"\n\t\t\t\t\t\t- 确保对hooks的调用，都发生在顶层作用域\n\t\t\t\t\t- \"react-hooks/exhaustive-deps\": \"warn\"\n\t\t\t\t\t\t- 必须提供 useEffect 和 useCallback 等hooks 的第二个参数，声明回调函数依赖的变量\n\t- useContext\n- 自定义 hooks\n- 额外 hooks\n\t- useReducer\n\t\t- [简单项目：使用 Hooks：useReducer 代替 Redux](https://fed.taobao.org/blog/taofed/do71ct/use-the-react-hooks-instead-of-the-redux/?spm=taofed.bloginfo.blog.3.707f5ac8tD5Gxz)\n\t\t\n\t\t\t```javascript\n\t\t\timport providers from './providers';\n\t\t\t\n\t\t\t// 数据 Provider 组合器\n\t\t\tconst ProvidersComposer = (props) => (\n\t\t\t  props.providers.reduceRight((children, Parent) => (\n\t\t\t    <Parent>{children}</Parent>\n\t\t\t  ), props.children)\n\t\t\t);\n\t\t\t\n\t\t\tconst Provider = (props) => {\n\t\t\t  return (\n\t\t\t    <ProvidersComposer providers={providers}>\n\t\t\t      {props.children}\n\t\t\t    </ProvidersComposer>\n\t\t\t  );\n\t\t\t};\n\t\t\t\n\t\t\texport default Provider;\n\t\t\t```\n\t- useCallback\n\t- useMemo\n\t- useRef\n\t- useImperativeHandle\n\t- useLayoutEffect\n\t- useDebugValue\n\n\t\n## react-hooks 改写 TO DO Lists\n\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/react-hooks.md","raw":"---\ntitle: 【未完】react-hooks\ndate: 2020-04-13 09:37:12\ntags: \n- react\ncategories:\n- react\ndescription:\n- 记录学习 react-hooks 过程中的思考🤔\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录学习 react-hooks 过程中的思考🤔\n<!-- more -->\n\n## 主要概念\n- react 16.8 推出\n- 能够在函数组件内部使用 state 和组件生命周期方法\n- 定义组件\n\t- class\n\t- F(x) + react-hooks(灵活、可测试、代码复用)\n- 什么是 hooks ?\n\t- 允许你hook一些业务逻辑到组件内部 state 和 render 函数上\n\t- hooks 允许我们去操作这个内部state了\n\t- 更好的去关注分离和代码复用(传统 HOC，函数作为子组件)，将相关代码\n- Why Hooks?\n\t- Mixins\n\t\t- 命名空间耦合\n\t\t- 静态检查\n\t\t- 组件参数不清晰\n\t- HOC\n\t\t- 解决命名空间解耦\n\t\t- 对 Class 进行静态检查\n\t\t- 组件参数不清晰\n\t\t- 组件实例增加\n\t- Hooks\n\t\t- 命名空间解耦\n\t\t- 静态检查\n\t\t- 组件参数清晰\n\t\t- 单组件实例\n- 三个基础 hooks\n\t- useState\n\t\t- 允许操作组件的内部状态\n\t\t- 如果要根据之前的状态决定下一个状态\n\t\t\t- 参数可以写成一个函数，函数接受的参数就是之前的状态，prevState => nowState\n\t- useEffect\n\t\t- 使用副作用\n\t\t- 指定一个函数在每次render完，去执行什么样的逻辑\n\t\t- 第二个参数，传入一个数组，这个数组是当前闭包中的任何变量\n\t\t\t- 只有当数组中的发生变化，才会调用回调函数\n\t\t\t- 函数组件内部，很容易监听props变化\n\t\t- 可以在 useEffect 回调函数中，返回一个函数，作为组建销毁时的一个回调，允许执行一些资源回收的逻辑\n\t\t- **useCallback**\n\t\t\t- 将回调函数进行一个缓存，只有在需要时才会返回一个新的事件处理函数\n\t\t\t- useEffect 和 useCallback，现在都有一个约定，回调函数内如果使用了外部闭包中的变量，那么都应该在第二个参数中进行声明\n\t\t\t\t- eslint-plugin-react-hooks\n\t\t\t\t\t- \"react-hooks/rules-of-hooks\": \"error\"\n\t\t\t\t\t\t- 确保对hooks的调用，都发生在顶层作用域\n\t\t\t\t\t- \"react-hooks/exhaustive-deps\": \"warn\"\n\t\t\t\t\t\t- 必须提供 useEffect 和 useCallback 等hooks 的第二个参数，声明回调函数依赖的变量\n\t- useContext\n- 自定义 hooks\n- 额外 hooks\n\t- useReducer\n\t\t- [简单项目：使用 Hooks：useReducer 代替 Redux](https://fed.taobao.org/blog/taofed/do71ct/use-the-react-hooks-instead-of-the-redux/?spm=taofed.bloginfo.blog.3.707f5ac8tD5Gxz)\n\t\t\n\t\t\t```javascript\n\t\t\timport providers from './providers';\n\t\t\t\n\t\t\t// 数据 Provider 组合器\n\t\t\tconst ProvidersComposer = (props) => (\n\t\t\t  props.providers.reduceRight((children, Parent) => (\n\t\t\t    <Parent>{children}</Parent>\n\t\t\t  ), props.children)\n\t\t\t);\n\t\t\t\n\t\t\tconst Provider = (props) => {\n\t\t\t  return (\n\t\t\t    <ProvidersComposer providers={providers}>\n\t\t\t      {props.children}\n\t\t\t    </ProvidersComposer>\n\t\t\t  );\n\t\t\t};\n\t\t\t\n\t\t\texport default Provider;\n\t\t\t```\n\t- useCallback\n\t- useMemo\n\t- useRef\n\t- useImperativeHandle\n\t- useLayoutEffect\n\t- useDebugValue\n\n\t\n## react-hooks 改写 TO DO Lists\n\n\n## 写在后面\n- 祝大家多多发财\n","slug":"react-hooks","published":1,"updated":"2020-04-26T11:02:18.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1w8000n1wp3h3mua3rl","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录学习 react-hooks 过程中的思考🤔<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li><p>react 16.8 推出</p>\n</li>\n<li><p>能够在函数组件内部使用 state 和组件生命周期方法</p>\n</li>\n<li><p>定义组件</p>\n<ul>\n<li>class</li>\n<li>F(x) + react-hooks(灵活、可测试、代码复用)</li>\n</ul>\n</li>\n<li><p>什么是 hooks ?</p>\n<ul>\n<li>允许你hook一些业务逻辑到组件内部 state 和 render 函数上</li>\n<li>hooks 允许我们去操作这个内部state了</li>\n<li>更好的去关注分离和代码复用(传统 HOC，函数作为子组件)，将相关代码</li>\n</ul>\n</li>\n<li><p>Why Hooks?</p>\n<ul>\n<li>Mixins<ul>\n<li>命名空间耦合</li>\n<li>静态检查</li>\n<li>组件参数不清晰</li>\n</ul>\n</li>\n<li>HOC<ul>\n<li>解决命名空间解耦</li>\n<li>对 Class 进行静态检查</li>\n<li>组件参数不清晰</li>\n<li>组件实例增加</li>\n</ul>\n</li>\n<li>Hooks<ul>\n<li>命名空间解耦</li>\n<li>静态检查</li>\n<li>组件参数清晰</li>\n<li>单组件实例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>三个基础 hooks</p>\n<ul>\n<li>useState<ul>\n<li>允许操作组件的内部状态</li>\n<li>如果要根据之前的状态决定下一个状态<ul>\n<li>参数可以写成一个函数，函数接受的参数就是之前的状态，prevState =&gt; nowState</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>useEffect<ul>\n<li>使用副作用</li>\n<li>指定一个函数在每次render完，去执行什么样的逻辑</li>\n<li>第二个参数，传入一个数组，这个数组是当前闭包中的任何变量<ul>\n<li>只有当数组中的发生变化，才会调用回调函数</li>\n<li>函数组件内部，很容易监听props变化</li>\n</ul>\n</li>\n<li>可以在 useEffect 回调函数中，返回一个函数，作为组建销毁时的一个回调，允许执行一些资源回收的逻辑</li>\n<li><strong>useCallback</strong><ul>\n<li>将回调函数进行一个缓存，只有在需要时才会返回一个新的事件处理函数</li>\n<li>useEffect 和 useCallback，现在都有一个约定，回调函数内如果使用了外部闭包中的变量，那么都应该在第二个参数中进行声明<ul>\n<li>eslint-plugin-react-hooks<ul>\n<li>“react-hooks/rules-of-hooks”: “error”<ul>\n<li>确保对hooks的调用，都发生在顶层作用域</li>\n</ul>\n</li>\n<li>“react-hooks/exhaustive-deps”: “warn”<ul>\n<li>必须提供 useEffect 和 useCallback 等hooks 的第二个参数，声明回调函数依赖的变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>useContext</li>\n</ul>\n</li>\n<li><p>自定义 hooks</p>\n</li>\n<li><p>额外 hooks</p>\n<ul>\n<li><p>useReducer</p>\n<ul>\n<li><p><a href=\"https://fed.taobao.org/blog/taofed/do71ct/use-the-react-hooks-instead-of-the-redux/?spm=taofed.bloginfo.blog.3.707f5ac8tD5Gxz\" target=\"_blank\" rel=\"noopener\">简单项目：使用 Hooks：useReducer 代替 Redux</a></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> providers <span class=\"keyword\">from</span> <span class=\"string\">'./providers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据 Provider 组合器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ProvidersComposer = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (</span><br><span class=\"line\">  props.providers.reduceRight(<span class=\"function\">(<span class=\"params\">children, Parent</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;Parent&gt;&#123;children&#125;&lt;<span class=\"regexp\">/Parent&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  ), props.children)</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Provider = (props) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ProvidersComposer providers=&#123;providers&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;props.children&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ProvidersComposer&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Provider;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>useCallback</p>\n</li>\n<li><p>useMemo</p>\n</li>\n<li><p>useRef</p>\n</li>\n<li><p>useImperativeHandle</p>\n</li>\n<li><p>useLayoutEffect</p>\n</li>\n<li><p>useDebugValue</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-hooks-改写-TO-DO-Lists\"><a href=\"#react-hooks-改写-TO-DO-Lists\" class=\"headerlink\" title=\"react-hooks 改写 TO DO Lists\"></a>react-hooks 改写 TO DO Lists</h2><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录学习 react-hooks 过程中的思考🤔","more":"</li>\n</ul>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li><p>react 16.8 推出</p>\n</li>\n<li><p>能够在函数组件内部使用 state 和组件生命周期方法</p>\n</li>\n<li><p>定义组件</p>\n<ul>\n<li>class</li>\n<li>F(x) + react-hooks(灵活、可测试、代码复用)</li>\n</ul>\n</li>\n<li><p>什么是 hooks ?</p>\n<ul>\n<li>允许你hook一些业务逻辑到组件内部 state 和 render 函数上</li>\n<li>hooks 允许我们去操作这个内部state了</li>\n<li>更好的去关注分离和代码复用(传统 HOC，函数作为子组件)，将相关代码</li>\n</ul>\n</li>\n<li><p>Why Hooks?</p>\n<ul>\n<li>Mixins<ul>\n<li>命名空间耦合</li>\n<li>静态检查</li>\n<li>组件参数不清晰</li>\n</ul>\n</li>\n<li>HOC<ul>\n<li>解决命名空间解耦</li>\n<li>对 Class 进行静态检查</li>\n<li>组件参数不清晰</li>\n<li>组件实例增加</li>\n</ul>\n</li>\n<li>Hooks<ul>\n<li>命名空间解耦</li>\n<li>静态检查</li>\n<li>组件参数清晰</li>\n<li>单组件实例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>三个基础 hooks</p>\n<ul>\n<li>useState<ul>\n<li>允许操作组件的内部状态</li>\n<li>如果要根据之前的状态决定下一个状态<ul>\n<li>参数可以写成一个函数，函数接受的参数就是之前的状态，prevState =&gt; nowState</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>useEffect<ul>\n<li>使用副作用</li>\n<li>指定一个函数在每次render完，去执行什么样的逻辑</li>\n<li>第二个参数，传入一个数组，这个数组是当前闭包中的任何变量<ul>\n<li>只有当数组中的发生变化，才会调用回调函数</li>\n<li>函数组件内部，很容易监听props变化</li>\n</ul>\n</li>\n<li>可以在 useEffect 回调函数中，返回一个函数，作为组建销毁时的一个回调，允许执行一些资源回收的逻辑</li>\n<li><strong>useCallback</strong><ul>\n<li>将回调函数进行一个缓存，只有在需要时才会返回一个新的事件处理函数</li>\n<li>useEffect 和 useCallback，现在都有一个约定，回调函数内如果使用了外部闭包中的变量，那么都应该在第二个参数中进行声明<ul>\n<li>eslint-plugin-react-hooks<ul>\n<li>“react-hooks/rules-of-hooks”: “error”<ul>\n<li>确保对hooks的调用，都发生在顶层作用域</li>\n</ul>\n</li>\n<li>“react-hooks/exhaustive-deps”: “warn”<ul>\n<li>必须提供 useEffect 和 useCallback 等hooks 的第二个参数，声明回调函数依赖的变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>useContext</li>\n</ul>\n</li>\n<li><p>自定义 hooks</p>\n</li>\n<li><p>额外 hooks</p>\n<ul>\n<li><p>useReducer</p>\n<ul>\n<li><p><a href=\"https://fed.taobao.org/blog/taofed/do71ct/use-the-react-hooks-instead-of-the-redux/?spm=taofed.bloginfo.blog.3.707f5ac8tD5Gxz\" target=\"_blank\" rel=\"noopener\">简单项目：使用 Hooks：useReducer 代替 Redux</a></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> providers <span class=\"keyword\">from</span> <span class=\"string\">'./providers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据 Provider 组合器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ProvidersComposer = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (</span><br><span class=\"line\">  props.providers.reduceRight(<span class=\"function\">(<span class=\"params\">children, Parent</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;Parent&gt;&#123;children&#125;&lt;<span class=\"regexp\">/Parent&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  ), props.children)</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Provider = (props) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ProvidersComposer providers=&#123;providers&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;props.children&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ProvidersComposer&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Provider;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>useCallback</p>\n</li>\n<li><p>useMemo</p>\n</li>\n<li><p>useRef</p>\n</li>\n<li><p>useImperativeHandle</p>\n</li>\n<li><p>useLayoutEffect</p>\n</li>\n<li><p>useDebugValue</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-hooks-改写-TO-DO-Lists\"><a href=\"#react-hooks-改写-TO-DO-Lists\" class=\"headerlink\" title=\"react-hooks 改写 TO DO Lists\"></a>react-hooks 改写 TO DO Lists</h2><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"【未完】前端性能监控","date":"2020-04-16T01:40:54.000Z","description":["记录 性能监控 方面的学习过程🤔"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录 性能监控 方面的学习过程🤔\n\n<!-- more -->\n\n## 学习过程\n### 大前端时代前端变化\n- Gmail SPA\n- Angular/React/Vue MVVM/工程化\n- weex/react native 跨端\n- Node 全栈\n\n### 前端变化给监控带来了什么样的改变\n- 传统监控模式能否使用于新的技术？比如 PV 统计\n\t- 导致 PV 下降的原因和解法\n\t- 原因\n\t\t- 业内路由替代了请求新的页面\n\t- 解法\n\t\t- 哈希路由：监听 hash change 变化上报 PV\n\t\t- 非哈希路由(Angular): 轻量 hack pushState 和 replaceState\n\t- 案例\n\t\t- 下拉刷新\n\t\t- 滚屏分页\n\t\t- 阿里云邮后台一直开着，每周上百次查看\n\t\t- 未关闭的浏览器 Ta b几小时后再次浏览\n\t\t- 查找信息时，浏览器 Tab 之间快速切换\n- SPA模式下首屏如何计算？\n\t- 第一阶段：自定义打点时期\n\t\t- 页头和首屏dom处分别通过 new Date() 打点\n\t- 第二阶段：W3C标准时期\n\t\t- Navigaion Timing API\n\t- 第三阶段：SPA盛行导致w3c标准失去原来的意义\n\t- 现阶段：用户感官指标FMP\n\t\t- FMP：主要内容可见时间\n\t\t- 猜想：主要内容 = 元素增量最大的点 （猜想不成立）\n\t\t\t- 什么原因导致猜想不成立？\n\t\t\t\t- 元素是否可见\n\t\t\t\t- 每个元素对页面的影响是否等效？ --> 权重\n\t- 下一阶段：W3C/paint-timing 首屏加载时间计算已经在提案中\n- 跨端开发给监控带来什么挑战？\n- 前端监控的上报模式在 Node.js 端是否合理？\n\n### 前端监控的最佳实践\n- 主动监控\n- 性能样本分布 & 慢会话\n\t- 慢会话追踪\n- 搜索报错明细\n- 出错行为还原\n\n### 阿里云ARMS前端监控系统架构\n\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/前端性能监控.md","raw":"---\ntitle: 【未完】前端性能监控\ndate: 2020-04-16 09:40:54\ntags:\n- 性能监控\ncategories:\n- 性能监控\ndescription:\n- 记录 性能监控 方面的学习过程🤔\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录 性能监控 方面的学习过程🤔\n\n<!-- more -->\n\n## 学习过程\n### 大前端时代前端变化\n- Gmail SPA\n- Angular/React/Vue MVVM/工程化\n- weex/react native 跨端\n- Node 全栈\n\n### 前端变化给监控带来了什么样的改变\n- 传统监控模式能否使用于新的技术？比如 PV 统计\n\t- 导致 PV 下降的原因和解法\n\t- 原因\n\t\t- 业内路由替代了请求新的页面\n\t- 解法\n\t\t- 哈希路由：监听 hash change 变化上报 PV\n\t\t- 非哈希路由(Angular): 轻量 hack pushState 和 replaceState\n\t- 案例\n\t\t- 下拉刷新\n\t\t- 滚屏分页\n\t\t- 阿里云邮后台一直开着，每周上百次查看\n\t\t- 未关闭的浏览器 Ta b几小时后再次浏览\n\t\t- 查找信息时，浏览器 Tab 之间快速切换\n- SPA模式下首屏如何计算？\n\t- 第一阶段：自定义打点时期\n\t\t- 页头和首屏dom处分别通过 new Date() 打点\n\t- 第二阶段：W3C标准时期\n\t\t- Navigaion Timing API\n\t- 第三阶段：SPA盛行导致w3c标准失去原来的意义\n\t- 现阶段：用户感官指标FMP\n\t\t- FMP：主要内容可见时间\n\t\t- 猜想：主要内容 = 元素增量最大的点 （猜想不成立）\n\t\t\t- 什么原因导致猜想不成立？\n\t\t\t\t- 元素是否可见\n\t\t\t\t- 每个元素对页面的影响是否等效？ --> 权重\n\t- 下一阶段：W3C/paint-timing 首屏加载时间计算已经在提案中\n- 跨端开发给监控带来什么挑战？\n- 前端监控的上报模式在 Node.js 端是否合理？\n\n### 前端监控的最佳实践\n- 主动监控\n- 性能样本分布 & 慢会话\n\t- 慢会话追踪\n- 搜索报错明细\n- 出错行为还原\n\n### 阿里云ARMS前端监控系统架构\n\n\n## 写在后面\n- 祝大家多多发财\n","slug":"前端性能监控","published":1,"updated":"2020-04-26T11:01:29.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1wa000r1wp3ehihbiog","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录 性能监控 方面的学习过程🤔</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"大前端时代前端变化\"><a href=\"#大前端时代前端变化\" class=\"headerlink\" title=\"大前端时代前端变化\"></a>大前端时代前端变化</h3><ul>\n<li>Gmail SPA</li>\n<li>Angular/React/Vue MVVM/工程化</li>\n<li>weex/react native 跨端</li>\n<li>Node 全栈</li>\n</ul>\n<h3 id=\"前端变化给监控带来了什么样的改变\"><a href=\"#前端变化给监控带来了什么样的改变\" class=\"headerlink\" title=\"前端变化给监控带来了什么样的改变\"></a>前端变化给监控带来了什么样的改变</h3><ul>\n<li>传统监控模式能否使用于新的技术？比如 PV 统计<ul>\n<li>导致 PV 下降的原因和解法</li>\n<li>原因<ul>\n<li>业内路由替代了请求新的页面</li>\n</ul>\n</li>\n<li>解法<ul>\n<li>哈希路由：监听 hash change 变化上报 PV</li>\n<li>非哈希路由(Angular): 轻量 hack pushState 和 replaceState</li>\n</ul>\n</li>\n<li>案例<ul>\n<li>下拉刷新</li>\n<li>滚屏分页</li>\n<li>阿里云邮后台一直开着，每周上百次查看</li>\n<li>未关闭的浏览器 Ta b几小时后再次浏览</li>\n<li>查找信息时，浏览器 Tab 之间快速切换</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SPA模式下首屏如何计算？<ul>\n<li>第一阶段：自定义打点时期<ul>\n<li>页头和首屏dom处分别通过 new Date() 打点</li>\n</ul>\n</li>\n<li>第二阶段：W3C标准时期<ul>\n<li>Navigaion Timing API</li>\n</ul>\n</li>\n<li>第三阶段：SPA盛行导致w3c标准失去原来的意义</li>\n<li>现阶段：用户感官指标FMP<ul>\n<li>FMP：主要内容可见时间</li>\n<li>猜想：主要内容 = 元素增量最大的点 （猜想不成立）<ul>\n<li>什么原因导致猜想不成立？<ul>\n<li>元素是否可见</li>\n<li>每个元素对页面的影响是否等效？ –&gt; 权重</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>下一阶段：W3C/paint-timing 首屏加载时间计算已经在提案中</li>\n</ul>\n</li>\n<li>跨端开发给监控带来什么挑战？</li>\n<li>前端监控的上报模式在 Node.js 端是否合理？</li>\n</ul>\n<h3 id=\"前端监控的最佳实践\"><a href=\"#前端监控的最佳实践\" class=\"headerlink\" title=\"前端监控的最佳实践\"></a>前端监控的最佳实践</h3><ul>\n<li>主动监控</li>\n<li>性能样本分布 &amp; 慢会话<ul>\n<li>慢会话追踪</li>\n</ul>\n</li>\n<li>搜索报错明细</li>\n<li>出错行为还原</li>\n</ul>\n<h3 id=\"阿里云ARMS前端监控系统架构\"><a href=\"#阿里云ARMS前端监控系统架构\" class=\"headerlink\" title=\"阿里云ARMS前端监控系统架构\"></a>阿里云ARMS前端监控系统架构</h3><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录 性能监控 方面的学习过程🤔</li>\n</ul>","more":"<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"大前端时代前端变化\"><a href=\"#大前端时代前端变化\" class=\"headerlink\" title=\"大前端时代前端变化\"></a>大前端时代前端变化</h3><ul>\n<li>Gmail SPA</li>\n<li>Angular/React/Vue MVVM/工程化</li>\n<li>weex/react native 跨端</li>\n<li>Node 全栈</li>\n</ul>\n<h3 id=\"前端变化给监控带来了什么样的改变\"><a href=\"#前端变化给监控带来了什么样的改变\" class=\"headerlink\" title=\"前端变化给监控带来了什么样的改变\"></a>前端变化给监控带来了什么样的改变</h3><ul>\n<li>传统监控模式能否使用于新的技术？比如 PV 统计<ul>\n<li>导致 PV 下降的原因和解法</li>\n<li>原因<ul>\n<li>业内路由替代了请求新的页面</li>\n</ul>\n</li>\n<li>解法<ul>\n<li>哈希路由：监听 hash change 变化上报 PV</li>\n<li>非哈希路由(Angular): 轻量 hack pushState 和 replaceState</li>\n</ul>\n</li>\n<li>案例<ul>\n<li>下拉刷新</li>\n<li>滚屏分页</li>\n<li>阿里云邮后台一直开着，每周上百次查看</li>\n<li>未关闭的浏览器 Ta b几小时后再次浏览</li>\n<li>查找信息时，浏览器 Tab 之间快速切换</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SPA模式下首屏如何计算？<ul>\n<li>第一阶段：自定义打点时期<ul>\n<li>页头和首屏dom处分别通过 new Date() 打点</li>\n</ul>\n</li>\n<li>第二阶段：W3C标准时期<ul>\n<li>Navigaion Timing API</li>\n</ul>\n</li>\n<li>第三阶段：SPA盛行导致w3c标准失去原来的意义</li>\n<li>现阶段：用户感官指标FMP<ul>\n<li>FMP：主要内容可见时间</li>\n<li>猜想：主要内容 = 元素增量最大的点 （猜想不成立）<ul>\n<li>什么原因导致猜想不成立？<ul>\n<li>元素是否可见</li>\n<li>每个元素对页面的影响是否等效？ –&gt; 权重</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>下一阶段：W3C/paint-timing 首屏加载时间计算已经在提案中</li>\n</ul>\n</li>\n<li>跨端开发给监控带来什么挑战？</li>\n<li>前端监控的上报模式在 Node.js 端是否合理？</li>\n</ul>\n<h3 id=\"前端监控的最佳实践\"><a href=\"#前端监控的最佳实践\" class=\"headerlink\" title=\"前端监控的最佳实践\"></a>前端监控的最佳实践</h3><ul>\n<li>主动监控</li>\n<li>性能样本分布 &amp; 慢会话<ul>\n<li>慢会话追踪</li>\n</ul>\n</li>\n<li>搜索报错明细</li>\n<li>出错行为还原</li>\n</ul>\n<h3 id=\"阿里云ARMS前端监控系统架构\"><a href=\"#阿里云ARMS前端监控系统架构\" class=\"headerlink\" title=\"阿里云ARMS前端监控系统架构\"></a>阿里云ARMS前端监控系统架构</h3><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"layout":"微信小程序-气泡框","title":"微信小程序-气泡框","date":"2020-04-05T03:47:05.000Z","description":["记录基于[微信小程序-气泡框](https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806)实现中产生的问题及思考"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n##  写在前面\n- 记录基于[微信小程序-气泡框](https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806)实现中产生的问题及思考\n- - -\n## 问题截图\n![popover问题截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzlkMGY1NmUxOTVkNzFjMjAyYzVkYzI0OGMxMzg0NmUxMTQ3MTQucG5n?x-oss-process=image/format,png)\n## 问题描述\n- 模拟器显示正常，但在真机上点击后，气泡框的箭头并没有消失，且点击同一级别区域，能利用覆盖消除箭头。【是不是一个很可爱的bug？\n<!-- more -->\n\n## 问题解决过程记录\n- 定位问题发生的原因范围\n\t- 样式\n\t\t- 样式在判断显示条件(wx:if=\"{{visible}}\")生效后，仍然渲染\n\t\t- 否定原因\n\t\t\t- 查询代码发现，整个样式背景的设定是在::before伪元素选择器中\n\t\t\t- 且显示条件生效，在调试器中已没有该元素，但仍显示\n\t- 逻辑\n\t\t- 会不会是组件在渲染时，多渲染一份，我们使用判断条件进行开关时，只是对其中一个进行了操作\n\t\t- 怀疑依据\n\t\t\t- ![popover问题依据截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzk5ZjcwMDAwZmViM2IwYzc0MWJmNjFiYzE5YTUwMDIxMjYyMTI3LnBuZw?x-oss-process=image/format,png)\n\t\t\t- 上图可见：在popover组件下，有2个通过&lt;slot&gt;插入的相同内容\n\n- 开始解决问题\n\t- 查询官方关于[slot](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html)方面的介绍\n\t\t- ![官方slot基础例子](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JjMTE0ZmI0YTdhOWZkY2ZlYzU3ZDE5ZWQyYWY0YzI3MzE1NTU4LnBuZw?x-oss-process=image/format,png)\n\t- 基于官方基础代码，复现问题\n\t\t- 产生一个child-tag组件，并在其中编写\n\t\t\t```javascript\n\t\t\t// components/child-tag.js.js\n\t\t\tComponent({\n\t\t\t  options: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t\t\t  /**\n\t\t\t   * 组件的属性列表\n\t\t\t   */\n\t\t\t  properties: {\n\t\t\t\n\t\t\t  },\n\t\t\t  relations: {\n\t\t\t    './component-tag-name': {\n\t\t\t      type: 'parent',\n\t\t\t    }\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的初始数据\n\t\t\t   */\n\t\t\t  data: {\n\t\t\t\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的方法列表\n\t\t\t   */\n\t\t\t  methods: {\n\t\t\t\n\t\t\t  }\n\t\t\t})\n\t\t\t```\n\t\t- 与component-tag-name绑定形成父子组件\n\t\t\t```javascript\n\t\t\t// components/component-tag-name.js\n\t\t\tComponent({\n\t\t\t  options: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t\t\t  relations: {\n\t\t\t    './child-tag': {\n\t\t\t      type: 'child',\n\t\t\t    }\n\t\t\t  },\n\t\t\t  /**\n\t\t\t   * 组件的属性列表\n\t\t\t   */\n\t\t\t  properties: {\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的初始数据\n\t\t\t   */\n\t\t\t  data: {\n\t\t\t    visible: false\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的方法列表\n\t\t\t   */\n\t\t\t  methods: {\n\t\t\t  \n\t\t\t  }\n\t\t\t})\n\t\t\t```\n\t\t- 并将index.html中进行调用\n\t\t\t```html\n\t\t\t<!-- 引用组件的页面模版 -->\n\t\t\t<view>\n\t\t\t  <button type=\"primary\" bindtap=\"onTap\">222</button>\n\t\t\t\t<my-component id=\"component\">\n\t\t\t\t\t<view slot=\"content\">\n\t\t\t\t\t\t这里是插入到组件slot name=\"content\"中的内容\n\t\t\t\t\t\t<child-component>\n\t\t\t\t\t\t\t<view slot=\"child\">这里是插入到组件slot name=\"child\"中的内容</view>\n\t\t\t\t\t\t</child-component>\n\t\t\t\t\t</view>\n\t\t\t\t</my-component>\n\t\t\t</view>\n\t\t\t```\n\t\t- 但是其结构树仍然非常正常，并没有出现那个所谓的\"拷贝\"组件\n\t\t\t- ![改写v1.1后的结构树截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzcwNTRhNjJkYmM2MGEyNmU5ZGI1ODYzNzNjOGY2OTgyMzg3NTI0LnBuZw?x-oss-process=image/format,png)\n\t\t\t- 仔细复现了几次，发现：多出来的那个组件会有所延迟。抓住这个问题，想到我们在onReady中，注册了该组件，于是，继续模拟\n\t\t- 修改index.js代码，并在component-tag-name组件注册onTap方法，控制显隐\n\t\t\t```javascript\n\t\t\t  onReady() {\n\t\t\t    this.component = this.selectComponent('#component')\n\t\t\t  },\n\t\t\t  onTap() {\n\t\t\t    console.log('onTap')\n\t\t\t    wx.createSelectorQuery().select('#component').boundingClientRect(res => {\n\t\t\t        // 调用自定义组件 popover 中的 onDisplay 方法\n\t\t\t        this.component.onTap();\n\t\t\t    }).exec();\n\t\t\t  }\n\t\t\t\t```\n\t\t- 最终复现\n\t\t\t- ![官方模拟最终运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmZjQ3OTNhMjUwYTNjMzlhYjBlOGQxMGJhYTllZmI2NDc1NjIyLnBuZw?x-oss-process=image/format,png)\n\t- 得出问题来源：\n\t\t- 在组件中进行了一次setData\n\t- 思考背后问题\n\t\t- 在组件中setData为什么会”拷贝“一份相同的在页面级wxml中？\n\t\t- 猜想一：从[WXS响应事件](https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88)中，我隐隐得到了答案\n\t\t- ![wxs相应事件](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzZlYWJjYjdjOTliMzAxNWMwOGQwZmM2YWM3ZmMxMGMzNDU5NDAxLnBuZw?x-oss-process=image/format,png)\n\t\t- 我们在页面级通过selectComponent实例化组件，对选中的组件进行操作，官方可以通过拷贝一份相同的组件，使我们便捷的将事件的处理从2次的逻辑层和渲染层通信以及一次渲染，减少到直接对页面上元素进行操作，即一次逻辑层和渲染层通信以及一次渲染。\n\t\t- 猜想二：问题层面是在微信开发者工具中的wxml，渲染方式对于这种情况就是这样处理的。\n- 官方已给出问题原因\n\t- ![wxml面板](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzJkMWVkZmYyNWIwM2YxZDU2ZGVjYjZhM2NkYjAwMGU5NTE5ODQucG5n?x-oss-process=image/format,png)\n\n## 如何解决问题\n- 在popover以及popover-item加入\n\t```javascript\n\toptions: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t```\n- 就可以解决了。最后建议slot中可以写上name这样代码可能会更易读。\n##  写在后面\n- 祝大家多多发财\n---","source":"_posts/微信小程序-气泡框 Popover.md","raw":"---\nlayout: 微信小程序-气泡框\ntitle: 微信小程序-气泡框\ndate: 2020-04-05 11:47:05\ntags: \n- 微信小程序\ncategories:\n- 微信小程序\ndescription:\n  - 记录基于[微信小程序-气泡框](https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806)实现中产生的问题及思考\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n##  写在前面\n- 记录基于[微信小程序-气泡框](https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806)实现中产生的问题及思考\n- - -\n## 问题截图\n![popover问题截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzlkMGY1NmUxOTVkNzFjMjAyYzVkYzI0OGMxMzg0NmUxMTQ3MTQucG5n?x-oss-process=image/format,png)\n## 问题描述\n- 模拟器显示正常，但在真机上点击后，气泡框的箭头并没有消失，且点击同一级别区域，能利用覆盖消除箭头。【是不是一个很可爱的bug？\n<!-- more -->\n\n## 问题解决过程记录\n- 定位问题发生的原因范围\n\t- 样式\n\t\t- 样式在判断显示条件(wx:if=\"{{visible}}\")生效后，仍然渲染\n\t\t- 否定原因\n\t\t\t- 查询代码发现，整个样式背景的设定是在::before伪元素选择器中\n\t\t\t- 且显示条件生效，在调试器中已没有该元素，但仍显示\n\t- 逻辑\n\t\t- 会不会是组件在渲染时，多渲染一份，我们使用判断条件进行开关时，只是对其中一个进行了操作\n\t\t- 怀疑依据\n\t\t\t- ![popover问题依据截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzk5ZjcwMDAwZmViM2IwYzc0MWJmNjFiYzE5YTUwMDIxMjYyMTI3LnBuZw?x-oss-process=image/format,png)\n\t\t\t- 上图可见：在popover组件下，有2个通过&lt;slot&gt;插入的相同内容\n\n- 开始解决问题\n\t- 查询官方关于[slot](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html)方面的介绍\n\t\t- ![官方slot基础例子](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JjMTE0ZmI0YTdhOWZkY2ZlYzU3ZDE5ZWQyYWY0YzI3MzE1NTU4LnBuZw?x-oss-process=image/format,png)\n\t- 基于官方基础代码，复现问题\n\t\t- 产生一个child-tag组件，并在其中编写\n\t\t\t```javascript\n\t\t\t// components/child-tag.js.js\n\t\t\tComponent({\n\t\t\t  options: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t\t\t  /**\n\t\t\t   * 组件的属性列表\n\t\t\t   */\n\t\t\t  properties: {\n\t\t\t\n\t\t\t  },\n\t\t\t  relations: {\n\t\t\t    './component-tag-name': {\n\t\t\t      type: 'parent',\n\t\t\t    }\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的初始数据\n\t\t\t   */\n\t\t\t  data: {\n\t\t\t\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的方法列表\n\t\t\t   */\n\t\t\t  methods: {\n\t\t\t\n\t\t\t  }\n\t\t\t})\n\t\t\t```\n\t\t- 与component-tag-name绑定形成父子组件\n\t\t\t```javascript\n\t\t\t// components/component-tag-name.js\n\t\t\tComponent({\n\t\t\t  options: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t\t\t  relations: {\n\t\t\t    './child-tag': {\n\t\t\t      type: 'child',\n\t\t\t    }\n\t\t\t  },\n\t\t\t  /**\n\t\t\t   * 组件的属性列表\n\t\t\t   */\n\t\t\t  properties: {\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的初始数据\n\t\t\t   */\n\t\t\t  data: {\n\t\t\t    visible: false\n\t\t\t  },\n\t\t\t\n\t\t\t  /**\n\t\t\t   * 组件的方法列表\n\t\t\t   */\n\t\t\t  methods: {\n\t\t\t  \n\t\t\t  }\n\t\t\t})\n\t\t\t```\n\t\t- 并将index.html中进行调用\n\t\t\t```html\n\t\t\t<!-- 引用组件的页面模版 -->\n\t\t\t<view>\n\t\t\t  <button type=\"primary\" bindtap=\"onTap\">222</button>\n\t\t\t\t<my-component id=\"component\">\n\t\t\t\t\t<view slot=\"content\">\n\t\t\t\t\t\t这里是插入到组件slot name=\"content\"中的内容\n\t\t\t\t\t\t<child-component>\n\t\t\t\t\t\t\t<view slot=\"child\">这里是插入到组件slot name=\"child\"中的内容</view>\n\t\t\t\t\t\t</child-component>\n\t\t\t\t\t</view>\n\t\t\t\t</my-component>\n\t\t\t</view>\n\t\t\t```\n\t\t- 但是其结构树仍然非常正常，并没有出现那个所谓的\"拷贝\"组件\n\t\t\t- ![改写v1.1后的结构树截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzcwNTRhNjJkYmM2MGEyNmU5ZGI1ODYzNzNjOGY2OTgyMzg3NTI0LnBuZw?x-oss-process=image/format,png)\n\t\t\t- 仔细复现了几次，发现：多出来的那个组件会有所延迟。抓住这个问题，想到我们在onReady中，注册了该组件，于是，继续模拟\n\t\t- 修改index.js代码，并在component-tag-name组件注册onTap方法，控制显隐\n\t\t\t```javascript\n\t\t\t  onReady() {\n\t\t\t    this.component = this.selectComponent('#component')\n\t\t\t  },\n\t\t\t  onTap() {\n\t\t\t    console.log('onTap')\n\t\t\t    wx.createSelectorQuery().select('#component').boundingClientRect(res => {\n\t\t\t        // 调用自定义组件 popover 中的 onDisplay 方法\n\t\t\t        this.component.onTap();\n\t\t\t    }).exec();\n\t\t\t  }\n\t\t\t\t```\n\t\t- 最终复现\n\t\t\t- ![官方模拟最终运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmZjQ3OTNhMjUwYTNjMzlhYjBlOGQxMGJhYTllZmI2NDc1NjIyLnBuZw?x-oss-process=image/format,png)\n\t- 得出问题来源：\n\t\t- 在组件中进行了一次setData\n\t- 思考背后问题\n\t\t- 在组件中setData为什么会”拷贝“一份相同的在页面级wxml中？\n\t\t- 猜想一：从[WXS响应事件](https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88)中，我隐隐得到了答案\n\t\t- ![wxs相应事件](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzZlYWJjYjdjOTliMzAxNWMwOGQwZmM2YWM3ZmMxMGMzNDU5NDAxLnBuZw?x-oss-process=image/format,png)\n\t\t- 我们在页面级通过selectComponent实例化组件，对选中的组件进行操作，官方可以通过拷贝一份相同的组件，使我们便捷的将事件的处理从2次的逻辑层和渲染层通信以及一次渲染，减少到直接对页面上元素进行操作，即一次逻辑层和渲染层通信以及一次渲染。\n\t\t- 猜想二：问题层面是在微信开发者工具中的wxml，渲染方式对于这种情况就是这样处理的。\n- 官方已给出问题原因\n\t- ![wxml面板](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzJkMWVkZmYyNWIwM2YxZDU2ZGVjYjZhM2NkYjAwMGU5NTE5ODQucG5n?x-oss-process=image/format,png)\n\n## 如何解决问题\n- 在popover以及popover-item加入\n\t```javascript\n\toptions: {\n\t\t\t    multipleSlots: true // 在组件定义时的选项中启用多slot支持\n\t\t\t  },\n\t```\n- 就可以解决了。最后建议slot中可以写上name这样代码可能会更易读。\n##  写在后面\n- 祝大家多多发财\n---","slug":"微信小程序-气泡框 Popover","published":1,"updated":"2020-04-26T11:01:39.438Z","comments":1,"photos":[],"link":"","_id":"ckaw7l1wb000t1wp3cehvd75v","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录基于<a href=\"https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806\" target=\"_blank\" rel=\"noopener\">微信小程序-气泡框</a>实现中产生的问题及思考</li>\n</ul>\n<hr>\n<h2 id=\"问题截图\"><a href=\"#问题截图\" class=\"headerlink\" title=\"问题截图\"></a>问题截图</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzlkMGY1NmUxOTVkNzFjMjAyYzVkYzI0OGMxMzg0NmUxMTQ3MTQucG5n?x-oss-process=image/format,png\" alt=\"popover问题截图\"></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><ul>\n<li>模拟器显示正常，但在真机上点击后，气泡框的箭头并没有消失，且点击同一级别区域，能利用覆盖消除箭头。【是不是一个很可爱的bug？<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"问题解决过程记录\"><a href=\"#问题解决过程记录\" class=\"headerlink\" title=\"问题解决过程记录\"></a>问题解决过程记录</h2><ul>\n<li><p>定位问题发生的原因范围</p>\n<ul>\n<li>样式<ul>\n<li>样式在判断显示条件(wx:if=”“)生效后，仍然渲染</li>\n<li>否定原因<ul>\n<li>查询代码发现，整个样式背景的设定是在::before伪元素选择器中</li>\n<li>且显示条件生效，在调试器中已没有该元素，但仍显示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>逻辑<ul>\n<li>会不会是组件在渲染时，多渲染一份，我们使用判断条件进行开关时，只是对其中一个进行了操作</li>\n<li>怀疑依据<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzk5ZjcwMDAwZmViM2IwYzc0MWJmNjFiYzE5YTUwMDIxMjYyMTI3LnBuZw?x-oss-process=image/format,png\" alt=\"popover问题依据截图\"></li>\n<li>上图可见：在popover组件下，有2个通过&lt;slot&gt;插入的相同内容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开始解决问题</p>\n<ul>\n<li>查询官方关于<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html\" target=\"_blank\" rel=\"noopener\">slot</a>方面的介绍<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JjMTE0ZmI0YTdhOWZkY2ZlYzU3ZDE5ZWQyYWY0YzI3MzE1NTU4LnBuZw?x-oss-process=image/format,png\" alt=\"官方slot基础例子\"></li>\n</ul>\n</li>\n<li>基于官方基础代码，复现问题<ul>\n<li>产生一个child-tag组件，并在其中编写  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/child-tag.js.js</span></span><br><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的属性列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    <span class=\"string\">'./component-tag-name'</span>: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'parent'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的方法列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>与component-tag-name绑定形成父子组件  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/component-tag-name.js</span></span><br><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    <span class=\"string\">'./child-tag'</span>: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的属性列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    visible: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的方法列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>并将index.html中进行调用  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"onTap\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">id</span>=<span class=\"string\">\"component\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t这里是插入到组件slot name=\"content\"中的内容</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"child\"</span>&gt;</span>这里是插入到组件slot name=\"child\"中的内容<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>但是其结构树仍然非常正常，并没有出现那个所谓的”拷贝”组件<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzcwNTRhNjJkYmM2MGEyNmU5ZGI1ODYzNzNjOGY2OTgyMzg3NTI0LnBuZw?x-oss-process=image/format,png\" alt=\"改写v1.1后的结构树截图\"></li>\n<li>仔细复现了几次，发现：多出来的那个组件会有所延迟。抓住这个问题，想到我们在onReady中，注册了该组件，于是，继续模拟</li>\n</ul>\n</li>\n<li>修改index.js代码，并在component-tag-name组件注册onTap方法，控制显隐  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onReady() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.component = <span class=\"keyword\">this</span>.selectComponent(<span class=\"string\">'#component'</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">onTap() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'onTap'</span>)</span><br><span class=\"line\">  wx.createSelectorQuery().select(<span class=\"string\">'#component'</span>).boundingClientRect(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用自定义组件 popover 中的 onDisplay 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.component.onTap();</span><br><span class=\"line\">  &#125;).exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>最终复现<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmZjQ3OTNhMjUwYTNjMzlhYjBlOGQxMGJhYTllZmI2NDc1NjIyLnBuZw?x-oss-process=image/format,png\" alt=\"官方模拟最终运行截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>得出问题来源：<ul>\n<li>在组件中进行了一次setData</li>\n</ul>\n</li>\n<li>思考背后问题<ul>\n<li>在组件中setData为什么会”拷贝“一份相同的在页面级wxml中？</li>\n<li>猜想一：从<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">WXS响应事件</a>中，我隐隐得到了答案</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzZlYWJjYjdjOTliMzAxNWMwOGQwZmM2YWM3ZmMxMGMzNDU5NDAxLnBuZw?x-oss-process=image/format,png\" alt=\"wxs相应事件\"></li>\n<li>我们在页面级通过selectComponent实例化组件，对选中的组件进行操作，官方可以通过拷贝一份相同的组件，使我们便捷的将事件的处理从2次的逻辑层和渲染层通信以及一次渲染，减少到直接对页面上元素进行操作，即一次逻辑层和渲染层通信以及一次渲染。</li>\n<li>猜想二：问题层面是在微信开发者工具中的wxml，渲染方式对于这种情况就是这样处理的。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>官方已给出问题原因</p>\n<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzJkMWVkZmYyNWIwM2YxZDU2ZGVjYjZhM2NkYjAwMGU5NTE5ODQucG5n?x-oss-process=image/format,png\" alt=\"wxml面板\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何解决问题\"><a href=\"#如何解决问题\" class=\"headerlink\" title=\"如何解决问题\"></a>如何解决问题</h2><ul>\n<li>在popover以及popover-item加入  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options: &#123;</span><br><span class=\"line\">\t\t    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">\t\t  &#125;,</span><br></pre></td></tr></table></figure></li>\n<li>就可以解决了。最后建议slot中可以写上name这样代码可能会更易读。<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>记录基于<a href=\"https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806\" target=\"_blank\" rel=\"noopener\">微信小程序-气泡框</a>实现中产生的问题及思考</li>\n</ul>\n<hr>\n<h2 id=\"问题截图\"><a href=\"#问题截图\" class=\"headerlink\" title=\"问题截图\"></a>问题截图</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzlkMGY1NmUxOTVkNzFjMjAyYzVkYzI0OGMxMzg0NmUxMTQ3MTQucG5n?x-oss-process=image/format,png\" alt=\"popover问题截图\"></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><ul>\n<li>模拟器显示正常，但在真机上点击后，气泡框的箭头并没有消失，且点击同一级别区域，能利用覆盖消除箭头。【是不是一个很可爱的bug？","more":"</li>\n</ul>\n<h2 id=\"问题解决过程记录\"><a href=\"#问题解决过程记录\" class=\"headerlink\" title=\"问题解决过程记录\"></a>问题解决过程记录</h2><ul>\n<li><p>定位问题发生的原因范围</p>\n<ul>\n<li>样式<ul>\n<li>样式在判断显示条件(wx:if=”“)生效后，仍然渲染</li>\n<li>否定原因<ul>\n<li>查询代码发现，整个样式背景的设定是在::before伪元素选择器中</li>\n<li>且显示条件生效，在调试器中已没有该元素，但仍显示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>逻辑<ul>\n<li>会不会是组件在渲染时，多渲染一份，我们使用判断条件进行开关时，只是对其中一个进行了操作</li>\n<li>怀疑依据<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzk5ZjcwMDAwZmViM2IwYzc0MWJmNjFiYzE5YTUwMDIxMjYyMTI3LnBuZw?x-oss-process=image/format,png\" alt=\"popover问题依据截图\"></li>\n<li>上图可见：在popover组件下，有2个通过&lt;slot&gt;插入的相同内容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开始解决问题</p>\n<ul>\n<li>查询官方关于<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html\" target=\"_blank\" rel=\"noopener\">slot</a>方面的介绍<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JjMTE0ZmI0YTdhOWZkY2ZlYzU3ZDE5ZWQyYWY0YzI3MzE1NTU4LnBuZw?x-oss-process=image/format,png\" alt=\"官方slot基础例子\"></li>\n</ul>\n</li>\n<li>基于官方基础代码，复现问题<ul>\n<li>产生一个child-tag组件，并在其中编写  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/child-tag.js.js</span></span><br><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的属性列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    <span class=\"string\">'./component-tag-name'</span>: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'parent'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的方法列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>与component-tag-name绑定形成父子组件  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/component-tag-name.js</span></span><br><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    <span class=\"string\">'./child-tag'</span>: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的属性列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    visible: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的方法列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>并将index.html中进行调用  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"onTap\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">id</span>=<span class=\"string\">\"component\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t这里是插入到组件slot name=\"content\"中的内容</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"child\"</span>&gt;</span>这里是插入到组件slot name=\"child\"中的内容<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>但是其结构树仍然非常正常，并没有出现那个所谓的”拷贝”组件<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzcwNTRhNjJkYmM2MGEyNmU5ZGI1ODYzNzNjOGY2OTgyMzg3NTI0LnBuZw?x-oss-process=image/format,png\" alt=\"改写v1.1后的结构树截图\"></li>\n<li>仔细复现了几次，发现：多出来的那个组件会有所延迟。抓住这个问题，想到我们在onReady中，注册了该组件，于是，继续模拟</li>\n</ul>\n</li>\n<li>修改index.js代码，并在component-tag-name组件注册onTap方法，控制显隐  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onReady() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.component = <span class=\"keyword\">this</span>.selectComponent(<span class=\"string\">'#component'</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">onTap() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'onTap'</span>)</span><br><span class=\"line\">  wx.createSelectorQuery().select(<span class=\"string\">'#component'</span>).boundingClientRect(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用自定义组件 popover 中的 onDisplay 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.component.onTap();</span><br><span class=\"line\">  &#125;).exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>最终复现<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmZjQ3OTNhMjUwYTNjMzlhYjBlOGQxMGJhYTllZmI2NDc1NjIyLnBuZw?x-oss-process=image/format,png\" alt=\"官方模拟最终运行截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>得出问题来源：<ul>\n<li>在组件中进行了一次setData</li>\n</ul>\n</li>\n<li>思考背后问题<ul>\n<li>在组件中setData为什么会”拷贝“一份相同的在页面级wxml中？</li>\n<li>猜想一：从<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">WXS响应事件</a>中，我隐隐得到了答案</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzZlYWJjYjdjOTliMzAxNWMwOGQwZmM2YWM3ZmMxMGMzNDU5NDAxLnBuZw?x-oss-process=image/format,png\" alt=\"wxs相应事件\"></li>\n<li>我们在页面级通过selectComponent实例化组件，对选中的组件进行操作，官方可以通过拷贝一份相同的组件，使我们便捷的将事件的处理从2次的逻辑层和渲染层通信以及一次渲染，减少到直接对页面上元素进行操作，即一次逻辑层和渲染层通信以及一次渲染。</li>\n<li>猜想二：问题层面是在微信开发者工具中的wxml，渲染方式对于这种情况就是这样处理的。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>官方已给出问题原因</p>\n<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzJkMWVkZmYyNWIwM2YxZDU2ZGVjYjZhM2NkYjAwMGU5NTE5ODQucG5n?x-oss-process=image/format,png\" alt=\"wxml面板\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何解决问题\"><a href=\"#如何解决问题\" class=\"headerlink\" title=\"如何解决问题\"></a>如何解决问题</h2><ul>\n<li>在popover以及popover-item加入  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options: &#123;</span><br><span class=\"line\">\t\t    multipleSlots: <span class=\"literal\">true</span> <span class=\"comment\">// 在组件定义时的选项中启用多slot支持</span></span><br><span class=\"line\">\t\t  &#125;,</span><br></pre></td></tr></table></figure></li>\n<li>就可以解决了。最后建议slot中可以写上name这样代码可能会更易读。<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>"},{"title":"数组、链表、跳表","date":"2020-04-07T08:18:49.000Z","_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 跳表\n- 补足链表linked list，look up O(n) 的缺陷，升维思想，以空间换时间\n- 数学归纳法\n- 找最近重复问题","source":"_posts/数组、链表、跳表.md","raw":"---\ntitle: 数组、链表、跳表\ndate: 2020-04-07 16:18:49\ntags:\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 跳表\n- 补足链表linked list，look up O(n) 的缺陷，升维思想，以空间换时间\n- 数学归纳法\n- 找最近重复问题","slug":"数组、链表、跳表","published":1,"updated":"2020-04-26T11:01:32.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1wd000x1wp381vy45um","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h2><ul>\n<li>补足链表linked list，look up O(n) 的缺陷，升维思想，以空间换时间</li>\n<li>数学归纳法</li>\n<li>找最近重复问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h2><ul>\n<li>补足链表linked list，look up O(n) 的缺陷，升维思想，以空间换时间</li>\n<li>数学归纳法</li>\n<li>找最近重复问题</li>\n</ul>\n"},{"title":"编程语言通识","date":"2020-04-20T03:18:20.000Z","description":["编程语言通识"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 语言按语法分类\n\n- 非形式语言\n\t- 中文、英文\n- 形式语言（乔姆斯基谱系）**追溯**19世纪50年代\n\t- 0型 无限制文法\n\t- 1型 上下文相关文法\n\t- 2型 上下文无关文法\n\t\t- 大部分计算机语言主体上都是上下文无关文法\n\t\t- 比如Javascript就是上下文无关文法，会在某些点，违反上下文无关文法原则（get）\n\t- 3型 正则文法\n<!-- more -->\n\n## 理解形式语言\n### 产生式（BNF -- Backus-Naur Form）\n- 用尖括号括起来的名称来表示语法结构名\n- 语法结构分成基础结构和需要用其他语法结构定义的复合结构\n\t- 基础结构称终结符\n\t- 复合结构称非终结符\n- 引号和中间的字符表示终结符\n- 可以有括号\n- * 表示重复多次\n- | 表示或\n- + 表示至少一次\n\n#### BNF 表示 四则运算\n- 加法，允许连加\n\t- &lt;Number&gt;::= \"0\" | \"1\" | \"2\" | \"3\" | ... | \"9\"\n\t- &lt;DecimalNumber&gt;::= \"0\" | ((\"1\" | \"2\" | \"3\" | ... \"9\") &lt;Number&gt;*)\n\t- &lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; \"+\" &lt;DecimalNumber&gt;\n\t- 支持多个连加，采用递归：\n\t\t- &lt;AddtiveExpression&gt;::= &lt;AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n\t- 最终：\n\t\t- &lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; | &lt;AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n- 乘法\n\t- &lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; \"*\" &lt;DecimalNumber&gt;\n\t- 1 + 2 * 3\n\t\t- 加法表达式，是由两个乘法表达式加起来的\n\t\t- 1 * 1 + 2 * 3\n\t\t- 因此**加法表示成**\n\t\t\t\n\t\t\t> &lt;AddtiveExpression&gt;::= &lt; MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n- LogicExpression\n\t\n\t> &lt;LogicExpression&gt;::= &lt;AddtiveExpression&gt; | \n\t\t&lt;LogicExpression&gt; \"||\" &lt;AddtiveExpression&gt; |\n\t\t&lt;LogicExpression&gt; \"&&\" &lt;AddtiveExpression&gt;\n- 除法\n\t\n\t> &lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; \"/\" &lt;DecimalNumber&gt;\n- 减法\n\n\t> &lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"-\" &lt;MultiplecativeExpression&gt;\n- 带括号的四则运算\n\t- 括号\n\t\n\t\t> &lt;PrimaryExpression&lt;::= &lt;DecimalNumber&lt; | \"(\" | &lt;LogicExpression&lt; | \")\"\n\t- 乘法表达式便可以变成\n\t\t\n\t\t> &lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; \"*\" &lt; PrimaryExpression&gt;\n\t- 除法，同理乘法，换符号\n\t\n\t\t> &lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; \"/\" &lt; PrimaryExpression&gt;\n\t- 加减\n\t\t\n\t\t> &lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"+\" &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"-\" &lt;MultiplecativeExpression&gt;\n\t\t\n#### 通过 BNF 理解形式语言（乔姆斯基谱系）\n- 0型 无限制文法\n\t- ?::=?\n- 1型 上下文相关文法\n\t- <span style=\"color: red\">?</span>&lt;A&gt;<span style=\"color:blue\">?</span>::=<span style=\"color: red\">?</span>&lt;B&gt;<span style=\"color:blue\">?</span>\n\n\t\n\t\t```javascript\n\t\t{\n\t\t  get a { return 1},\n\t\t  get: 1\n\t\t}\n\t\t```\n\t- 1）类似关键字， 2）get: 属性\n- 2型 上下文无关文法\n\t- &lt;A&gt;::=?\n\t- 2 ** 1 ** 2\n- 3型 正则文法，只允许左递归（Javascript在**出现前，一直遵循着左递归）\n\t- &lt;A&gt;::=&lt;A&gt;?\n\t- &lt;A&gt;::=?&lt;A&gt;<span style=\"color: red\">x</span>\n\t- Javascript 表达式大部分在3型\n\t- ** 右结合\n\t\n\t\t```javascript\n\t\t2 ** 2 --> 4\n\t\t2 ** (2 ** 3) --> 256\n\t\t```\n\t\t- **\n\t\t\n\t\t\t> &lt;ExpExpression&gt; = &lt;MulticativeExpression&gt; | &lt;MulticativeExpression&gt; \"**\" &lt;ExpExpression&gt;\n\n\t\n#### optional 正则表达式+ BNF 表示四则运算\n\n### 其他产生式\n- EBNF ABNF Customized\n\t- ![ECMA-Script EBNF](http://p1.meituan.net/myvideodistribute/1d1c7542767173de3c87f7a9e00a445763429.png)\n\n### 现代语言语言的特例\n- C++，* 可能表示乘号或者指针，具体是哪个，取决于星号前面的标识符是否被声明为类型\n\t- 非形式话语言，语法与语义相关，* 可以在很早之前出现\n- VB中， &lt; 可能是小于号，也可能是 XML 直接量的开始，取决于当前位置是否可以接受 XML 直接量\n\t- 1型 上下文无关文法\n- Python，行首的 tab 符和空格会根据上一行的行首空白以一定规则被处理成虚拟终结符 indent 或者 dedent \n- Javascript，/ 可能是除号，也可能是正则表达式开头，处理方式类似于VB，字符串模板中也需要特殊处理},还有自动插入分号规则\n\t- 同 VB / JSX\n\n## 语言的分类\n\n### 图灵完备性\n- 图灵机（凡是可计算的，都能计算出来）\n- 图灵完备性\n\t- 命令式 -- 图灵机\n\t\t- goto\n\t\t- if 和 while\n\t- 声明式 -- lambda\n\t\t- 递归\n\n### 动态与静态\n- 动态：\n\t- 在用户的设备/在线服务器上\n\t- 产品实际运行时\n\t- Runtime\n- 静态\n\t- 在程序员的设备上\n\t- 产品开发时\n\t- Compiletime\n\t\n#### 类型系统 In 静态语言\n- 动态类型系统和静态类型系统\n\t- 不是说 Typescript 才有类型系统，而是它才有静态类型系统\n- 强类型和弱类型\n\t- String + Number\n\t\t- 产生了隐式的类型转换\n\t- String == Boolean\n\t- C++ 有隐式转换，弱类型\n- 复合类型\n\t- 结构体\n\t- **函数签名**\n\t\t- 参数列表 + 返回值类型\n- 子类型\n\t- 逆变/协变\n\t\t- 协变 --&gt; 凡是能用到Array&lt;Parent&gt;的地方，都能用Array&lt;Child&gt;\n\t\t- 逆变 --&gt; 凡是能用到Array&lt;Child&gt;的地方，都能用Array&lt;Parent&gt;\n\n## 一般命令式编程语言\n### Atom\n### Expression\n### Statement 语句\n### Structure\n### Program\n","source":"_posts/编程语言通识.md","raw":"---\ntitle: 编程语言通识\ndate: 2020-04-20 11:18:20\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- 编程语言通识\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 语言按语法分类\n\n- 非形式语言\n\t- 中文、英文\n- 形式语言（乔姆斯基谱系）**追溯**19世纪50年代\n\t- 0型 无限制文法\n\t- 1型 上下文相关文法\n\t- 2型 上下文无关文法\n\t\t- 大部分计算机语言主体上都是上下文无关文法\n\t\t- 比如Javascript就是上下文无关文法，会在某些点，违反上下文无关文法原则（get）\n\t- 3型 正则文法\n<!-- more -->\n\n## 理解形式语言\n### 产生式（BNF -- Backus-Naur Form）\n- 用尖括号括起来的名称来表示语法结构名\n- 语法结构分成基础结构和需要用其他语法结构定义的复合结构\n\t- 基础结构称终结符\n\t- 复合结构称非终结符\n- 引号和中间的字符表示终结符\n- 可以有括号\n- * 表示重复多次\n- | 表示或\n- + 表示至少一次\n\n#### BNF 表示 四则运算\n- 加法，允许连加\n\t- &lt;Number&gt;::= \"0\" | \"1\" | \"2\" | \"3\" | ... | \"9\"\n\t- &lt;DecimalNumber&gt;::= \"0\" | ((\"1\" | \"2\" | \"3\" | ... \"9\") &lt;Number&gt;*)\n\t- &lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; \"+\" &lt;DecimalNumber&gt;\n\t- 支持多个连加，采用递归：\n\t\t- &lt;AddtiveExpression&gt;::= &lt;AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n\t- 最终：\n\t\t- &lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; | &lt;AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n- 乘法\n\t- &lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; \"*\" &lt;DecimalNumber&gt;\n\t- 1 + 2 * 3\n\t\t- 加法表达式，是由两个乘法表达式加起来的\n\t\t- 1 * 1 + 2 * 3\n\t\t- 因此**加法表示成**\n\t\t\t\n\t\t\t> &lt;AddtiveExpression&gt;::= &lt; MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"+\" &lt;DecimalNumber&gt;\n- LogicExpression\n\t\n\t> &lt;LogicExpression&gt;::= &lt;AddtiveExpression&gt; | \n\t\t&lt;LogicExpression&gt; \"||\" &lt;AddtiveExpression&gt; |\n\t\t&lt;LogicExpression&gt; \"&&\" &lt;AddtiveExpression&gt;\n- 除法\n\t\n\t> &lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; \"/\" &lt;DecimalNumber&gt;\n- 减法\n\n\t> &lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"-\" &lt;MultiplecativeExpression&gt;\n- 带括号的四则运算\n\t- 括号\n\t\n\t\t> &lt;PrimaryExpression&lt;::= &lt;DecimalNumber&lt; | \"(\" | &lt;LogicExpression&lt; | \")\"\n\t- 乘法表达式便可以变成\n\t\t\n\t\t> &lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; \"*\" &lt; PrimaryExpression&gt;\n\t- 除法，同理乘法，换符号\n\t\n\t\t> &lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; \"/\" &lt; PrimaryExpression&gt;\n\t- 加减\n\t\t\n\t\t> &lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"+\" &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; \"-\" &lt;MultiplecativeExpression&gt;\n\t\t\n#### 通过 BNF 理解形式语言（乔姆斯基谱系）\n- 0型 无限制文法\n\t- ?::=?\n- 1型 上下文相关文法\n\t- <span style=\"color: red\">?</span>&lt;A&gt;<span style=\"color:blue\">?</span>::=<span style=\"color: red\">?</span>&lt;B&gt;<span style=\"color:blue\">?</span>\n\n\t\n\t\t```javascript\n\t\t{\n\t\t  get a { return 1},\n\t\t  get: 1\n\t\t}\n\t\t```\n\t- 1）类似关键字， 2）get: 属性\n- 2型 上下文无关文法\n\t- &lt;A&gt;::=?\n\t- 2 ** 1 ** 2\n- 3型 正则文法，只允许左递归（Javascript在**出现前，一直遵循着左递归）\n\t- &lt;A&gt;::=&lt;A&gt;?\n\t- &lt;A&gt;::=?&lt;A&gt;<span style=\"color: red\">x</span>\n\t- Javascript 表达式大部分在3型\n\t- ** 右结合\n\t\n\t\t```javascript\n\t\t2 ** 2 --> 4\n\t\t2 ** (2 ** 3) --> 256\n\t\t```\n\t\t- **\n\t\t\n\t\t\t> &lt;ExpExpression&gt; = &lt;MulticativeExpression&gt; | &lt;MulticativeExpression&gt; \"**\" &lt;ExpExpression&gt;\n\n\t\n#### optional 正则表达式+ BNF 表示四则运算\n\n### 其他产生式\n- EBNF ABNF Customized\n\t- ![ECMA-Script EBNF](http://p1.meituan.net/myvideodistribute/1d1c7542767173de3c87f7a9e00a445763429.png)\n\n### 现代语言语言的特例\n- C++，* 可能表示乘号或者指针，具体是哪个，取决于星号前面的标识符是否被声明为类型\n\t- 非形式话语言，语法与语义相关，* 可以在很早之前出现\n- VB中， &lt; 可能是小于号，也可能是 XML 直接量的开始，取决于当前位置是否可以接受 XML 直接量\n\t- 1型 上下文无关文法\n- Python，行首的 tab 符和空格会根据上一行的行首空白以一定规则被处理成虚拟终结符 indent 或者 dedent \n- Javascript，/ 可能是除号，也可能是正则表达式开头，处理方式类似于VB，字符串模板中也需要特殊处理},还有自动插入分号规则\n\t- 同 VB / JSX\n\n## 语言的分类\n\n### 图灵完备性\n- 图灵机（凡是可计算的，都能计算出来）\n- 图灵完备性\n\t- 命令式 -- 图灵机\n\t\t- goto\n\t\t- if 和 while\n\t- 声明式 -- lambda\n\t\t- 递归\n\n### 动态与静态\n- 动态：\n\t- 在用户的设备/在线服务器上\n\t- 产品实际运行时\n\t- Runtime\n- 静态\n\t- 在程序员的设备上\n\t- 产品开发时\n\t- Compiletime\n\t\n#### 类型系统 In 静态语言\n- 动态类型系统和静态类型系统\n\t- 不是说 Typescript 才有类型系统，而是它才有静态类型系统\n- 强类型和弱类型\n\t- String + Number\n\t\t- 产生了隐式的类型转换\n\t- String == Boolean\n\t- C++ 有隐式转换，弱类型\n- 复合类型\n\t- 结构体\n\t- **函数签名**\n\t\t- 参数列表 + 返回值类型\n- 子类型\n\t- 逆变/协变\n\t\t- 协变 --&gt; 凡是能用到Array&lt;Parent&gt;的地方，都能用Array&lt;Child&gt;\n\t\t- 逆变 --&gt; 凡是能用到Array&lt;Child&gt;的地方，都能用Array&lt;Parent&gt;\n\n## 一般命令式编程语言\n### Atom\n### Expression\n### Statement 语句\n### Structure\n### Program\n","slug":"编程语言通识","published":1,"updated":"2020-04-26T11:01:22.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1we000z1wp3a2gbemvm","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"语言按语法分类\"><a href=\"#语言按语法分类\" class=\"headerlink\" title=\"语言按语法分类\"></a>语言按语法分类</h2><ul>\n<li>非形式语言<ul>\n<li>中文、英文</li>\n</ul>\n</li>\n<li>形式语言（乔姆斯基谱系）<strong>追溯</strong>19世纪50年代<ul>\n<li>0型 无限制文法</li>\n<li>1型 上下文相关文法</li>\n<li>2型 上下文无关文法<ul>\n<li>大部分计算机语言主体上都是上下文无关文法</li>\n<li>比如Javascript就是上下文无关文法，会在某些点，违反上下文无关文法原则（get）</li>\n</ul>\n</li>\n<li>3型 正则文法<a id=\"more\"></a>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"理解形式语言\"><a href=\"#理解形式语言\" class=\"headerlink\" title=\"理解形式语言\"></a>理解形式语言</h2><h3 id=\"产生式（BNF-–-Backus-Naur-Form）\"><a href=\"#产生式（BNF-–-Backus-Naur-Form）\" class=\"headerlink\" title=\"产生式（BNF – Backus-Naur Form）\"></a>产生式（BNF – Backus-Naur Form）</h3><ul>\n<li>用尖括号括起来的名称来表示语法结构名</li>\n<li>语法结构分成基础结构和需要用其他语法结构定义的复合结构<ul>\n<li>基础结构称终结符</li>\n<li>复合结构称非终结符</li>\n</ul>\n</li>\n<li>引号和中间的字符表示终结符</li>\n<li>可以有括号</li>\n<li><ul>\n<li>表示重复多次</li>\n</ul>\n</li>\n<li>| 表示或</li>\n<li><ul>\n<li>表示至少一次</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BNF-表示-四则运算\"><a href=\"#BNF-表示-四则运算\" class=\"headerlink\" title=\"BNF 表示 四则运算\"></a>BNF 表示 四则运算</h4><ul>\n<li><p>加法，允许连加</p>\n<ul>\n<li>&lt;Number&gt;::= “0” | “1” | “2” | “3” | … | “9”</li>\n<li>&lt;DecimalNumber&gt;::= “0” | ((“1” | “2” | “3” | … “9”) &lt;Number&gt;*)</li>\n<li>&lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; “+” &lt;DecimalNumber&gt;</li>\n<li>支持多个连加，采用递归：<ul>\n<li>&lt;AddtiveExpression&gt;::= &lt;AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</li>\n</ul>\n</li>\n<li>最终：<ul>\n<li>&lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; | &lt;AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>乘法</p>\n<ul>\n<li><p>&lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; “*” &lt;DecimalNumber&gt;</p>\n</li>\n<li><p>1 + 2 * 3</p>\n<ul>\n<li><p>加法表达式，是由两个乘法表达式加起来的</p>\n</li>\n<li><p>1 * 1 + 2 * 3</p>\n</li>\n<li><p>因此<strong>加法表示成</strong></p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt; MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>LogicExpression</p>\n<blockquote>\n<p>&lt;LogicExpression&gt;::= &lt;AddtiveExpression&gt; | </p>\n<pre><code>&amp;lt;LogicExpression&amp;gt; &quot;||&quot; &amp;lt;AddtiveExpression&amp;gt; |\n&amp;lt;LogicExpression&amp;gt; &quot;&amp;&amp;&quot; &amp;lt;AddtiveExpression&amp;gt;</code></pre></blockquote>\n</li>\n<li><p>除法</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; “/“ &lt;DecimalNumber&gt;</p>\n</blockquote>\n</li>\n<li><p>减法</p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “-“ &lt;MultiplecativeExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>带括号的四则运算</p>\n<ul>\n<li><p>括号</p>\n<blockquote>\n<p>&lt;PrimaryExpression&lt;::= &lt;DecimalNumber&lt; | “(“ | &lt;LogicExpression&lt; | “)”</p>\n</blockquote>\n</li>\n<li><p>乘法表达式便可以变成</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; “*” &lt; PrimaryExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>除法，同理乘法，换符号</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; “/“ &lt; PrimaryExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>加减</p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “+” &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “-“ &lt;MultiplecativeExpression&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通过-BNF-理解形式语言（乔姆斯基谱系）\"><a href=\"#通过-BNF-理解形式语言（乔姆斯基谱系）\" class=\"headerlink\" title=\"通过 BNF 理解形式语言（乔姆斯基谱系）\"></a>通过 BNF 理解形式语言（乔姆斯基谱系）</h4><ul>\n<li>0型 无限制文法<ul>\n<li>?::=?</li>\n</ul>\n</li>\n<li>1型 上下文相关文法<ul>\n<li><span style=\"color: red\">?</span>&lt;A&gt;<span style=\"color:blue\">?</span>::=<span style=\"color: red\">?</span>&lt;B&gt;<span style=\"color:blue\">?</span></li>\n</ul>\n</li>\n</ul>\n<pre><code>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a &#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n- 1）类似关键字， 2）get: 属性</code></pre><ul>\n<li><p>2型 上下文无关文法</p>\n<ul>\n<li>&lt;A&gt;::=?</li>\n<li>2 ** 1 ** 2</li>\n</ul>\n</li>\n<li><p>3型 正则文法，只允许左递归（Javascript在**出现前，一直遵循着左递归）</p>\n<ul>\n<li><p>&lt;A&gt;::=&lt;A&gt;?</p>\n</li>\n<li><p>&lt;A&gt;::=?&lt;A&gt;<span style=\"color: red\">x</span></p>\n</li>\n<li><p>Javascript 表达式大部分在3型</p>\n</li>\n<li><p>** 右结合</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> --&gt; <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** (<span class=\"number\">2</span> ** <span class=\"number\">3</span>) --&gt; <span class=\"number\">256</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>**</p>\n<blockquote>\n<p>&lt;ExpExpression&gt; = &lt;MulticativeExpression&gt; | &lt;MulticativeExpression&gt; “**” &lt;ExpExpression&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"optional-正则表达式-BNF-表示四则运算\"><a href=\"#optional-正则表达式-BNF-表示四则运算\" class=\"headerlink\" title=\"optional 正则表达式+ BNF 表示四则运算\"></a>optional 正则表达式+ BNF 表示四则运算</h4><h3 id=\"其他产生式\"><a href=\"#其他产生式\" class=\"headerlink\" title=\"其他产生式\"></a>其他产生式</h3><ul>\n<li>EBNF ABNF Customized<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/1d1c7542767173de3c87f7a9e00a445763429.png\" alt=\"ECMA-Script EBNF\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"现代语言语言的特例\"><a href=\"#现代语言语言的特例\" class=\"headerlink\" title=\"现代语言语言的特例\"></a>现代语言语言的特例</h3><ul>\n<li>C++，* 可能表示乘号或者指针，具体是哪个，取决于星号前面的标识符是否被声明为类型<ul>\n<li>非形式话语言，语法与语义相关，* 可以在很早之前出现</li>\n</ul>\n</li>\n<li>VB中， &lt; 可能是小于号，也可能是 XML 直接量的开始，取决于当前位置是否可以接受 XML 直接量<ul>\n<li>1型 上下文无关文法</li>\n</ul>\n</li>\n<li>Python，行首的 tab 符和空格会根据上一行的行首空白以一定规则被处理成虚拟终结符 indent 或者 dedent </li>\n<li>Javascript，/ 可能是除号，也可能是正则表达式开头，处理方式类似于VB，字符串模板中也需要特殊处理},还有自动插入分号规则<ul>\n<li>同 VB / JSX</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言的分类\"><a href=\"#语言的分类\" class=\"headerlink\" title=\"语言的分类\"></a>语言的分类</h2><h3 id=\"图灵完备性\"><a href=\"#图灵完备性\" class=\"headerlink\" title=\"图灵完备性\"></a>图灵完备性</h3><ul>\n<li>图灵机（凡是可计算的，都能计算出来）</li>\n<li>图灵完备性<ul>\n<li>命令式 – 图灵机<ul>\n<li>goto</li>\n<li>if 和 while</li>\n</ul>\n</li>\n<li>声明式 – lambda<ul>\n<li>递归</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态与静态\"><a href=\"#动态与静态\" class=\"headerlink\" title=\"动态与静态\"></a>动态与静态</h3><ul>\n<li>动态：<ul>\n<li>在用户的设备/在线服务器上</li>\n<li>产品实际运行时</li>\n<li>Runtime</li>\n</ul>\n</li>\n<li>静态<ul>\n<li>在程序员的设备上</li>\n<li>产品开发时</li>\n<li>Compiletime</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型系统-In-静态语言\"><a href=\"#类型系统-In-静态语言\" class=\"headerlink\" title=\"类型系统 In 静态语言\"></a>类型系统 In 静态语言</h4><ul>\n<li>动态类型系统和静态类型系统<ul>\n<li>不是说 Typescript 才有类型系统，而是它才有静态类型系统</li>\n</ul>\n</li>\n<li>强类型和弱类型<ul>\n<li>String + Number<ul>\n<li>产生了隐式的类型转换</li>\n</ul>\n</li>\n<li>String == Boolean</li>\n<li>C++ 有隐式转换，弱类型</li>\n</ul>\n</li>\n<li>复合类型<ul>\n<li>结构体</li>\n<li><strong>函数签名</strong><ul>\n<li>参数列表 + 返回值类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>子类型<ul>\n<li>逆变/协变<ul>\n<li>协变 –&gt; 凡是能用到Array&lt;Parent&gt;的地方，都能用Array&lt;Child&gt;</li>\n<li>逆变 –&gt; 凡是能用到Array&lt;Child&gt;的地方，都能用Array&lt;Parent&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一般命令式编程语言\"><a href=\"#一般命令式编程语言\" class=\"headerlink\" title=\"一般命令式编程语言\"></a>一般命令式编程语言</h2><h3 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h3><h3 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h3><h3 id=\"Statement-语句\"><a href=\"#Statement-语句\" class=\"headerlink\" title=\"Statement 语句\"></a>Statement 语句</h3><h3 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h3><h3 id=\"Program\"><a href=\"#Program\" class=\"headerlink\" title=\"Program\"></a>Program</h3>","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"语言按语法分类\"><a href=\"#语言按语法分类\" class=\"headerlink\" title=\"语言按语法分类\"></a>语言按语法分类</h2><ul>\n<li>非形式语言<ul>\n<li>中文、英文</li>\n</ul>\n</li>\n<li>形式语言（乔姆斯基谱系）<strong>追溯</strong>19世纪50年代<ul>\n<li>0型 无限制文法</li>\n<li>1型 上下文相关文法</li>\n<li>2型 上下文无关文法<ul>\n<li>大部分计算机语言主体上都是上下文无关文法</li>\n<li>比如Javascript就是上下文无关文法，会在某些点，违反上下文无关文法原则（get）</li>\n</ul>\n</li>\n<li>3型 正则文法","more":"</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"理解形式语言\"><a href=\"#理解形式语言\" class=\"headerlink\" title=\"理解形式语言\"></a>理解形式语言</h2><h3 id=\"产生式（BNF-–-Backus-Naur-Form）\"><a href=\"#产生式（BNF-–-Backus-Naur-Form）\" class=\"headerlink\" title=\"产生式（BNF – Backus-Naur Form）\"></a>产生式（BNF – Backus-Naur Form）</h3><ul>\n<li>用尖括号括起来的名称来表示语法结构名</li>\n<li>语法结构分成基础结构和需要用其他语法结构定义的复合结构<ul>\n<li>基础结构称终结符</li>\n<li>复合结构称非终结符</li>\n</ul>\n</li>\n<li>引号和中间的字符表示终结符</li>\n<li>可以有括号</li>\n<li><ul>\n<li>表示重复多次</li>\n</ul>\n</li>\n<li>| 表示或</li>\n<li><ul>\n<li>表示至少一次</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BNF-表示-四则运算\"><a href=\"#BNF-表示-四则运算\" class=\"headerlink\" title=\"BNF 表示 四则运算\"></a>BNF 表示 四则运算</h4><ul>\n<li><p>加法，允许连加</p>\n<ul>\n<li>&lt;Number&gt;::= “0” | “1” | “2” | “3” | … | “9”</li>\n<li>&lt;DecimalNumber&gt;::= “0” | ((“1” | “2” | “3” | … “9”) &lt;Number&gt;*)</li>\n<li>&lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; “+” &lt;DecimalNumber&gt;</li>\n<li>支持多个连加，采用递归：<ul>\n<li>&lt;AddtiveExpression&gt;::= &lt;AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</li>\n</ul>\n</li>\n<li>最终：<ul>\n<li>&lt;AddtiveExpression&gt;::= &lt;DecimalNumber&gt; | &lt;AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>乘法</p>\n<ul>\n<li><p>&lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; “*” &lt;DecimalNumber&gt;</p>\n</li>\n<li><p>1 + 2 * 3</p>\n<ul>\n<li><p>加法表达式，是由两个乘法表达式加起来的</p>\n</li>\n<li><p>1 * 1 + 2 * 3</p>\n</li>\n<li><p>因此<strong>加法表示成</strong></p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt; MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “+” &lt;DecimalNumber&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>LogicExpression</p>\n<blockquote>\n<p>&lt;LogicExpression&gt;::= &lt;AddtiveExpression&gt; | </p>\n<pre><code>&amp;lt;LogicExpression&amp;gt; &quot;||&quot; &amp;lt;AddtiveExpression&amp;gt; |\n&amp;lt;LogicExpression&amp;gt; &quot;&amp;&amp;&quot; &amp;lt;AddtiveExpression&amp;gt;</code></pre></blockquote>\n</li>\n<li><p>除法</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;DecimalNumber&gt; | &lt; MultiplecativeExpression&gt; “/“ &lt;DecimalNumber&gt;</p>\n</blockquote>\n</li>\n<li><p>减法</p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “-“ &lt;MultiplecativeExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>带括号的四则运算</p>\n<ul>\n<li><p>括号</p>\n<blockquote>\n<p>&lt;PrimaryExpression&lt;::= &lt;DecimalNumber&lt; | “(“ | &lt;LogicExpression&lt; | “)”</p>\n</blockquote>\n</li>\n<li><p>乘法表达式便可以变成</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; “*” &lt; PrimaryExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>除法，同理乘法，换符号</p>\n<blockquote>\n<p>&lt;MultiplecativeExpression&gt;::= &lt;PrimaryExpression&gt; | &lt; MultiplecativeExpression&gt; “/“ &lt; PrimaryExpression&gt;</p>\n</blockquote>\n</li>\n<li><p>加减</p>\n<blockquote>\n<p>&lt;AddtiveExpression&gt;::= &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “+” &lt;MultiplecativeExpression&gt; | &lt; AddtiveExpression&gt; “-“ &lt;MultiplecativeExpression&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通过-BNF-理解形式语言（乔姆斯基谱系）\"><a href=\"#通过-BNF-理解形式语言（乔姆斯基谱系）\" class=\"headerlink\" title=\"通过 BNF 理解形式语言（乔姆斯基谱系）\"></a>通过 BNF 理解形式语言（乔姆斯基谱系）</h4><ul>\n<li>0型 无限制文法<ul>\n<li>?::=?</li>\n</ul>\n</li>\n<li>1型 上下文相关文法<ul>\n<li><span style=\"color: red\">?</span>&lt;A&gt;<span style=\"color:blue\">?</span>::=<span style=\"color: red\">?</span>&lt;B&gt;<span style=\"color:blue\">?</span></li>\n</ul>\n</li>\n</ul>\n<pre><code>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a &#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n- 1）类似关键字， 2）get: 属性</code></pre><ul>\n<li><p>2型 上下文无关文法</p>\n<ul>\n<li>&lt;A&gt;::=?</li>\n<li>2 ** 1 ** 2</li>\n</ul>\n</li>\n<li><p>3型 正则文法，只允许左递归（Javascript在**出现前，一直遵循着左递归）</p>\n<ul>\n<li><p>&lt;A&gt;::=&lt;A&gt;?</p>\n</li>\n<li><p>&lt;A&gt;::=?&lt;A&gt;<span style=\"color: red\">x</span></p>\n</li>\n<li><p>Javascript 表达式大部分在3型</p>\n</li>\n<li><p>** 右结合</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> --&gt; <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** (<span class=\"number\">2</span> ** <span class=\"number\">3</span>) --&gt; <span class=\"number\">256</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>**</p>\n<blockquote>\n<p>&lt;ExpExpression&gt; = &lt;MulticativeExpression&gt; | &lt;MulticativeExpression&gt; “**” &lt;ExpExpression&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"optional-正则表达式-BNF-表示四则运算\"><a href=\"#optional-正则表达式-BNF-表示四则运算\" class=\"headerlink\" title=\"optional 正则表达式+ BNF 表示四则运算\"></a>optional 正则表达式+ BNF 表示四则运算</h4><h3 id=\"其他产生式\"><a href=\"#其他产生式\" class=\"headerlink\" title=\"其他产生式\"></a>其他产生式</h3><ul>\n<li>EBNF ABNF Customized<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/1d1c7542767173de3c87f7a9e00a445763429.png\" alt=\"ECMA-Script EBNF\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"现代语言语言的特例\"><a href=\"#现代语言语言的特例\" class=\"headerlink\" title=\"现代语言语言的特例\"></a>现代语言语言的特例</h3><ul>\n<li>C++，* 可能表示乘号或者指针，具体是哪个，取决于星号前面的标识符是否被声明为类型<ul>\n<li>非形式话语言，语法与语义相关，* 可以在很早之前出现</li>\n</ul>\n</li>\n<li>VB中， &lt; 可能是小于号，也可能是 XML 直接量的开始，取决于当前位置是否可以接受 XML 直接量<ul>\n<li>1型 上下文无关文法</li>\n</ul>\n</li>\n<li>Python，行首的 tab 符和空格会根据上一行的行首空白以一定规则被处理成虚拟终结符 indent 或者 dedent </li>\n<li>Javascript，/ 可能是除号，也可能是正则表达式开头，处理方式类似于VB，字符串模板中也需要特殊处理},还有自动插入分号规则<ul>\n<li>同 VB / JSX</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言的分类\"><a href=\"#语言的分类\" class=\"headerlink\" title=\"语言的分类\"></a>语言的分类</h2><h3 id=\"图灵完备性\"><a href=\"#图灵完备性\" class=\"headerlink\" title=\"图灵完备性\"></a>图灵完备性</h3><ul>\n<li>图灵机（凡是可计算的，都能计算出来）</li>\n<li>图灵完备性<ul>\n<li>命令式 – 图灵机<ul>\n<li>goto</li>\n<li>if 和 while</li>\n</ul>\n</li>\n<li>声明式 – lambda<ul>\n<li>递归</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态与静态\"><a href=\"#动态与静态\" class=\"headerlink\" title=\"动态与静态\"></a>动态与静态</h3><ul>\n<li>动态：<ul>\n<li>在用户的设备/在线服务器上</li>\n<li>产品实际运行时</li>\n<li>Runtime</li>\n</ul>\n</li>\n<li>静态<ul>\n<li>在程序员的设备上</li>\n<li>产品开发时</li>\n<li>Compiletime</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型系统-In-静态语言\"><a href=\"#类型系统-In-静态语言\" class=\"headerlink\" title=\"类型系统 In 静态语言\"></a>类型系统 In 静态语言</h4><ul>\n<li>动态类型系统和静态类型系统<ul>\n<li>不是说 Typescript 才有类型系统，而是它才有静态类型系统</li>\n</ul>\n</li>\n<li>强类型和弱类型<ul>\n<li>String + Number<ul>\n<li>产生了隐式的类型转换</li>\n</ul>\n</li>\n<li>String == Boolean</li>\n<li>C++ 有隐式转换，弱类型</li>\n</ul>\n</li>\n<li>复合类型<ul>\n<li>结构体</li>\n<li><strong>函数签名</strong><ul>\n<li>参数列表 + 返回值类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>子类型<ul>\n<li>逆变/协变<ul>\n<li>协变 –&gt; 凡是能用到Array&lt;Parent&gt;的地方，都能用Array&lt;Child&gt;</li>\n<li>逆变 –&gt; 凡是能用到Array&lt;Child&gt;的地方，都能用Array&lt;Parent&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一般命令式编程语言\"><a href=\"#一般命令式编程语言\" class=\"headerlink\" title=\"一般命令式编程语言\"></a>一般命令式编程语言</h2><h3 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h3><h3 id=\"Expression\"><a href=\"#Expression\" class=\"headerlink\" title=\"Expression\"></a>Expression</h3><h3 id=\"Statement-语句\"><a href=\"#Statement-语句\" class=\"headerlink\" title=\"Statement 语句\"></a>Statement 语句</h3><h3 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h3><h3 id=\"Program\"><a href=\"#Program\" class=\"headerlink\" title=\"Program\"></a>Program</h3>"},{"title":"【未完】计算机图形学初探","date":"2020-04-15T01:42:45.000Z","description":["记录 计算机图形学 方面的学习过程🤔"],"_content":"\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录 计算机图形学 方面的学习过程🤔\n\n <!-- more -->\n\n## 主要概念\n- 前端与图形学\n\t- shader\n- 图形学应用场景\n\t- Image\n\t\t- pattern（多用于背景）\n\t\t- photo\n\t\t- shape\n\t- 来自数学的图形--分形\n\t- 来自物理的图形--光的衍射\n\t\t- 相变\n\t\t- 绿幕\n\t\t\t- PNG24 --> 2张 jpg\n\t\t- 3D效果\n\t\t\t- three.js\n\t\t\t- babylon.js\n- 图形学基础设施\n\t- \n\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/计算机图形学初探.md","raw":"---\ntitle: 【未完】计算机图形学初探\ndate: 2020-04-15 09:42:45\ntags:\n- 计算机图形学\ncategories:\n- 计算机图形学\ndescription:\n- 记录 计算机图形学 方面的学习过程🤔\n---\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 记录 计算机图形学 方面的学习过程🤔\n\n <!-- more -->\n\n## 主要概念\n- 前端与图形学\n\t- shader\n- 图形学应用场景\n\t- Image\n\t\t- pattern（多用于背景）\n\t\t- photo\n\t\t- shape\n\t- 来自数学的图形--分形\n\t- 来自物理的图形--光的衍射\n\t\t- 相变\n\t\t- 绿幕\n\t\t\t- PNG24 --> 2张 jpg\n\t\t- 3D效果\n\t\t\t- three.js\n\t\t\t- babylon.js\n- 图形学基础设施\n\t- \n\n\n## 写在后面\n- 祝大家多多发财\n","slug":"计算机图形学初探","published":1,"updated":"2020-04-26T11:00:25.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1wf00131wp382831seu","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li><p>记录 计算机图形学 方面的学习过程🤔</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>前端与图形学<ul>\n<li>shader</li>\n</ul>\n</li>\n<li>图形学应用场景<ul>\n<li>Image<ul>\n<li>pattern（多用于背景）</li>\n<li>photo</li>\n<li>shape</li>\n</ul>\n</li>\n<li>来自数学的图形–分形</li>\n<li>来自物理的图形–光的衍射<ul>\n<li>相变</li>\n<li>绿幕<ul>\n<li>PNG24 –&gt; 2张 jpg</li>\n</ul>\n</li>\n<li>3D效果<ul>\n<li>three.js</li>\n<li>babylon.js</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"图形学基础设施\"><a href=\"#图形学基础设施\" class=\"headerlink\" title=\"图形学基础设施\"></a>图形学基础设施</h2></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li><p>记录 计算机图形学 方面的学习过程🤔</p>","more":"</li>\n</ul>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>前端与图形学<ul>\n<li>shader</li>\n</ul>\n</li>\n<li>图形学应用场景<ul>\n<li>Image<ul>\n<li>pattern（多用于背景）</li>\n<li>photo</li>\n<li>shape</li>\n</ul>\n</li>\n<li>来自数学的图形–分形</li>\n<li>来自物理的图形–光的衍射<ul>\n<li>相变</li>\n<li>绿幕<ul>\n<li>PNG24 –&gt; 2张 jpg</li>\n</ul>\n</li>\n<li>3D效果<ul>\n<li>three.js</li>\n<li>babylon.js</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"图形学基础设施\"><a href=\"#图形学基础设施\" class=\"headerlink\" title=\"图形学基础设施\"></a>图形学基础设施</h2></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"自己的前端知识体系","date":"2020-04-12T14:48:53.000Z","description":["理一下自己的技术体系吧"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 理一下自己的技术体系吧\n\n<!-- more -->\n\n## 技术体系脑图\n- ![技术体系脑图](http://p0.meituan.net/myvideodistribute/49daa01a2bbdab251434a26a618376c53934435.png)\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/自己的前端知识体系.md","raw":"---\ntitle: 自己的前端知识体系\ndate: 2020-04-12 22:48:53\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- 理一下自己的技术体系吧\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 理一下自己的技术体系吧\n\n<!-- more -->\n\n## 技术体系脑图\n- ![技术体系脑图](http://p0.meituan.net/myvideodistribute/49daa01a2bbdab251434a26a618376c53934435.png)\n\n## 写在后面\n- 祝大家多多发财\n","slug":"自己的前端知识体系","published":1,"updated":"2020-05-03T23:53:14.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1wg00151wp3a6tq11gg","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>理一下自己的技术体系吧</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"技术体系脑图\"><a href=\"#技术体系脑图\" class=\"headerlink\" title=\"技术体系脑图\"></a>技术体系脑图</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/49daa01a2bbdab251434a26a618376c53934435.png\" alt=\"技术体系脑图\"></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>理一下自己的技术体系吧</li>\n</ul>","more":"<h2 id=\"技术体系脑图\"><a href=\"#技术体系脑图\" class=\"headerlink\" title=\"技术体系脑图\"></a>技术体系脑图</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/49daa01a2bbdab251434a26a618376c53934435.png\" alt=\"技术体系脑图\"></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"CSS-选择器","date":"2020-05-29T08:19:40.000Z","description":["CSS 选择器"],"_content":"\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- CSS 选择器相关知识\n- 本来这个很早就能写完的，周五学了个空翻，周六去上了个身体开发基础课，然后全身酸痛，酸痛到起床都起不来的那种，就拖了两天\n- 但我至少没有鸽掉 嘻嘻嘻 【手动狗头\n\n<!-- more -->\n\n\n## 选择器语法\n\n### 简单选择器\n- *\n- div svg|a\n\t- [SVG](http://www.w3.org/2000/svg)\n\n\t\t```html\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t  <meta charset=\"utf-8\">\n\t\t  <title>JS Bin</title>\n\t\t</head>\n\t\t<body>\n\t\t<svg width=\"100\" height=\"28\" viewBox=\"0 0 100 28\" version=\"1.1\"\n\t\t     xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n\t\t  <desc>Example link01 - a link on an ellipse\n\t\t  </desc>\n\t\t  <a xlink:href=\"http://www.w3.org\">\n\t\t    <text y=\"100%\">name</text>\n\t\t  </a>\n\t\t</svg>\n\t\t<br/>\n\t\t<a href=\"javascript:void 0;\">name</a>\n\t\t</body>\n\t\t</html>\n\t\t```\n\t\t```CSS\n\t\t@namespace svg url(http://www.w3.org/2000/svg);\n\t\t@namespace html url(http://www.w3.org/1999/xhtml);\n\t\tsvg|a {\n\t\t  stroke:blue;\n\t\t  stroke-width:1;\n\t\t}\n\t\t\n\t\thtml|a {\n\t\t  font-size:40px\n\t\t}\n\t\t```\n- .cls\n- \\#id\n- [attr=value]\n\t- 【未完】编写测试用例\n\t- [attr]\n\t\t- 直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中\n\t- [attr=val]\n\t\t- 精确匹配，检查一个元素属性的值是否是 val\n\t- [att~=val]\n\t\t- 多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列\n\t- [att|=val]\n\t\t- 开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管\n- :hover\n- ::before\n\n\n### 复合选择器\n- &lt;简单选择器&gt;&lt;简单选择器&gt;&lt;简单选择器&gt;\n- * 或者 div 必须写在最前面\n\n### 复杂选择器\n- &lt;复合选择器&gt;&lt;sp&gt;&lt;复合选择器&gt;\n\t- 子孙\n\t- 后代，表示选中所有符合条件的后代节点\n- &lt;复合选择器&gt;\">\"&lt;复合选择器&gt;\n\t- 子选择器，只能选择子一级\n\t- 子代，表示选中符合条件的子节点\n- &lt;复合选择器&gt;\"~\"&lt;复合选择器&gt;\n\t- sibling\n\t- 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点\n- &lt;复合选择器&gt;\"+\"&lt;复合选择器&gt;\n\t- sibling\n\t- 直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling\n- &lt;复合选择器&gt;\"||\"&lt;复合选择器&gt;\n\t- selectors-4\n\t- table 里选中一列\n\t- 列选择器，表示选中对应列中符合条件的单元格\n\t\n### 选择器列表\n- 以 comma 分隔的复杂选择器序列\n\n## 选择器优先级\n- [图解 css-specificity](http://www.standardista.com/css3/css-specificity/)\n- [w3 css-specificity](https://www.w3.org/TR/2018/WD-selectors-4-20181121/#specificity-rules)\n- [MDN css-specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)\n- 结论：**[ inline-element,    id,    class | pseudo | attr,    type ]\n:not 伪类不参与计算**\n- exercise\n\t- div#a.b .c[id=x]\n\t\t- [0,1,3,1]\n\t- \\#a:not(#b)\n\t\t- [0,2,0,0]\n\t- *.a\n\t\t- [0,0,1,0]\n\t- div.a\n\t\t- [0,0,1,1]\n\n## 伪类\n### 链接/行为\n- :any-link\n- :link :visited\n- :hover\n- :active\n- :focus\n- :target\n\n### 树结构\n- :empty\n- :nth-child()\n\t- ![:nth-child An+B](http://p0.meituan.net/myvideodistribute/75fe112b20e952564395fc869bf398d694743.png)\n- :nth-last-child()\n- :first-child :last-child :only-child\n\n### 逻辑型\n- :not 伪类\n- :where :has\n\n## 伪元素\n- ::before\n- ::after\n- ::first-line\n\t- 元素的第一行\n\t- first-line 若有 float ，则会脱离文档流出去，然后又选中第一行，又脱离文档流出去循环了\n- ::first-letter\n\t- 元素的第一个字母\n\n## 优化 toy-browser CSS selector match\n- 首先我们可以先观察\n\t- toy-browser 是根据 space 拆分选择器的。那么选择器我们需要处理特殊情况只有 \n\t\t- \\#id.cls1.cls2.cl3\n\t\t- .cls1\\#id.cls2\n\t\t- div.cls1.cls2\n\t\t- .cls1.cls2\n\t- 类型选择器有且只有一个（一对起止标签，一个类型上只能有一个唯一 id，表示一个元素）\n\t- id选择器有且只有一个（一对起止标签，即一个类型，表示一个元素）\n\t\t- 因为没有标识符，只能出现在开头\n\t\t- div.cls1.cls2\n\t\t- 不可能为\n\t\t\t- .cls1div.cls2\n\t- class 选择器可以有多个\n- 所以我们可以第一步，先处理 id 选择器 + 类型选择器特殊情况\n\t\n\t```javascript\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t\n\t  let regId = /(#\\w+)+/g\n\t  let resId = selector.match(regId)\n\t  \n\t  if (resId && resId[0].charAt(0) == \"#\") { // id选择器有标识符#，因此可以出现在任意位置，需要用正则去匹配\n\t    const attr = element.attributes.filter(attr => attr.name === \"id\")[0]\n\t    if (attr && attr.value === resId[0].replace(\"#\", '')) {\n\t      return true\n\t    } else {\n\t      return false\n\t    }\n\t  } else if(selector.charAt(0) !== \"#\" && selector.charAt(0) !== \".\"){ // 只需要判断选择器开头是不是 非 id 选择器标识符 # 或者 class 选择器标识符 .\n\t    if (element.tagName === selector) {\n\t      return true\n\t    } else {\n\t      return false\n\t    }\n\t  }\n\t}\n\n\t```\n- 处理多 class 选择器情况\n\n\t```javascript\n\n\tfunction match(element, selector) {\n\t\n     // some code ...\n\t\n\t  let regClass = /(\\.\\w+)+/g\n\t  let resClass = selector.match(regClass)\n\t\n     // some code ...\n     \n\t\n\t  if (resClass) {\n\t    let resClassArr = []\n\t    for (let i = 0; i < resClass.length; i ++) {\n\t      let tempArr = resClass[i].split('.')\n\t      for (let j = 1; j < tempArr.length; j ++) {\n\t        resClassArr.push(tempArr[j])\n\t      }\n\t    }\n\t    let classAttr = element.attributes.filter(attr => attr.name === \"class\")\n\t    let classAttrRes = []\n\t    // classAttr:  [ { name: 'class', value: 'c2 c3' } ]\n\t    if (classAttr && classAttr[0]) {\n\t      classAttrRes = classAttr[0][\"value\"].split(\" \")\n\t    }\n\t    let tempFlag = null\n\t    for (let i = 0; i < resClassArr.length; i ++) {\n\t      tempFlag = false\n\t      let k = 0\n\t      for (; k < classAttrRes.length; k ++) {\n\t        if (classAttrRes[k] === resClassArr[i]) {\n\t          tempFlag = true\n\t          break\n\t        }\n\t      }\n\t      if (!tempFlag && k === classAttrRes.length) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n     // some code ...\n     \n\t  return true\n\t}\n\n\t```\n\t\n- 最后我们别忘了修改 specificity 的计算逻辑\n\n\t```javascript\n\n\tfunction specificity(selector) {\n\t  const p = [0, 0, 0, 0]\n\t  const selectorParts = selector.split(\" \")\n\t  let regClass = /(\\.\\w+)+/g\n\t  let resClass = selector.match(regClass)\n\t  if (resClass && resClass.length) {\n\t    for (let i = 0; i < resClass.length; i ++) {\n\t      let tempArr = resClass[CSSi].split('.')\n\t      for (let j = 1; j < tempArr.length; j ++) {\n\t        p[2] ++\n\t      }\n\t    }\n\t  }\n\t  for (let part of selectorParts) {\n\t    let regId = /(#\\w+)+/g\n\t    let resId = part.match(regId)\n\t    if (resId && resId[0].charAt(0) == \"#\") {\n\t      p[1] += 1\n\t    } else if (part.charAt(0) !== \"#\" && part.charAt(0) !== \".\"){\n\t      p[3] += 1\n\t    }\n\t  }\n\t  return p\n\t}\n\t```\n\t\n- 测试用例一\n\t\n\t```html\n\t<html maaa=a >\n\t\t<head>\n\t\t  <style>\n\t\t\t#container{\n\t\t\t  width:500px;\n\t\t\t  height:300px;\n\t\t\t  display:flex;\n\t\t\t  background-color:rgb(255,255,255);\n\t\t\t}\n\t\t\t#container #myid{\n\t\t\t\twidth:200px;\n\t\t\t\theight:100px;\n\t\t\t\tbackground-color:rgb(255,0,0)\n\t\t\t}\n\t\t\t#container .c1{\n\t\t\t\tflex:1;\n\t\t\t\tbackground-color:rgb(0,255,0)\n\t\t\t}\n\t\t\t#container .c2#myid.c3{\n\t\t\t\twidth:200px;\n\t\t\t\theight:100px;\n\t\t\t\tbackground-color:rgb(0,0,255)\n\t\t\t}\n\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t  <div id=\"container\">\n\t\t    <div id=\"myid\" class=\"c2 c3\"></div>\n\t\t    <div class=\"c1\"></div>\n\t\t  </div>\n\t\t</body>\n    </html>\n    ```\n    - 运行截图\n    \t- ![运行截图](http://p0.meituan.net/myvideodistribute/4d585e3777f3371a9fd976dce2698bc6163838.png)\n    - css specificity 计算截图\n    \t- ![css specificity 计算截图](http://p1.meituan.net/myvideodistribute/8566a8d6a4fcb229b6a1005946fd686647911.png)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财\n","source":"_posts/CSS-选择器.md","raw":"---\ntitle: CSS-选择器\ndate: 2020-05-29 16:19:40\ntags: \n- CSS\ncategories:\n- CSS\ndescription:\n- CSS 选择器\n---\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- CSS 选择器相关知识\n- 本来这个很早就能写完的，周五学了个空翻，周六去上了个身体开发基础课，然后全身酸痛，酸痛到起床都起不来的那种，就拖了两天\n- 但我至少没有鸽掉 嘻嘻嘻 【手动狗头\n\n<!-- more -->\n\n\n## 选择器语法\n\n### 简单选择器\n- *\n- div svg|a\n\t- [SVG](http://www.w3.org/2000/svg)\n\n\t\t```html\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t  <meta charset=\"utf-8\">\n\t\t  <title>JS Bin</title>\n\t\t</head>\n\t\t<body>\n\t\t<svg width=\"100\" height=\"28\" viewBox=\"0 0 100 28\" version=\"1.1\"\n\t\t     xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n\t\t  <desc>Example link01 - a link on an ellipse\n\t\t  </desc>\n\t\t  <a xlink:href=\"http://www.w3.org\">\n\t\t    <text y=\"100%\">name</text>\n\t\t  </a>\n\t\t</svg>\n\t\t<br/>\n\t\t<a href=\"javascript:void 0;\">name</a>\n\t\t</body>\n\t\t</html>\n\t\t```\n\t\t```CSS\n\t\t@namespace svg url(http://www.w3.org/2000/svg);\n\t\t@namespace html url(http://www.w3.org/1999/xhtml);\n\t\tsvg|a {\n\t\t  stroke:blue;\n\t\t  stroke-width:1;\n\t\t}\n\t\t\n\t\thtml|a {\n\t\t  font-size:40px\n\t\t}\n\t\t```\n- .cls\n- \\#id\n- [attr=value]\n\t- 【未完】编写测试用例\n\t- [attr]\n\t\t- 直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中\n\t- [attr=val]\n\t\t- 精确匹配，检查一个元素属性的值是否是 val\n\t- [att~=val]\n\t\t- 多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列\n\t- [att|=val]\n\t\t- 开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管\n- :hover\n- ::before\n\n\n### 复合选择器\n- &lt;简单选择器&gt;&lt;简单选择器&gt;&lt;简单选择器&gt;\n- * 或者 div 必须写在最前面\n\n### 复杂选择器\n- &lt;复合选择器&gt;&lt;sp&gt;&lt;复合选择器&gt;\n\t- 子孙\n\t- 后代，表示选中所有符合条件的后代节点\n- &lt;复合选择器&gt;\">\"&lt;复合选择器&gt;\n\t- 子选择器，只能选择子一级\n\t- 子代，表示选中符合条件的子节点\n- &lt;复合选择器&gt;\"~\"&lt;复合选择器&gt;\n\t- sibling\n\t- 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点\n- &lt;复合选择器&gt;\"+\"&lt;复合选择器&gt;\n\t- sibling\n\t- 直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling\n- &lt;复合选择器&gt;\"||\"&lt;复合选择器&gt;\n\t- selectors-4\n\t- table 里选中一列\n\t- 列选择器，表示选中对应列中符合条件的单元格\n\t\n### 选择器列表\n- 以 comma 分隔的复杂选择器序列\n\n## 选择器优先级\n- [图解 css-specificity](http://www.standardista.com/css3/css-specificity/)\n- [w3 css-specificity](https://www.w3.org/TR/2018/WD-selectors-4-20181121/#specificity-rules)\n- [MDN css-specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)\n- 结论：**[ inline-element,    id,    class | pseudo | attr,    type ]\n:not 伪类不参与计算**\n- exercise\n\t- div#a.b .c[id=x]\n\t\t- [0,1,3,1]\n\t- \\#a:not(#b)\n\t\t- [0,2,0,0]\n\t- *.a\n\t\t- [0,0,1,0]\n\t- div.a\n\t\t- [0,0,1,1]\n\n## 伪类\n### 链接/行为\n- :any-link\n- :link :visited\n- :hover\n- :active\n- :focus\n- :target\n\n### 树结构\n- :empty\n- :nth-child()\n\t- ![:nth-child An+B](http://p0.meituan.net/myvideodistribute/75fe112b20e952564395fc869bf398d694743.png)\n- :nth-last-child()\n- :first-child :last-child :only-child\n\n### 逻辑型\n- :not 伪类\n- :where :has\n\n## 伪元素\n- ::before\n- ::after\n- ::first-line\n\t- 元素的第一行\n\t- first-line 若有 float ，则会脱离文档流出去，然后又选中第一行，又脱离文档流出去循环了\n- ::first-letter\n\t- 元素的第一个字母\n\n## 优化 toy-browser CSS selector match\n- 首先我们可以先观察\n\t- toy-browser 是根据 space 拆分选择器的。那么选择器我们需要处理特殊情况只有 \n\t\t- \\#id.cls1.cls2.cl3\n\t\t- .cls1\\#id.cls2\n\t\t- div.cls1.cls2\n\t\t- .cls1.cls2\n\t- 类型选择器有且只有一个（一对起止标签，一个类型上只能有一个唯一 id，表示一个元素）\n\t- id选择器有且只有一个（一对起止标签，即一个类型，表示一个元素）\n\t\t- 因为没有标识符，只能出现在开头\n\t\t- div.cls1.cls2\n\t\t- 不可能为\n\t\t\t- .cls1div.cls2\n\t- class 选择器可以有多个\n- 所以我们可以第一步，先处理 id 选择器 + 类型选择器特殊情况\n\t\n\t```javascript\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t\n\t  let regId = /(#\\w+)+/g\n\t  let resId = selector.match(regId)\n\t  \n\t  if (resId && resId[0].charAt(0) == \"#\") { // id选择器有标识符#，因此可以出现在任意位置，需要用正则去匹配\n\t    const attr = element.attributes.filter(attr => attr.name === \"id\")[0]\n\t    if (attr && attr.value === resId[0].replace(\"#\", '')) {\n\t      return true\n\t    } else {\n\t      return false\n\t    }\n\t  } else if(selector.charAt(0) !== \"#\" && selector.charAt(0) !== \".\"){ // 只需要判断选择器开头是不是 非 id 选择器标识符 # 或者 class 选择器标识符 .\n\t    if (element.tagName === selector) {\n\t      return true\n\t    } else {\n\t      return false\n\t    }\n\t  }\n\t}\n\n\t```\n- 处理多 class 选择器情况\n\n\t```javascript\n\n\tfunction match(element, selector) {\n\t\n     // some code ...\n\t\n\t  let regClass = /(\\.\\w+)+/g\n\t  let resClass = selector.match(regClass)\n\t\n     // some code ...\n     \n\t\n\t  if (resClass) {\n\t    let resClassArr = []\n\t    for (let i = 0; i < resClass.length; i ++) {\n\t      let tempArr = resClass[i].split('.')\n\t      for (let j = 1; j < tempArr.length; j ++) {\n\t        resClassArr.push(tempArr[j])\n\t      }\n\t    }\n\t    let classAttr = element.attributes.filter(attr => attr.name === \"class\")\n\t    let classAttrRes = []\n\t    // classAttr:  [ { name: 'class', value: 'c2 c3' } ]\n\t    if (classAttr && classAttr[0]) {\n\t      classAttrRes = classAttr[0][\"value\"].split(\" \")\n\t    }\n\t    let tempFlag = null\n\t    for (let i = 0; i < resClassArr.length; i ++) {\n\t      tempFlag = false\n\t      let k = 0\n\t      for (; k < classAttrRes.length; k ++) {\n\t        if (classAttrRes[k] === resClassArr[i]) {\n\t          tempFlag = true\n\t          break\n\t        }\n\t      }\n\t      if (!tempFlag && k === classAttrRes.length) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n     // some code ...\n     \n\t  return true\n\t}\n\n\t```\n\t\n- 最后我们别忘了修改 specificity 的计算逻辑\n\n\t```javascript\n\n\tfunction specificity(selector) {\n\t  const p = [0, 0, 0, 0]\n\t  const selectorParts = selector.split(\" \")\n\t  let regClass = /(\\.\\w+)+/g\n\t  let resClass = selector.match(regClass)\n\t  if (resClass && resClass.length) {\n\t    for (let i = 0; i < resClass.length; i ++) {\n\t      let tempArr = resClass[CSSi].split('.')\n\t      for (let j = 1; j < tempArr.length; j ++) {\n\t        p[2] ++\n\t      }\n\t    }\n\t  }\n\t  for (let part of selectorParts) {\n\t    let regId = /(#\\w+)+/g\n\t    let resId = part.match(regId)\n\t    if (resId && resId[0].charAt(0) == \"#\") {\n\t      p[1] += 1\n\t    } else if (part.charAt(0) !== \"#\" && part.charAt(0) !== \".\"){\n\t      p[3] += 1\n\t    }\n\t  }\n\t  return p\n\t}\n\t```\n\t\n- 测试用例一\n\t\n\t```html\n\t<html maaa=a >\n\t\t<head>\n\t\t  <style>\n\t\t\t#container{\n\t\t\t  width:500px;\n\t\t\t  height:300px;\n\t\t\t  display:flex;\n\t\t\t  background-color:rgb(255,255,255);\n\t\t\t}\n\t\t\t#container #myid{\n\t\t\t\twidth:200px;\n\t\t\t\theight:100px;\n\t\t\t\tbackground-color:rgb(255,0,0)\n\t\t\t}\n\t\t\t#container .c1{\n\t\t\t\tflex:1;\n\t\t\t\tbackground-color:rgb(0,255,0)\n\t\t\t}\n\t\t\t#container .c2#myid.c3{\n\t\t\t\twidth:200px;\n\t\t\t\theight:100px;\n\t\t\t\tbackground-color:rgb(0,0,255)\n\t\t\t}\n\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t  <div id=\"container\">\n\t\t    <div id=\"myid\" class=\"c2 c3\"></div>\n\t\t    <div class=\"c1\"></div>\n\t\t  </div>\n\t\t</body>\n    </html>\n    ```\n    - 运行截图\n    \t- ![运行截图](http://p0.meituan.net/myvideodistribute/4d585e3777f3371a9fd976dce2698bc6163838.png)\n    - css specificity 计算截图\n    \t- ![css specificity 计算截图](http://p1.meituan.net/myvideodistribute/8566a8d6a4fcb229b6a1005946fd686647911.png)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财\n","slug":"CSS-选择器","published":1,"updated":"2020-06-01T07:59:29.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x1002a1wp31zijf5u6","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>CSS 选择器相关知识</li>\n<li>本来这个很早就能写完的，周五学了个空翻，周六去上了个身体开发基础课，然后全身酸痛，酸痛到起床都起不来的那种，就拖了两天</li>\n<li>但我至少没有鸽掉 嘻嘻嘻 【手动狗头</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"选择器语法\"><a href=\"#选择器语法\" class=\"headerlink\" title=\"选择器语法\"></a>选择器语法</h2><h3 id=\"简单选择器\"><a href=\"#简单选择器\" class=\"headerlink\" title=\"简单选择器\"></a>简单选择器</h3><ul>\n<li><p>*</p>\n</li>\n<li><p>div svg|a</p>\n<ul>\n<li><p><a href=\"http://www.w3.org/2000/svg\" target=\"_blank\" rel=\"noopener\">SVG</a></p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"28\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 28\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">xmlns:xlink</span>=<span class=\"string\">\"http://www.w3.org/1999/xlink\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">desc</span>&gt;</span>Example link01 - a link on an ellipse</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">desc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"http://www.w3.org\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100%\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void 0;\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@namespace</span> svg url(<span class=\"attribute\">http:</span>//www.w3.org/<span class=\"number\">2000</span>/svg);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> html url(<span class=\"attribute\">http:</span>//www.w3.org/<span class=\"number\">1999</span>/xhtml);</span><br><span class=\"line\">svg|a &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">stroke</span><span class=\"selector-pseudo\">:blue</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">stroke-width</span><span class=\"selector-pseudo\">:1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">html|a &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:40px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>.cls</p>\n</li>\n<li><p>#id</p>\n</li>\n<li><p>[attr=value]</p>\n<ul>\n<li>【未完】编写测试用例</li>\n<li>[attr]<ul>\n<li>直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中</li>\n</ul>\n</li>\n<li>[attr=val]<ul>\n<li>精确匹配，检查一个元素属性的值是否是 val</li>\n</ul>\n</li>\n<li>[att~=val]<ul>\n<li>多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列</li>\n</ul>\n</li>\n<li>[att|=val]<ul>\n<li>开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>:hover</p>\n</li>\n<li><p>::before</p>\n</li>\n</ul>\n<h3 id=\"复合选择器\"><a href=\"#复合选择器\" class=\"headerlink\" title=\"复合选择器\"></a>复合选择器</h3><ul>\n<li>&lt;简单选择器&gt;&lt;简单选择器&gt;&lt;简单选择器&gt;</li>\n<li><ul>\n<li>或者 div 必须写在最前面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"复杂选择器\"><a href=\"#复杂选择器\" class=\"headerlink\" title=\"复杂选择器\"></a>复杂选择器</h3><ul>\n<li>&lt;复合选择器&gt;&lt;sp&gt;&lt;复合选择器&gt;<ul>\n<li>子孙</li>\n<li>后代，表示选中所有符合条件的后代节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”&gt;”&lt;复合选择器&gt;<ul>\n<li>子选择器，只能选择子一级</li>\n<li>子代，表示选中符合条件的子节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”~”&lt;复合选择器&gt;<ul>\n<li>sibling</li>\n<li>后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”+”&lt;复合选择器&gt;<ul>\n<li>sibling</li>\n<li>直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”||”&lt;复合选择器&gt;<ul>\n<li>selectors-4</li>\n<li>table 里选中一列</li>\n<li>列选择器，表示选中对应列中符合条件的单元格</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择器列表\"><a href=\"#选择器列表\" class=\"headerlink\" title=\"选择器列表\"></a>选择器列表</h3><ul>\n<li>以 comma 分隔的复杂选择器序列</li>\n</ul>\n<h2 id=\"选择器优先级\"><a href=\"#选择器优先级\" class=\"headerlink\" title=\"选择器优先级\"></a>选择器优先级</h2><ul>\n<li><a href=\"http://www.standardista.com/css3/css-specificity/\" target=\"_blank\" rel=\"noopener\">图解 css-specificity</a></li>\n<li><a href=\"https://www.w3.org/TR/2018/WD-selectors-4-20181121/#specificity-rules\" target=\"_blank\" rel=\"noopener\">w3 css-specificity</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">MDN css-specificity</a></li>\n<li>结论：<strong>[ inline-element,    id,    class | pseudo | attr,    type ]<br>:not 伪类不参与计算</strong></li>\n<li>exercise<ul>\n<li>div#a.b .c[id=x]<ul>\n<li>[0,1,3,1]</li>\n</ul>\n</li>\n<li>#a:not(#b)<ul>\n<li>[0,2,0,0]</li>\n</ul>\n</li>\n<li>*.a<ul>\n<li>[0,0,1,0]</li>\n</ul>\n</li>\n<li>div.a<ul>\n<li>[0,0,1,1]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><h3 id=\"链接-行为\"><a href=\"#链接-行为\" class=\"headerlink\" title=\"链接/行为\"></a>链接/行为</h3><ul>\n<li>:any-link</li>\n<li>:link :visited</li>\n<li>:hover</li>\n<li>:active</li>\n<li>:focus</li>\n<li>:target</li>\n</ul>\n<h3 id=\"树结构\"><a href=\"#树结构\" class=\"headerlink\" title=\"树结构\"></a>树结构</h3><ul>\n<li>:empty</li>\n<li>:nth-child()<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/75fe112b20e952564395fc869bf398d694743.png\" alt=\":nth-child An+B\"></li>\n</ul>\n</li>\n<li>:nth-last-child()</li>\n<li>:first-child :last-child :only-child</li>\n</ul>\n<h3 id=\"逻辑型\"><a href=\"#逻辑型\" class=\"headerlink\" title=\"逻辑型\"></a>逻辑型</h3><ul>\n<li>:not 伪类</li>\n<li>:where :has</li>\n</ul>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-line<ul>\n<li>元素的第一行</li>\n<li>first-line 若有 float ，则会脱离文档流出去，然后又选中第一行，又脱离文档流出去循环了</li>\n</ul>\n</li>\n<li>::first-letter<ul>\n<li>元素的第一个字母</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优化-toy-browser-CSS-selector-match\"><a href=\"#优化-toy-browser-CSS-selector-match\" class=\"headerlink\" title=\"优化 toy-browser CSS selector match\"></a>优化 toy-browser CSS selector match</h2><ul>\n<li><p>首先我们可以先观察</p>\n<ul>\n<li>toy-browser 是根据 space 拆分选择器的。那么选择器我们需要处理特殊情况只有 <ul>\n<li>#id.cls1.cls2.cl3</li>\n<li>.cls1#id.cls2</li>\n<li>div.cls1.cls2</li>\n<li>.cls1.cls2</li>\n</ul>\n</li>\n<li>类型选择器有且只有一个（一对起止标签，一个类型上只能有一个唯一 id，表示一个元素）</li>\n<li>id选择器有且只有一个（一对起止标签，即一个类型，表示一个元素）<ul>\n<li>因为没有标识符，只能出现在开头</li>\n<li>div.cls1.cls2</li>\n<li>不可能为<ul>\n<li>.cls1div.cls2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>class 选择器可以有多个</li>\n</ul>\n</li>\n<li><p>所以我们可以第一步，先处理 id 选择器 + 类型选择器特殊情况</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> regId = <span class=\"regexp\">/(#\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resId = selector.match(regId)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resId &amp;&amp; resId[<span class=\"number\">0</span>].charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123; <span class=\"comment\">// id选择器有标识符#，因此可以出现在任意位置，需要用正则去匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"id\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === resId[<span class=\"number\">0</span>].replace(<span class=\"string\">\"#\"</span>, <span class=\"string\">''</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(selector.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\"#\"</span> &amp;&amp; selector.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\".\"</span>)&#123; <span class=\"comment\">// 只需要判断选择器开头是不是 非 id 选择器标识符 # 或者 class 选择器标识符 .</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.tagName === selector) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理多 class 选择器情况</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> regClass = <span class=\"regexp\">/(\\.\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resClass = selector.match(regClass)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resClass) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resClassArr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClass.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempArr = resClass[i].split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; tempArr.length; j ++) &#123;</span><br><span class=\"line\">        resClassArr.push(tempArr[j])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> classAttr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> classAttrRes = []</span><br><span class=\"line\">    <span class=\"comment\">// classAttr:  [ &#123; name: 'class', value: 'c2 c3' &#125; ]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classAttr &amp;&amp; classAttr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      classAttrRes = classAttr[<span class=\"number\">0</span>][<span class=\"string\">\"value\"</span>].split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempFlag = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClassArr.length; i ++) &#123;</span><br><span class=\"line\">      tempFlag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> k = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (; k &lt; classAttrRes.length; k ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classAttrRes[k] === resClassArr[i]) &#123;</span><br><span class=\"line\">          tempFlag = <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!tempFlag &amp;&amp; k === classAttrRes.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后我们别忘了修改 specificity 的计算逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> regClass = <span class=\"regexp\">/(\\.\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resClass = selector.match(regClass)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resClass &amp;&amp; resClass.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClass.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempArr = resClass[CSSi].split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; tempArr.length; j ++) &#123;</span><br><span class=\"line\">        p[<span class=\"number\">2</span>] ++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regId = <span class=\"regexp\">/(#\\w+)+/g</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resId = part.match(regId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resId &amp;&amp; resId[<span class=\"number\">0</span>].charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\"#\"</span> &amp;&amp; part.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\".\"</span>)&#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例一</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:500px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:flex</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,255,255);</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,0,0)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c1</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">flex</span><span class=\"selector-pseudo\">:1</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,255,0)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c2</span><span class=\"selector-id\">#myid</span><span class=\"selector-class\">.c3</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,0,255)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c2 c3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行截图<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4d585e3777f3371a9fd976dce2698bc6163838.png\" alt=\"运行截图\"></li>\n</ul>\n</li>\n<li>css specificity 计算截图<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/8566a8d6a4fcb229b6a1005946fd686647911.png\" alt=\"css specificity 计算截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>CSS 选择器相关知识</li>\n<li>本来这个很早就能写完的，周五学了个空翻，周六去上了个身体开发基础课，然后全身酸痛，酸痛到起床都起不来的那种，就拖了两天</li>\n<li>但我至少没有鸽掉 嘻嘻嘻 【手动狗头</li>\n</ul>","more":"<h2 id=\"选择器语法\"><a href=\"#选择器语法\" class=\"headerlink\" title=\"选择器语法\"></a>选择器语法</h2><h3 id=\"简单选择器\"><a href=\"#简单选择器\" class=\"headerlink\" title=\"简单选择器\"></a>简单选择器</h3><ul>\n<li><p>*</p>\n</li>\n<li><p>div svg|a</p>\n<ul>\n<li><p><a href=\"http://www.w3.org/2000/svg\" target=\"_blank\" rel=\"noopener\">SVG</a></p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"28\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 28\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">xmlns:xlink</span>=<span class=\"string\">\"http://www.w3.org/1999/xlink\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">desc</span>&gt;</span>Example link01 - a link on an ellipse</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">desc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"http://www.w3.org\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100%\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void 0;\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@namespace</span> svg url(<span class=\"attribute\">http:</span>//www.w3.org/<span class=\"number\">2000</span>/svg);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> html url(<span class=\"attribute\">http:</span>//www.w3.org/<span class=\"number\">1999</span>/xhtml);</span><br><span class=\"line\">svg|a &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">stroke</span><span class=\"selector-pseudo\">:blue</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">stroke-width</span><span class=\"selector-pseudo\">:1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">html|a &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:40px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>.cls</p>\n</li>\n<li><p>#id</p>\n</li>\n<li><p>[attr=value]</p>\n<ul>\n<li>【未完】编写测试用例</li>\n<li>[attr]<ul>\n<li>直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中</li>\n</ul>\n</li>\n<li>[attr=val]<ul>\n<li>精确匹配，检查一个元素属性的值是否是 val</li>\n</ul>\n</li>\n<li>[att~=val]<ul>\n<li>多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列</li>\n</ul>\n</li>\n<li>[att|=val]<ul>\n<li>开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>:hover</p>\n</li>\n<li><p>::before</p>\n</li>\n</ul>\n<h3 id=\"复合选择器\"><a href=\"#复合选择器\" class=\"headerlink\" title=\"复合选择器\"></a>复合选择器</h3><ul>\n<li>&lt;简单选择器&gt;&lt;简单选择器&gt;&lt;简单选择器&gt;</li>\n<li><ul>\n<li>或者 div 必须写在最前面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"复杂选择器\"><a href=\"#复杂选择器\" class=\"headerlink\" title=\"复杂选择器\"></a>复杂选择器</h3><ul>\n<li>&lt;复合选择器&gt;&lt;sp&gt;&lt;复合选择器&gt;<ul>\n<li>子孙</li>\n<li>后代，表示选中所有符合条件的后代节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”&gt;”&lt;复合选择器&gt;<ul>\n<li>子选择器，只能选择子一级</li>\n<li>子代，表示选中符合条件的子节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”~”&lt;复合选择器&gt;<ul>\n<li>sibling</li>\n<li>后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”+”&lt;复合选择器&gt;<ul>\n<li>sibling</li>\n<li>直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling</li>\n</ul>\n</li>\n<li>&lt;复合选择器&gt;”||”&lt;复合选择器&gt;<ul>\n<li>selectors-4</li>\n<li>table 里选中一列</li>\n<li>列选择器，表示选中对应列中符合条件的单元格</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择器列表\"><a href=\"#选择器列表\" class=\"headerlink\" title=\"选择器列表\"></a>选择器列表</h3><ul>\n<li>以 comma 分隔的复杂选择器序列</li>\n</ul>\n<h2 id=\"选择器优先级\"><a href=\"#选择器优先级\" class=\"headerlink\" title=\"选择器优先级\"></a>选择器优先级</h2><ul>\n<li><a href=\"http://www.standardista.com/css3/css-specificity/\" target=\"_blank\" rel=\"noopener\">图解 css-specificity</a></li>\n<li><a href=\"https://www.w3.org/TR/2018/WD-selectors-4-20181121/#specificity-rules\" target=\"_blank\" rel=\"noopener\">w3 css-specificity</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">MDN css-specificity</a></li>\n<li>结论：<strong>[ inline-element,    id,    class | pseudo | attr,    type ]<br>:not 伪类不参与计算</strong></li>\n<li>exercise<ul>\n<li>div#a.b .c[id=x]<ul>\n<li>[0,1,3,1]</li>\n</ul>\n</li>\n<li>#a:not(#b)<ul>\n<li>[0,2,0,0]</li>\n</ul>\n</li>\n<li>*.a<ul>\n<li>[0,0,1,0]</li>\n</ul>\n</li>\n<li>div.a<ul>\n<li>[0,0,1,1]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><h3 id=\"链接-行为\"><a href=\"#链接-行为\" class=\"headerlink\" title=\"链接/行为\"></a>链接/行为</h3><ul>\n<li>:any-link</li>\n<li>:link :visited</li>\n<li>:hover</li>\n<li>:active</li>\n<li>:focus</li>\n<li>:target</li>\n</ul>\n<h3 id=\"树结构\"><a href=\"#树结构\" class=\"headerlink\" title=\"树结构\"></a>树结构</h3><ul>\n<li>:empty</li>\n<li>:nth-child()<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/75fe112b20e952564395fc869bf398d694743.png\" alt=\":nth-child An+B\"></li>\n</ul>\n</li>\n<li>:nth-last-child()</li>\n<li>:first-child :last-child :only-child</li>\n</ul>\n<h3 id=\"逻辑型\"><a href=\"#逻辑型\" class=\"headerlink\" title=\"逻辑型\"></a>逻辑型</h3><ul>\n<li>:not 伪类</li>\n<li>:where :has</li>\n</ul>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-line<ul>\n<li>元素的第一行</li>\n<li>first-line 若有 float ，则会脱离文档流出去，然后又选中第一行，又脱离文档流出去循环了</li>\n</ul>\n</li>\n<li>::first-letter<ul>\n<li>元素的第一个字母</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优化-toy-browser-CSS-selector-match\"><a href=\"#优化-toy-browser-CSS-selector-match\" class=\"headerlink\" title=\"优化 toy-browser CSS selector match\"></a>优化 toy-browser CSS selector match</h2><ul>\n<li><p>首先我们可以先观察</p>\n<ul>\n<li>toy-browser 是根据 space 拆分选择器的。那么选择器我们需要处理特殊情况只有 <ul>\n<li>#id.cls1.cls2.cl3</li>\n<li>.cls1#id.cls2</li>\n<li>div.cls1.cls2</li>\n<li>.cls1.cls2</li>\n</ul>\n</li>\n<li>类型选择器有且只有一个（一对起止标签，一个类型上只能有一个唯一 id，表示一个元素）</li>\n<li>id选择器有且只有一个（一对起止标签，即一个类型，表示一个元素）<ul>\n<li>因为没有标识符，只能出现在开头</li>\n<li>div.cls1.cls2</li>\n<li>不可能为<ul>\n<li>.cls1div.cls2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>class 选择器可以有多个</li>\n</ul>\n</li>\n<li><p>所以我们可以第一步，先处理 id 选择器 + 类型选择器特殊情况</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> regId = <span class=\"regexp\">/(#\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resId = selector.match(regId)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resId &amp;&amp; resId[<span class=\"number\">0</span>].charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123; <span class=\"comment\">// id选择器有标识符#，因此可以出现在任意位置，需要用正则去匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"id\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === resId[<span class=\"number\">0</span>].replace(<span class=\"string\">\"#\"</span>, <span class=\"string\">''</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(selector.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\"#\"</span> &amp;&amp; selector.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\".\"</span>)&#123; <span class=\"comment\">// 只需要判断选择器开头是不是 非 id 选择器标识符 # 或者 class 选择器标识符 .</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.tagName === selector) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理多 class 选择器情况</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> regClass = <span class=\"regexp\">/(\\.\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resClass = selector.match(regClass)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resClass) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resClassArr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClass.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempArr = resClass[i].split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; tempArr.length; j ++) &#123;</span><br><span class=\"line\">        resClassArr.push(tempArr[j])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> classAttr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> classAttrRes = []</span><br><span class=\"line\">    <span class=\"comment\">// classAttr:  [ &#123; name: 'class', value: 'c2 c3' &#125; ]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classAttr &amp;&amp; classAttr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      classAttrRes = classAttr[<span class=\"number\">0</span>][<span class=\"string\">\"value\"</span>].split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempFlag = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClassArr.length; i ++) &#123;</span><br><span class=\"line\">      tempFlag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> k = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (; k &lt; classAttrRes.length; k ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classAttrRes[k] === resClassArr[i]) &#123;</span><br><span class=\"line\">          tempFlag = <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!tempFlag &amp;&amp; k === classAttrRes.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// some code ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后我们别忘了修改 specificity 的计算逻辑</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> regClass = <span class=\"regexp\">/(\\.\\w+)+/g</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resClass = selector.match(regClass)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resClass &amp;&amp; resClass.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; resClass.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempArr = resClass[CSSi].split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; tempArr.length; j ++) &#123;</span><br><span class=\"line\">        p[<span class=\"number\">2</span>] ++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regId = <span class=\"regexp\">/(#\\w+)+/g</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resId = part.match(regId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resId &amp;&amp; resId[<span class=\"number\">0</span>].charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\"#\"</span> &amp;&amp; part.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">\".\"</span>)&#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例一</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:500px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:flex</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t  <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,255,255);</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,0,0)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c1</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">flex</span><span class=\"selector-pseudo\">:1</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,255,0)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c2</span><span class=\"selector-id\">#myid</span><span class=\"selector-class\">.c3</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,0,255)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c2 c3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行截图<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4d585e3777f3371a9fd976dce2698bc6163838.png\" alt=\"运行截图\"></li>\n</ul>\n</li>\n<li>css specificity 计算截图<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/8566a8d6a4fcb229b6a1005946fd686647911.png\" alt=\"css specificity 计算截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"OOP-面向对象","date":"2020-04-09T01:27:29.000Z","description":["昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？","简单记录一下自己关于这个问题的思考"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？Javascript 定位究竟是什么？\n- 简单记录一下自己关于这个问题的思考\n<!-- more -->\n\n## OOP Wikipedia\n- 探讨的是面向对象\n- 我们首先可以想想，我们为什么需要封装成对象？\n\t- 我的理解是：我们需要减少我们的操作粒度，每个操作都去落实到 bit 数据是非常庞大的，减少问题求解复杂度\n\t- wiki 上关于 object 特性也给到了支持\n- A feature of objects is an object's procedures that can **access** and **often modify the data fields** of the object with which they are associated (objects have a notion of \"this\" or \"self\").\n\t- 可以和面向过程 (Procedure Oriented) 放在一起说。\n\t- 首先 OOP 是一个很自然的思想，在C语言中也能写出**符合**面向对象思想的代码\n\t\t\n\t\t```c\n\t\t// C语言例子\n\t\tstruct Student{\n\t\t    char *name;  //姓名\n\t\t    int num;  //学号\n\t\t    int age;  //年龄\n\t\t    char group;  //所在学习小组\n\t\t    float score;  //成绩\n\t\t};\n\t\t\n\t\tchar* GetStudentName(struct Student* stu)\n\t\t{\n\t\t    // 略\n\t\t}\n\t\t\n\t\tvoid SetStudentName(struct Student* stu, char* newName)\n\t\t{\n\t\t    // 略\n\t\t}\n\t\t\n\t\tint main()\n\t\t{\n\t\t    struct Student s1, s2, s3, s4; // 创建了多个学生\n\t\t    SetStudentName(&s1, \"小明\");\n\t\t    SetStudentName(&s2, \"小红\");\n\t\t    return 0;\n\t\t}\n\t\t```\n- 其次 OOP 面向对象编程，在做一件什么事情？\n\t- 在面对复杂性业务需求中，面向对象思想可以将业务先进行分析，如果业务需求全新无关联，那我们可以新建一个对象，在里面封装对应的方法；如果业务需求只是一条延展线（比如特定节假日打折），那我们可以继承现有对象，并对现有对象的某些方法（discount），进行特定操作，即多态：用统一的方法对不同的对象进行同样的操作。\n\t\n\t\t```C++\n\t\toverride fun discount(price: Double): Double {\n\t        if (!isCouple()) return price\n\t        if (price > 99) {\n\t            val lucky = Random().nextInt(gifts.size)\n\t            println(\"Congratulations on getting ${gifts[lucky]}!\")\n\t        }\n\t        return price * 0.77\n\t    }\n\t\t```\n\t\t- 而面对这种频繁操作数据单元的使用面向过程编程思想，可能会在现有对象加上判断，万一节假日还要做其他的业务，判断只会越来越多。这就与我们 Nicklaus Wirth 提出的：**程序 = 数据结构 + 算法**，越来越割裂。\n\t- 在我现在的浅薄思考看来：面向对象编程思想比较广泛的 Object-based 实现是想先让不同对象以尽可能的统一特性进行归组，形成“大对象”，然后各个对象变成了这个大对象中衍生出来的基类，并在父类派生出来的对象中，去实现各自解决问题的具体方法。这样当我们在拿到一个问题，我们可以不用去管它的内部实现，我们根据类型就可以知道它能做什么事，这比我们手动去一步一步执行要先进点。**让对象有多态性，把不同对象以同一特性来归组，统一处理。至于所谓继承等概念，是实现的细节**。\n\n## prototype-based programming\n- Languages with abstract data type support which may be used to **resemble OO programming**, but **without all features of object-orientation**. This includes object-based and **prototype-based languages**. Examples: JavaScript, Lua, Modula-2, CLU.\n- The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. **JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class (contrast to class-based programming)**. \n- 我们在大概了解了 OOP 思想后，我们可以继续看看 OOP编程思想的另一种实现“类OOP”--基于原型编程 Javascript 实现\n- 我们可以先从 ECMA-262 规范中找到关于 Object 的定义\n\t- \"Objects are created by using constructors in **new expressions**.\"\n\t- \"Each constructor is a function that has a property named **'prototype' that is used to implement prototype-based inheritance and shared properties**.\"\n\t- \"Every object created by a constructor has an implicit reference (called the object's prototype) to the value of its constructor's 'prototype' property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.\"\n\t- ![ECMA原型链](http://p0.meituan.net/myvideodistribute/54f432d1395e59da48e0e7935ffd7665110363.png)\n- 同时 Douglas Crockford 关于 [prototypal inheritance](https://crockford.com/javascript/prototypal.html)\n\n\t```javascript\n\tfunction object(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    }\n\t```\n\t- \"The object function untangles JavaScript's constructor pattern, achieving true prototypal inheritance. It takes an old object as a parameter and returns an empty new object that inherits from the old one. If we attempt to obtain a member from the new object, and it lacks that key, then the old object will supply the member. Objects inherit from objects.\"\n\t- \"What could be more object oriented than that?\" 😝\n- 也有新的对 Object 的思考\n\t- \"In JavaScript, **an object is an associative array**, augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.\"\n\n## Functional programming\n- Functional programming has its origins in lambda calculus.It is a programming paradigm —- a style of building the structure and elements of computer programs -- that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.\n- One of the key motivations for the development of functional programming is making a program easier to understand by eliminating changes in state that **do not depend on function inputs** which are called side effects.\n- side effects include modifying a non-local variable, modifying a static local variable, modifying a mutable argument passed by reference, performing I/O or calling other side-effect functions.\n- referential transparency\n\t- the same language expression can result in different values at different times depending on the state of the executing program.\n\t- Consider C assignment statement x = x * 10, this changes the value assigned to the variable x. Let us say that the initial value of x was 1, then two consecutive evaluations of the variable x yields 10 and 100 respectively. Clearly, replacing x = x * 10 with either 10 or 100 gives a program with different meaning, and so the expression is not referentially transparent. In fact, assignment statements are never referentially transparent.\n\t- Absence of side effects is a necessary, but not sufficient, condition for referential transparency. **Referential transparency means that an expression (such as a function call) can be replaced with its value**. This requires that the expression is pure, that is to say the expression must be deterministic (always give the same value for the same input) and side-effect free.\n\n## 个人总结\n- Javasript 说它是基于面向对象的编程语言是不严谨的，准确的说他是面向对象的编程语言，的基于原型实现的编程语言。\n\n## All Objects in Javascript\n- 可参考[ECMA-Script 262 Chapter18.3 Constructor Properties of the Global Object P399](https://www.ecma-international.org/publications/standards/Ecma-262.htm) \n\n\t| 基本类型|  Error  | 数据结构 & 内置对象  | TypedArray |\n\t| --- | --- | --- | --- |\n\t| Boolean | Error | Array | Float32Array |\n\t| Number | EvalError |\tArrayBuffer |\t Float64Array |\n\t| Object | RangeError | DataView | Int8Array |\n\t| String | ReferenceError | Date | Int16Array |\n\t| Symbol | SyntaxError | Function | Int32Array |\n\t|  | TypeError | Map | Uint8Array |\n\t|  | URIError | Promise | Uint8ClampedArray |\n\t|  |  | Proxy | Uint16Array |\n\t|  |  | RegExp | Uint32Array |\n\t|  |  |Set |  |\n\t|  |  | SharedArrayBuffer |  |\n\t|  |  | WeakMap |  |\n\t|  |  | WeakSet |  |\n\n\n## 参考文献\n- [引入 Javascript 对象](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects)\n- [Flaws of Object Oriented Modeling](https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/)\n- [learn object oriented thinking & programming](https://books.google.com/books?id=xb-sAQAAQBAJ&printsec=frontcover&dq=isbn:9788090466180&hl=zh-CN&sa=X&ved=0ahUKEwiG-8y8qdroAhWmUt8KHey5Dl0Q6AEIKDAA#v=onepage&q&f=false)\n- [Obejct thinking](https://books.google.com/books?id=WzsFCAAAQBAJ&printsec=frontcover&dq=isbn:9780735619654&hl=zh-CN&sa=X&ved=0ahUKEwiqzaPSqNroAhVvUd8KHc80CYEQ6AEIKDAA#v=onepage&q&f=false)\n- [Javascript Object-orientation (prototype-based)](https://en.wikipedia.org/wiki/JavaScript)\n- [Introduction to Object Oriented Programming Concepts (OOP) and More](https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep)\n- [Functional_programming wikipedia](https://en.wikipedia.org/wiki/Functional_programming)\n- [Side effect wikipedia](https://en.wikipedia.org/wiki/Side_effect_(computer_science))\n- [Object-oriented programming wikipedia](https://en.wikipedia.org/wiki/Object-oriented_programming)\n\n\n## 写在后面\n- 有对 Object 以及对 reference 产生的 side effects \n新的认识\n- 闭包 closure\n\t- A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: The lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.\n- 祝大家多多发财\n\n\n\n","source":"_posts/OOP-面向对象.md","raw":"---\ntitle: OOP-面向对象\ndate: 2020-04-09 09:27:29\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- 昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？\n- 简单记录一下自己关于这个问题的思考\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？Javascript 定位究竟是什么？\n- 简单记录一下自己关于这个问题的思考\n<!-- more -->\n\n## OOP Wikipedia\n- 探讨的是面向对象\n- 我们首先可以想想，我们为什么需要封装成对象？\n\t- 我的理解是：我们需要减少我们的操作粒度，每个操作都去落实到 bit 数据是非常庞大的，减少问题求解复杂度\n\t- wiki 上关于 object 特性也给到了支持\n- A feature of objects is an object's procedures that can **access** and **often modify the data fields** of the object with which they are associated (objects have a notion of \"this\" or \"self\").\n\t- 可以和面向过程 (Procedure Oriented) 放在一起说。\n\t- 首先 OOP 是一个很自然的思想，在C语言中也能写出**符合**面向对象思想的代码\n\t\t\n\t\t```c\n\t\t// C语言例子\n\t\tstruct Student{\n\t\t    char *name;  //姓名\n\t\t    int num;  //学号\n\t\t    int age;  //年龄\n\t\t    char group;  //所在学习小组\n\t\t    float score;  //成绩\n\t\t};\n\t\t\n\t\tchar* GetStudentName(struct Student* stu)\n\t\t{\n\t\t    // 略\n\t\t}\n\t\t\n\t\tvoid SetStudentName(struct Student* stu, char* newName)\n\t\t{\n\t\t    // 略\n\t\t}\n\t\t\n\t\tint main()\n\t\t{\n\t\t    struct Student s1, s2, s3, s4; // 创建了多个学生\n\t\t    SetStudentName(&s1, \"小明\");\n\t\t    SetStudentName(&s2, \"小红\");\n\t\t    return 0;\n\t\t}\n\t\t```\n- 其次 OOP 面向对象编程，在做一件什么事情？\n\t- 在面对复杂性业务需求中，面向对象思想可以将业务先进行分析，如果业务需求全新无关联，那我们可以新建一个对象，在里面封装对应的方法；如果业务需求只是一条延展线（比如特定节假日打折），那我们可以继承现有对象，并对现有对象的某些方法（discount），进行特定操作，即多态：用统一的方法对不同的对象进行同样的操作。\n\t\n\t\t```C++\n\t\toverride fun discount(price: Double): Double {\n\t        if (!isCouple()) return price\n\t        if (price > 99) {\n\t            val lucky = Random().nextInt(gifts.size)\n\t            println(\"Congratulations on getting ${gifts[lucky]}!\")\n\t        }\n\t        return price * 0.77\n\t    }\n\t\t```\n\t\t- 而面对这种频繁操作数据单元的使用面向过程编程思想，可能会在现有对象加上判断，万一节假日还要做其他的业务，判断只会越来越多。这就与我们 Nicklaus Wirth 提出的：**程序 = 数据结构 + 算法**，越来越割裂。\n\t- 在我现在的浅薄思考看来：面向对象编程思想比较广泛的 Object-based 实现是想先让不同对象以尽可能的统一特性进行归组，形成“大对象”，然后各个对象变成了这个大对象中衍生出来的基类，并在父类派生出来的对象中，去实现各自解决问题的具体方法。这样当我们在拿到一个问题，我们可以不用去管它的内部实现，我们根据类型就可以知道它能做什么事，这比我们手动去一步一步执行要先进点。**让对象有多态性，把不同对象以同一特性来归组，统一处理。至于所谓继承等概念，是实现的细节**。\n\n## prototype-based programming\n- Languages with abstract data type support which may be used to **resemble OO programming**, but **without all features of object-orientation**. This includes object-based and **prototype-based languages**. Examples: JavaScript, Lua, Modula-2, CLU.\n- The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. **JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class (contrast to class-based programming)**. \n- 我们在大概了解了 OOP 思想后，我们可以继续看看 OOP编程思想的另一种实现“类OOP”--基于原型编程 Javascript 实现\n- 我们可以先从 ECMA-262 规范中找到关于 Object 的定义\n\t- \"Objects are created by using constructors in **new expressions**.\"\n\t- \"Each constructor is a function that has a property named **'prototype' that is used to implement prototype-based inheritance and shared properties**.\"\n\t- \"Every object created by a constructor has an implicit reference (called the object's prototype) to the value of its constructor's 'prototype' property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.\"\n\t- ![ECMA原型链](http://p0.meituan.net/myvideodistribute/54f432d1395e59da48e0e7935ffd7665110363.png)\n- 同时 Douglas Crockford 关于 [prototypal inheritance](https://crockford.com/javascript/prototypal.html)\n\n\t```javascript\n\tfunction object(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    }\n\t```\n\t- \"The object function untangles JavaScript's constructor pattern, achieving true prototypal inheritance. It takes an old object as a parameter and returns an empty new object that inherits from the old one. If we attempt to obtain a member from the new object, and it lacks that key, then the old object will supply the member. Objects inherit from objects.\"\n\t- \"What could be more object oriented than that?\" 😝\n- 也有新的对 Object 的思考\n\t- \"In JavaScript, **an object is an associative array**, augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.\"\n\n## Functional programming\n- Functional programming has its origins in lambda calculus.It is a programming paradigm —- a style of building the structure and elements of computer programs -- that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.\n- One of the key motivations for the development of functional programming is making a program easier to understand by eliminating changes in state that **do not depend on function inputs** which are called side effects.\n- side effects include modifying a non-local variable, modifying a static local variable, modifying a mutable argument passed by reference, performing I/O or calling other side-effect functions.\n- referential transparency\n\t- the same language expression can result in different values at different times depending on the state of the executing program.\n\t- Consider C assignment statement x = x * 10, this changes the value assigned to the variable x. Let us say that the initial value of x was 1, then two consecutive evaluations of the variable x yields 10 and 100 respectively. Clearly, replacing x = x * 10 with either 10 or 100 gives a program with different meaning, and so the expression is not referentially transparent. In fact, assignment statements are never referentially transparent.\n\t- Absence of side effects is a necessary, but not sufficient, condition for referential transparency. **Referential transparency means that an expression (such as a function call) can be replaced with its value**. This requires that the expression is pure, that is to say the expression must be deterministic (always give the same value for the same input) and side-effect free.\n\n## 个人总结\n- Javasript 说它是基于面向对象的编程语言是不严谨的，准确的说他是面向对象的编程语言，的基于原型实现的编程语言。\n\n## All Objects in Javascript\n- 可参考[ECMA-Script 262 Chapter18.3 Constructor Properties of the Global Object P399](https://www.ecma-international.org/publications/standards/Ecma-262.htm) \n\n\t| 基本类型|  Error  | 数据结构 & 内置对象  | TypedArray |\n\t| --- | --- | --- | --- |\n\t| Boolean | Error | Array | Float32Array |\n\t| Number | EvalError |\tArrayBuffer |\t Float64Array |\n\t| Object | RangeError | DataView | Int8Array |\n\t| String | ReferenceError | Date | Int16Array |\n\t| Symbol | SyntaxError | Function | Int32Array |\n\t|  | TypeError | Map | Uint8Array |\n\t|  | URIError | Promise | Uint8ClampedArray |\n\t|  |  | Proxy | Uint16Array |\n\t|  |  | RegExp | Uint32Array |\n\t|  |  |Set |  |\n\t|  |  | SharedArrayBuffer |  |\n\t|  |  | WeakMap |  |\n\t|  |  | WeakSet |  |\n\n\n## 参考文献\n- [引入 Javascript 对象](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects)\n- [Flaws of Object Oriented Modeling](https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/)\n- [learn object oriented thinking & programming](https://books.google.com/books?id=xb-sAQAAQBAJ&printsec=frontcover&dq=isbn:9788090466180&hl=zh-CN&sa=X&ved=0ahUKEwiG-8y8qdroAhWmUt8KHey5Dl0Q6AEIKDAA#v=onepage&q&f=false)\n- [Obejct thinking](https://books.google.com/books?id=WzsFCAAAQBAJ&printsec=frontcover&dq=isbn:9780735619654&hl=zh-CN&sa=X&ved=0ahUKEwiqzaPSqNroAhVvUd8KHc80CYEQ6AEIKDAA#v=onepage&q&f=false)\n- [Javascript Object-orientation (prototype-based)](https://en.wikipedia.org/wiki/JavaScript)\n- [Introduction to Object Oriented Programming Concepts (OOP) and More](https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep)\n- [Functional_programming wikipedia](https://en.wikipedia.org/wiki/Functional_programming)\n- [Side effect wikipedia](https://en.wikipedia.org/wiki/Side_effect_(computer_science))\n- [Object-oriented programming wikipedia](https://en.wikipedia.org/wiki/Object-oriented_programming)\n\n\n## 写在后面\n- 有对 Object 以及对 reference 产生的 side effects \n新的认识\n- 闭包 closure\n\t- A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: The lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.\n- 祝大家多多发财\n\n\n\n","slug":"OOP-面向对象","published":1,"updated":"2020-04-29T01:52:23.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x2002b1wp30mgo2vgy","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？Javascript 定位究竟是什么？</li>\n<li>简单记录一下自己关于这个问题的思考<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"OOP-Wikipedia\"><a href=\"#OOP-Wikipedia\" class=\"headerlink\" title=\"OOP Wikipedia\"></a>OOP Wikipedia</h2><ul>\n<li><p>探讨的是面向对象</p>\n</li>\n<li><p>我们首先可以想想，我们为什么需要封装成对象？</p>\n<ul>\n<li>我的理解是：我们需要减少我们的操作粒度，每个操作都去落实到 bit 数据是非常庞大的，减少问题求解复杂度</li>\n<li>wiki 上关于 object 特性也给到了支持</li>\n</ul>\n</li>\n<li><p>A feature of objects is an object’s procedures that can <strong>access</strong> and <strong>often modify the data fields</strong> of the object with which they are associated (objects have a notion of “this” or “self”).</p>\n<ul>\n<li><p>可以和面向过程 (Procedure Oriented) 放在一起说。</p>\n</li>\n<li><p>首先 OOP 是一个很自然的思想，在C语言中也能写出<strong>符合</strong>面向对象思想的代码</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C语言例子</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;  <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;  <span class=\"comment\">//年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> group;  <span class=\"comment\">//所在学习小组</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> score;  <span class=\"comment\">//成绩</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">GetStudentName</span><span class=\"params\">(struct Student* stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetStudentName</span><span class=\"params\">(struct Student* stu, <span class=\"keyword\">char</span>* newName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">s1</span>, <span class=\"title\">s2</span>, <span class=\"title\">s3</span>, <span class=\"title\">s4</span>;</span> <span class=\"comment\">// 创建了多个学生</span></span><br><span class=\"line\">    SetStudentName(&amp;s1, <span class=\"string\">\"小明\"</span>);</span><br><span class=\"line\">    SetStudentName(&amp;s2, <span class=\"string\">\"小红\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>其次 OOP 面向对象编程，在做一件什么事情？</p>\n<ul>\n<li><p>在面对复杂性业务需求中，面向对象思想可以将业务先进行分析，如果业务需求全新无关联，那我们可以新建一个对象，在里面封装对应的方法；如果业务需求只是一条延展线（比如特定节假日打折），那我们可以继承现有对象，并对现有对象的某些方法（discount），进行特定操作，即多态：用统一的方法对不同的对象进行同样的操作。</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">override</span> fun <span class=\"title\">discount</span><span class=\"params\">(price: Double)</span>: Double </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!isCouple()) <span class=\"keyword\">return</span> price</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (price &gt; <span class=\"number\">99</span>) &#123;</span><br><span class=\"line\">           val lucky = Random().nextInt(gifts.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">           <span class=\"built_in\">println</span>(<span class=\"string\">\"Congratulations on getting $&#123;gifts[lucky]&#125;!\"</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> price * <span class=\"number\">0.77</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>而面对这种频繁操作数据单元的使用面向过程编程思想，可能会在现有对象加上判断，万一节假日还要做其他的业务，判断只会越来越多。这就与我们 Nicklaus Wirth 提出的：<strong>程序 = 数据结构 + 算法</strong>，越来越割裂。</li>\n</ul>\n</li>\n<li><p>在我现在的浅薄思考看来：面向对象编程思想比较广泛的 Object-based 实现是想先让不同对象以尽可能的统一特性进行归组，形成“大对象”，然后各个对象变成了这个大对象中衍生出来的基类，并在父类派生出来的对象中，去实现各自解决问题的具体方法。这样当我们在拿到一个问题，我们可以不用去管它的内部实现，我们根据类型就可以知道它能做什么事，这比我们手动去一步一步执行要先进点。<strong>让对象有多态性，把不同对象以同一特性来归组，统一处理。至于所谓继承等概念，是实现的细节</strong>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"prototype-based-programming\"><a href=\"#prototype-based-programming\" class=\"headerlink\" title=\"prototype-based programming\"></a>prototype-based programming</h2><ul>\n<li><p>Languages with abstract data type support which may be used to <strong>resemble OO programming</strong>, but <strong>without all features of object-orientation</strong>. This includes object-based and <strong>prototype-based languages</strong>. Examples: JavaScript, Lua, Modula-2, CLU.</p>\n</li>\n<li><p>The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. <strong>JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class (contrast to class-based programming)</strong>. </p>\n</li>\n<li><p>我们在大概了解了 OOP 思想后，我们可以继续看看 OOP编程思想的另一种实现“类OOP”–基于原型编程 Javascript 实现</p>\n</li>\n<li><p>我们可以先从 ECMA-262 规范中找到关于 Object 的定义</p>\n<ul>\n<li>“Objects are created by using constructors in <strong>new expressions</strong>.”</li>\n<li>“Each constructor is a function that has a property named <strong>‘prototype’ that is used to implement prototype-based inheritance and shared properties</strong>.”</li>\n<li>“Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s ‘prototype’ property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.”</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/54f432d1395e59da48e0e7935ffd7665110363.png\" alt=\"ECMA原型链\"></li>\n</ul>\n</li>\n<li><p>同时 Douglas Crockford 关于 <a href=\"https://crockford.com/javascript/prototypal.html\" target=\"_blank\" rel=\"noopener\">prototypal inheritance</a></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">       F.prototype = o;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>“The object function untangles JavaScript’s constructor pattern, achieving true prototypal inheritance. It takes an old object as a parameter and returns an empty new object that inherits from the old one. If we attempt to obtain a member from the new object, and it lacks that key, then the old object will supply the member. Objects inherit from objects.”</li>\n<li>“What could be more object oriented than that?” 😝</li>\n</ul>\n</li>\n<li><p>也有新的对 Object 的思考</p>\n<ul>\n<li>“In JavaScript, <strong>an object is an associative array</strong>, augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[‘x’] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object’s prototype inheritance chain) can be enumerated using a for…in loop.”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Functional-programming\"><a href=\"#Functional-programming\" class=\"headerlink\" title=\"Functional programming\"></a>Functional programming</h2><ul>\n<li>Functional programming has its origins in lambda calculus.It is a programming paradigm —- a style of building the structure and elements of computer programs – that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.</li>\n<li>One of the key motivations for the development of functional programming is making a program easier to understand by eliminating changes in state that <strong>do not depend on function inputs</strong> which are called side effects.</li>\n<li>side effects include modifying a non-local variable, modifying a static local variable, modifying a mutable argument passed by reference, performing I/O or calling other side-effect functions.</li>\n<li>referential transparency<ul>\n<li>the same language expression can result in different values at different times depending on the state of the executing program.</li>\n<li>Consider C assignment statement x = x * 10, this changes the value assigned to the variable x. Let us say that the initial value of x was 1, then two consecutive evaluations of the variable x yields 10 and 100 respectively. Clearly, replacing x = x * 10 with either 10 or 100 gives a program with different meaning, and so the expression is not referentially transparent. In fact, assignment statements are never referentially transparent.</li>\n<li>Absence of side effects is a necessary, but not sufficient, condition for referential transparency. <strong>Referential transparency means that an expression (such as a function call) can be replaced with its value</strong>. This requires that the expression is pure, that is to say the expression must be deterministic (always give the same value for the same input) and side-effect free.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h2><ul>\n<li>Javasript 说它是基于面向对象的编程语言是不严谨的，准确的说他是面向对象的编程语言，的基于原型实现的编程语言。</li>\n</ul>\n<h2 id=\"All-Objects-in-Javascript\"><a href=\"#All-Objects-in-Javascript\" class=\"headerlink\" title=\"All Objects in Javascript\"></a>All Objects in Javascript</h2><ul>\n<li><p>可参考<a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMA-Script 262 Chapter18.3 Constructor Properties of the Global Object P399</a> </p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>Error</th>\n<th>数据结构 &amp; 内置对象</th>\n<th>TypedArray</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>Error</td>\n<td>Array</td>\n<td>Float32Array</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>EvalError</td>\n<td>ArrayBuffer</td>\n<td>Float64Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>RangeError</td>\n<td>DataView</td>\n<td>Int8Array</td>\n</tr>\n<tr>\n<td>String</td>\n<td>ReferenceError</td>\n<td>Date</td>\n<td>Int16Array</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>SyntaxError</td>\n<td>Function</td>\n<td>Int32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>TypeError</td>\n<td>Map</td>\n<td>Uint8Array</td>\n</tr>\n<tr>\n<td></td>\n<td>URIError</td>\n<td>Promise</td>\n<td>Uint8ClampedArray</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Proxy</td>\n<td>Uint16Array</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>RegExp</td>\n<td>Uint32Array</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Set</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>SharedArrayBuffer</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>WeakMap</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>WeakSet</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects\" target=\"_blank\" rel=\"noopener\">引入 Javascript 对象</a></li>\n<li><a href=\"https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/\" target=\"_blank\" rel=\"noopener\">Flaws of Object Oriented Modeling</a></li>\n<li><a href=\"https://books.google.com/books?id=xb-sAQAAQBAJ&printsec=frontcover&dq=isbn:9788090466180&hl=zh-CN&sa=X&ved=0ahUKEwiG-8y8qdroAhWmUt8KHey5Dl0Q6AEIKDAA#v=onepage&q&f=false\" target=\"_blank\" rel=\"noopener\">learn object oriented thinking &amp; programming</a></li>\n<li><a href=\"https://books.google.com/books?id=WzsFCAAAQBAJ&printsec=frontcover&dq=isbn:9780735619654&hl=zh-CN&sa=X&ved=0ahUKEwiqzaPSqNroAhVvUd8KHc80CYEQ6AEIKDAA#v=onepage&q&f=false\" target=\"_blank\" rel=\"noopener\">Obejct thinking</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">Javascript Object-orientation (prototype-based)</a></li>\n<li><a href=\"https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep\" target=\"_blank\" rel=\"noopener\">Introduction to Object Oriented Programming Concepts (OOP) and More</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"noopener\">Functional_programming wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\" target=\"_blank\" rel=\"noopener\">Side effect wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" target=\"_blank\" rel=\"noopener\">Object-oriented programming wikipedia</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>有对 Object 以及对 reference 产生的 side effects<br>新的认识</li>\n<li>闭包 closure<ul>\n<li>A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: The lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.</li>\n</ul>\n</li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>昨天 Mentor 说以后要开始用 React Hooks（我还没有涉足 ）写点东西，进而谈论到 React 生态一直想推展开来的的函数式编程思想，我不由得想到一个问题：都说 Javascript 不是典型的面向对象编程语言，它并不具备完整的 OOP 该有的特性，它虽引进了 class 语法糖，但只是让对象原型写法更加像面向对象编程语言的写法，那面向对象到底可以理解为什么 ? 🤔 以及函数式编程思想在推什么？Javascript 定位究竟是什么？</li>\n<li>简单记录一下自己关于这个问题的思考","more":"</li>\n</ul>\n<h2 id=\"OOP-Wikipedia\"><a href=\"#OOP-Wikipedia\" class=\"headerlink\" title=\"OOP Wikipedia\"></a>OOP Wikipedia</h2><ul>\n<li><p>探讨的是面向对象</p>\n</li>\n<li><p>我们首先可以想想，我们为什么需要封装成对象？</p>\n<ul>\n<li>我的理解是：我们需要减少我们的操作粒度，每个操作都去落实到 bit 数据是非常庞大的，减少问题求解复杂度</li>\n<li>wiki 上关于 object 特性也给到了支持</li>\n</ul>\n</li>\n<li><p>A feature of objects is an object’s procedures that can <strong>access</strong> and <strong>often modify the data fields</strong> of the object with which they are associated (objects have a notion of “this” or “self”).</p>\n<ul>\n<li><p>可以和面向过程 (Procedure Oriented) 放在一起说。</p>\n</li>\n<li><p>首先 OOP 是一个很自然的思想，在C语言中也能写出<strong>符合</strong>面向对象思想的代码</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C语言例子</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;  <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;  <span class=\"comment\">//年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> group;  <span class=\"comment\">//所在学习小组</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> score;  <span class=\"comment\">//成绩</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">GetStudentName</span><span class=\"params\">(struct Student* stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetStudentName</span><span class=\"params\">(struct Student* stu, <span class=\"keyword\">char</span>* newName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">s1</span>, <span class=\"title\">s2</span>, <span class=\"title\">s3</span>, <span class=\"title\">s4</span>;</span> <span class=\"comment\">// 创建了多个学生</span></span><br><span class=\"line\">    SetStudentName(&amp;s1, <span class=\"string\">\"小明\"</span>);</span><br><span class=\"line\">    SetStudentName(&amp;s2, <span class=\"string\">\"小红\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>其次 OOP 面向对象编程，在做一件什么事情？</p>\n<ul>\n<li><p>在面对复杂性业务需求中，面向对象思想可以将业务先进行分析，如果业务需求全新无关联，那我们可以新建一个对象，在里面封装对应的方法；如果业务需求只是一条延展线（比如特定节假日打折），那我们可以继承现有对象，并对现有对象的某些方法（discount），进行特定操作，即多态：用统一的方法对不同的对象进行同样的操作。</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">override</span> fun <span class=\"title\">discount</span><span class=\"params\">(price: Double)</span>: Double </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!isCouple()) <span class=\"keyword\">return</span> price</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (price &gt; <span class=\"number\">99</span>) &#123;</span><br><span class=\"line\">           val lucky = Random().nextInt(gifts.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">           <span class=\"built_in\">println</span>(<span class=\"string\">\"Congratulations on getting $&#123;gifts[lucky]&#125;!\"</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> price * <span class=\"number\">0.77</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>而面对这种频繁操作数据单元的使用面向过程编程思想，可能会在现有对象加上判断，万一节假日还要做其他的业务，判断只会越来越多。这就与我们 Nicklaus Wirth 提出的：<strong>程序 = 数据结构 + 算法</strong>，越来越割裂。</li>\n</ul>\n</li>\n<li><p>在我现在的浅薄思考看来：面向对象编程思想比较广泛的 Object-based 实现是想先让不同对象以尽可能的统一特性进行归组，形成“大对象”，然后各个对象变成了这个大对象中衍生出来的基类，并在父类派生出来的对象中，去实现各自解决问题的具体方法。这样当我们在拿到一个问题，我们可以不用去管它的内部实现，我们根据类型就可以知道它能做什么事，这比我们手动去一步一步执行要先进点。<strong>让对象有多态性，把不同对象以同一特性来归组，统一处理。至于所谓继承等概念，是实现的细节</strong>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"prototype-based-programming\"><a href=\"#prototype-based-programming\" class=\"headerlink\" title=\"prototype-based programming\"></a>prototype-based programming</h2><ul>\n<li><p>Languages with abstract data type support which may be used to <strong>resemble OO programming</strong>, but <strong>without all features of object-orientation</strong>. This includes object-based and <strong>prototype-based languages</strong>. Examples: JavaScript, Lua, Modula-2, CLU.</p>\n</li>\n<li><p>The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. <strong>JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class (contrast to class-based programming)</strong>. </p>\n</li>\n<li><p>我们在大概了解了 OOP 思想后，我们可以继续看看 OOP编程思想的另一种实现“类OOP”–基于原型编程 Javascript 实现</p>\n</li>\n<li><p>我们可以先从 ECMA-262 规范中找到关于 Object 的定义</p>\n<ul>\n<li>“Objects are created by using constructors in <strong>new expressions</strong>.”</li>\n<li>“Each constructor is a function that has a property named <strong>‘prototype’ that is used to implement prototype-based inheritance and shared properties</strong>.”</li>\n<li>“Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s ‘prototype’ property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.”</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/54f432d1395e59da48e0e7935ffd7665110363.png\" alt=\"ECMA原型链\"></li>\n</ul>\n</li>\n<li><p>同时 Douglas Crockford 关于 <a href=\"https://crockford.com/javascript/prototypal.html\" target=\"_blank\" rel=\"noopener\">prototypal inheritance</a></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">       F.prototype = o;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>“The object function untangles JavaScript’s constructor pattern, achieving true prototypal inheritance. It takes an old object as a parameter and returns an empty new object that inherits from the old one. If we attempt to obtain a member from the new object, and it lacks that key, then the old object will supply the member. Objects inherit from objects.”</li>\n<li>“What could be more object oriented than that?” 😝</li>\n</ul>\n</li>\n<li><p>也有新的对 Object 的思考</p>\n<ul>\n<li>“In JavaScript, <strong>an object is an associative array</strong>, augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[‘x’] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object’s prototype inheritance chain) can be enumerated using a for…in loop.”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Functional-programming\"><a href=\"#Functional-programming\" class=\"headerlink\" title=\"Functional programming\"></a>Functional programming</h2><ul>\n<li>Functional programming has its origins in lambda calculus.It is a programming paradigm —- a style of building the structure and elements of computer programs – that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.</li>\n<li>One of the key motivations for the development of functional programming is making a program easier to understand by eliminating changes in state that <strong>do not depend on function inputs</strong> which are called side effects.</li>\n<li>side effects include modifying a non-local variable, modifying a static local variable, modifying a mutable argument passed by reference, performing I/O or calling other side-effect functions.</li>\n<li>referential transparency<ul>\n<li>the same language expression can result in different values at different times depending on the state of the executing program.</li>\n<li>Consider C assignment statement x = x * 10, this changes the value assigned to the variable x. Let us say that the initial value of x was 1, then two consecutive evaluations of the variable x yields 10 and 100 respectively. Clearly, replacing x = x * 10 with either 10 or 100 gives a program with different meaning, and so the expression is not referentially transparent. In fact, assignment statements are never referentially transparent.</li>\n<li>Absence of side effects is a necessary, but not sufficient, condition for referential transparency. <strong>Referential transparency means that an expression (such as a function call) can be replaced with its value</strong>. This requires that the expression is pure, that is to say the expression must be deterministic (always give the same value for the same input) and side-effect free.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h2><ul>\n<li>Javasript 说它是基于面向对象的编程语言是不严谨的，准确的说他是面向对象的编程语言，的基于原型实现的编程语言。</li>\n</ul>\n<h2 id=\"All-Objects-in-Javascript\"><a href=\"#All-Objects-in-Javascript\" class=\"headerlink\" title=\"All Objects in Javascript\"></a>All Objects in Javascript</h2><ul>\n<li><p>可参考<a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMA-Script 262 Chapter18.3 Constructor Properties of the Global Object P399</a> </p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>Error</th>\n<th>数据结构 &amp; 内置对象</th>\n<th>TypedArray</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>Error</td>\n<td>Array</td>\n<td>Float32Array</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>EvalError</td>\n<td>ArrayBuffer</td>\n<td>Float64Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>RangeError</td>\n<td>DataView</td>\n<td>Int8Array</td>\n</tr>\n<tr>\n<td>String</td>\n<td>ReferenceError</td>\n<td>Date</td>\n<td>Int16Array</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>SyntaxError</td>\n<td>Function</td>\n<td>Int32Array</td>\n</tr>\n<tr>\n<td></td>\n<td>TypeError</td>\n<td>Map</td>\n<td>Uint8Array</td>\n</tr>\n<tr>\n<td></td>\n<td>URIError</td>\n<td>Promise</td>\n<td>Uint8ClampedArray</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Proxy</td>\n<td>Uint16Array</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>RegExp</td>\n<td>Uint32Array</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Set</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>SharedArrayBuffer</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>WeakMap</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>WeakSet</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects\" target=\"_blank\" rel=\"noopener\">引入 Javascript 对象</a></li>\n<li><a href=\"https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/\" target=\"_blank\" rel=\"noopener\">Flaws of Object Oriented Modeling</a></li>\n<li><a href=\"https://books.google.com/books?id=xb-sAQAAQBAJ&printsec=frontcover&dq=isbn:9788090466180&hl=zh-CN&sa=X&ved=0ahUKEwiG-8y8qdroAhWmUt8KHey5Dl0Q6AEIKDAA#v=onepage&q&f=false\" target=\"_blank\" rel=\"noopener\">learn object oriented thinking &amp; programming</a></li>\n<li><a href=\"https://books.google.com/books?id=WzsFCAAAQBAJ&printsec=frontcover&dq=isbn:9780735619654&hl=zh-CN&sa=X&ved=0ahUKEwiqzaPSqNroAhVvUd8KHc80CYEQ6AEIKDAA#v=onepage&q&f=false\" target=\"_blank\" rel=\"noopener\">Obejct thinking</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">Javascript Object-orientation (prototype-based)</a></li>\n<li><a href=\"https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep\" target=\"_blank\" rel=\"noopener\">Introduction to Object Oriented Programming Concepts (OOP) and More</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"noopener\">Functional_programming wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\" target=\"_blank\" rel=\"noopener\">Side effect wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" target=\"_blank\" rel=\"noopener\">Object-oriented programming wikipedia</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>有对 Object 以及对 reference 产生的 side effects<br>新的认识</li>\n<li>闭包 closure<ul>\n<li>A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: The lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.</li>\n</ul>\n</li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Toy-Browser-DAY3","date":"2020-05-17T08:04:30.000Z","description":["浏览器 -- toy-browser"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 我们开始进入到 CSS Computing 啦！！！😘\n- ![CSS Computing](http://p0.meituan.net/myvideodistribute/4bb352346db82d88a68035a6ddad906c81827.png)\n<!-- more -->\n\n\n## 实践记录\n### 实践准备\n\n> npm install css\n\n\n### 第一步：收集 CSS 规则\n- 遇到 style 标签时，我们把 CSS 规则保存起来\n- 这里我们调用 CSS Parser 来分析 CSS 规则\n- 这里我们必须要仔细研究此库分析 CSS 规则的格式\n- computeCss1.js\n\n\t```javascript\n\tconst css = require('css')\n\t\n\t... some code\n\t\n\t// 加入一个新的函数，addCSSRules，这里我们把 CSS 规则暂存到一个数组里\n\tlet rules = []\n\tfunction addCSSRules(text) {\n\t  const ast = css.parse(text)\n\t  console.log(JSON.stringify(ast, null, \"    \"))\n\t  rules.push(...ast.stylesheet.rules)\n\t}\n\t\n\t...some code\n\t\n\tfunction emit(token) {\n\t\n\t  ... some code\n\t  \n\t   else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      /** 遇到 style 标签时，执行添加 CCS 规则的操作 */\n\t      if (top.tagName === \"style\") {\n\t        addCSSRules(top.children[0].content)\n\t      }\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  }\n\t  \n\t  ... some code\n\t  \n\t}\n\t\n\t```\n- 这里，我们需要将添加 CSS 规则操作至元素 pop前，元素 push 后\n\t- 元素 push 后，也就是 style 标签的子元素文本节点，还未挂载到 style 标签上，styles 标签子元素还是空的\n\t- pop 前，我们可以取到这个元素\n\n- 运行结果\n\t- ![第一步运行结果](http://p0.meituan.net/myvideodistribute/01014f5e30127ef5f2b23dd6b7fa44ac153947.png)\n- 文本结果\n\n\t```json\n\t{\n\t    \"type\": \"stylesheet\",\n\t    \"stylesheet\": {\n\t        \"rules\": [\n\t            {\n\t                \"type\": \"rule\",\n\t                \"selectors\": [\n\t                    \"body div #myid\"\n\t                ],\n\t                \"declarations\": [\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"width\",\n\t                        \"value\": \"100px\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 3,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 3,\n\t                                \"column\": 20\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"background-color\",\n\t                        \"value\": \"#ff5000\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 4,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 4,\n\t                                \"column\": 34\n\t                            }\n\t                        }\n\t                    }\n\t                ],\n\t                \"position\": {\n\t                    \"start\": {\n\t                        \"line\": 2,\n\t                        \"column\": 5\n\t                    },\n\t                    \"end\": {\n\t                        \"line\": 5,\n\t                        \"column\": 6\n\t                    }\n\t                }\n\t            },\n\t            {\n\t                \"type\": \"rule\",\n\t                \"selectors\": [\n\t                    \"body div img\"\n\t                ],\n\t                \"declarations\": [\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"width\",\n\t                        \"value\": \"30px\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 7,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 7,\n\t                                \"column\": 19\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"background-color\",\n\t                        \"value\": \"#ff1111\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 8,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 8,\n\t                                \"column\": 34\n\t                            }\n\t                        }\n\t                    }\n\t                ],\n\t                \"position\": {\n\t                    \"start\": {\n\t                        \"line\": 6,\n\t                        \"column\": 5\n\t                    },\n\t                    \"end\": {\n\t                        \"line\": 9,\n\t                        \"column\": 6\n\t                    }\n\t                }\n\t            }\n\t        ],\n\t        \"parsingErrors\": []\n\t    }\n\t}\n\t```\n\n\n\n### 第二步：添加调用\n- 当我们创建一个元素后，立即计算 CSS\n- 理论上，当我们分析一个元素时，所有 CSS 规则已经收集完毕\n- 在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略\n- computeCSS2.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n\t  console.log(rules)\n\t  console.log(\"-=-=-=-=-=-=-=\")\n\t  console.log(\"compute CSS for Element-=-=-=-=-=-=\", element)\n\t  console.log(\"********************************************\")\n\t}\n\t\n\t...some code\n\t\n\tfunction emit(token) {\n\t\n\t  ... some code\n\t  \n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    computeCSS(element)\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t    \n\t    currentTextNode = null\n\t    // console.log('push', element)\n\t  }\n\t  \n\t  ... some code\n\t\n\t}\n\t```\n\t\n- 这里一个元素的创建后，tagName, 属性都加好后，就应该有一个 cumputeCSS 过程\n- 运行结果\n\t- ![第二步：添加调用](http://p1.meituan.net/myvideodistribute/634ec08db6e9b90b38c17656be424e2d127292.png)\n\n\n\n### 第三步：获取父元素序列\n- 在 computeCss 函数中，我们必须知道元素的所有父元素才能判断元素与规则是否匹配\n- 我们从上一步骤的 stack，可以获取本元素所有的父元素\n- 因为我们首先获取的是”当前元素“，所以我们获得和计算父元素匹配的顺序是从内向外\n\t- ![从内向外 CSS 匹配](http://p1.meituan.net/myvideodistribute/68af300e9e207b8a190b7c3893f17ff036554.png)\n- computeCSS3.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n      const elements = stack.slice().reverse()\n\t}\n\t\n\t...some code\n\t\n\t```\n- 运行结果\n\t- ![第三步运行结果](http://p0.meituan.net/myvideodistribute/706c9c25bc5a46f41f8bc11ba2a6854e250838.png)\n- stack.slice() 拷贝原数组，不在 stack 中操作，防御式编程避免影响 stack\n\t\n\n\n### 第四步：拆分选择器\n- 选择器也要从当前元素从外排列\n- 复杂选择器拆成针对单个元素的选择器，用循环匹配父元素队列\n- computeCSS4.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\nfunction specificity(selector) {\n  const p = [0, 0, 0, 0]\n  const selectorParts = selector.split(\" \")\n  for (let part of selectorParts) {\n    if (part.charAt(0) == \"#\") {\n      p[1] += 1\n    } else if (part.charAt(0) == \".\") {\n      p[2] += 1\n    } else {\n      p[3] += 1\n    }\n  }\n  return p\n}\n\nfunction compare(sp1, sp2) {\n  if (sp1[0] - sp2[0]) {\n    return sp1[0] - sp2[0]\n  }\n  if (sp1[1] - sp2[1]) {\n    return sp1[1] - sp2[1]\n  }\n  if (sp1[2] - sp2[2]) {\n    return sp1[2] - sp2[2]\n  }\n  return sp1[3] - sp2[3]\n}\n\n\tfunction computeCSS(element) {\n      const elements = stack.slice().reverse()\n\n\t  if (!element.computedStyle)\n\t    element.computedStyle = {}\n\t  \n\t  for (let rule of rules) {\n\t    const selectorParts = rule.selectors[0].split(\" \").reverse()\n\t\n\t    if (!match(element, selectorParts[0]))\n\t      continue\n\t\n\t    let matched = false\n\t\n\t    let j = 1\n\t\n\t    for (let i = 0; i < elements.length; i ++) {\n\t      if (match(elements[i], selectorParts[j])) {\n\t        j ++\n\t      }\n\t    }\n\t    if (j >= selectorParts.length) {\n\t      matched = true\n\t    }\n\t    if (matched) { // 匹配成功\n\t      console.log(\"Element\", element, \"matched rule\", rule)\n\t    }\n\t  }\n\t}\n\t\n\t...some code\n\t\n\t```\n\n\n### 第五步：计算选择器与元素匹配\n- 根据选择器的类型和元素属性，计算是否与当前元素匹配\n- 这里仅实现了三种基本选择器，实际的浏览器中要处理复合选择器\n- computeCSS5.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t  \n\t  if (selector.charAt(0) == \"#\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"id\")[0]\n\t    if (attr && attr.value === selector.replace(\"#\", ''))\n\t      return true\n\t  } else if (selector.charAt(0) == \".\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"class\")[0]\n\t    if (attr && attr.value === selector.replace(\".\", ''))\n\t      return true\n\t  } else {\n\t    if (element.tagName === selector) {\n\t      return true\n\t    }\n\t  }\n\t  return false\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n- 运行结果\n\t- ![第五步运行结果](http://p0.meituan.net/myvideodistribute/e23fb1db77239166c990b52468b24451353540.png)\n\n#### 第五步优化：实现支持空格的 Class 选择器\n- 假如我们的 html 改成这样：\n\n\t```html\n\t<html maaa=a >\n\t\t<head>\n\t\t    <style>\n\t\tbody div #myid{\n\t\t    width:100px;\n\t\t    background-color: #ff5000;\n\t\t}\n\t\tbody div img{\n\t\t    width:30px;\n\t\t    background-color: #ff1111;\n\t\t}\n\t\t\n\t\tbody div .cls1 {\n\t\t  background-color: #ff9906;\n\t\t}\n\t\t    </style>\n\t\t</head>\n\t\t<body>\n\t\t    <div>\n\t\t        <img id=\"myid\"/>\n\t\t        <img class=\"cls1 cls2\"/>\n\t\t    </div>\n\t\t</body>\n\t</html>\n\t```\n- 在 &lt;img&gt; 增加多个 class 选择器，那我们的选择器 match 可以改成\n\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t  \n\t  if (selector.charAt(0) == \"#\") {\n\t\t    \n\t\t...some code\n\t\t\n\t\t\n\t  } else if (selector.charAt(0) == \".\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"class\")[0]\n\t    if (attr) {\n\t      const attrClassArray = attr.value.split(' ')\n\t      for (let attrClass of attrClassArray) {\n\t        if (attrClass === selector.replace(\".\", '')) {\n\t          return true\n\t        }\n\t      }\n\t    }\n\t  } else {\n\t\t\t    \n\t\t...some code\n\t\t\n\t\t\n\t  }\n\t\t...some code\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n- 思路：\n\t- 我们可以看到\n\t\t- ![多 class 选择器](http://p0.meituan.net/myvideodistribute/a8b9d9396713239928cd8b0af216535e40897.png)\n\t- 我们可以将 元素 attr 根据空格分隔，再利用循环匹配\n- 运行结果\n\t- ![第五步优化运行结果](http://p1.meituan.net/myvideodistribute/1d5533479cdb7d6c1a0af20acdfc4e71146017.png)\n\n### 第六步：生成 computed 属性\n- 一旦选择匹配，就应用选择器到元素上，形成 computedStyle\n- computeCSS6.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t    if (matched) { // 匹配成功\n\t      const computedStyle = element.computedStyle\n\t      for (let declaration of rule.declarations) {\n\t        if (!computedStyle[declaration.property]) {\n\t          computedStyle[declaration.property] = {}\n\t        }\n\t        computedStyle[declaration.property].value = declaration.value\n\t      }\n\t      console.log(element.computedStyle)\n\t    }\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n- 运行结果\n\t- ![第六步运行结果](http://p0.meituan.net/myvideodistribute/71888ca9220eb11196bc00eb407fb05980361.png)\n\n### 第七步：确定规则覆盖关系\n- CSS 规则根据 specificity 和后来优先规则覆盖\n- specificity 是个四元组，越左边权重越高\n- 一个 CSS 规则的 specificity 根据包含的简单选择器相加而成\n- ![selectors-3 specificity](http://p0.meituan.net/myvideodistribute/a50f3ae53878adbacbdcb7798632605e283940.png)\n- computeCSS7.js\n\t\n\t```javascript\n\t\n\t...some code\n\n\tfunction specificity(selector) {\n\t  const p = [0, 0, 0, 0]\n\t  const selectorParts = selector.split(\" \")\n\t  for (let part of selectorParts) {\n\t    if (part.charAt(0) == \"#\") {\n\t      p[1] += 1\n\t    } else if (part.charAt(0) == \".\") {\n\t      p[2] += 1\n\t    } else {\n\t      p[3] += 1\n\t    }\n\t  }\n\t  return p\n\t}\n\t\n\tfunction compare(sp1, sp2) {\n\t  if (sp1[0] - sp2[0]) {\n\t    return sp1[0] - sp2[0]\n\t  }\n\t  if (sp1[1] - sp2[1]) {\n\t    return sp1[1] - sp2[1]\n\t  }\n\t  if (sp1[2] - sp2[2]) {\n\t    return sp1[2] - sp2[2]\n\t  }\n\t  return sp1[3] - sp2[3]\n\t}\n\t\n\t\n\tfunction computeCSS(element) {\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t    if (matched) { // 匹配成功\n\t      const sp = specificity(rule.selectors[0])\n\t      const computedStyle = element.computedStyle\n\t      for (let declaration of rule.declarations) {\n\t        if (!computedStyle[declaration.property]) {\n\t          computedStyle[declaration.property] = {}\n\t        }\n\t        if (!computedStyle[declaration.property].specificity) {\n\t          computedStyle[declaration.property].value = declaration.value\n\t          computedStyle[declaration.property].specificity = sp\n\t        } else if (compare(computedStyle[declaration.property].specificity, sp) < 0) {\n\t          computedStyle[declaration.property].value = declaration.value\n\t          computedStyle[declaration.property].specificity = sp\n\t        }\n\t      }\n\t    }\n\t\t\t\n\t\t...some code\n\t\t\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n\n\n- 运行结果\n\t- ![第七步运行结果](http://p1.meituan.net/myvideodistribute/063c59deee7d24e437fdff9920aec8ea216464.png)\n\t- ![第七步运行结果](http://p1.meituan.net/myvideodistribute/c3a7fb73c0d001fef48137c4a23144b6211501.png)\n\n\n### 参考文献\n- [CSS 优先级是如何计算的？](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n- [selectors-3 specificity](https://drafts.csswg.org/selectors-3/#specificity)\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 学而不思则罔\n- 祝大家多多发财","source":"_posts/Toy-Browser-DAY3.md","raw":"---\ntitle: Toy-Browser-DAY3\ndate: 2020-05-17 16:04:30\ntags:\n- 浏览器\ncategories:\n- 浏览器\ndescription:\n- 浏览器 -- toy-browser\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 我们开始进入到 CSS Computing 啦！！！😘\n- ![CSS Computing](http://p0.meituan.net/myvideodistribute/4bb352346db82d88a68035a6ddad906c81827.png)\n<!-- more -->\n\n\n## 实践记录\n### 实践准备\n\n> npm install css\n\n\n### 第一步：收集 CSS 规则\n- 遇到 style 标签时，我们把 CSS 规则保存起来\n- 这里我们调用 CSS Parser 来分析 CSS 规则\n- 这里我们必须要仔细研究此库分析 CSS 规则的格式\n- computeCss1.js\n\n\t```javascript\n\tconst css = require('css')\n\t\n\t... some code\n\t\n\t// 加入一个新的函数，addCSSRules，这里我们把 CSS 规则暂存到一个数组里\n\tlet rules = []\n\tfunction addCSSRules(text) {\n\t  const ast = css.parse(text)\n\t  console.log(JSON.stringify(ast, null, \"    \"))\n\t  rules.push(...ast.stylesheet.rules)\n\t}\n\t\n\t...some code\n\t\n\tfunction emit(token) {\n\t\n\t  ... some code\n\t  \n\t   else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      /** 遇到 style 标签时，执行添加 CCS 规则的操作 */\n\t      if (top.tagName === \"style\") {\n\t        addCSSRules(top.children[0].content)\n\t      }\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  }\n\t  \n\t  ... some code\n\t  \n\t}\n\t\n\t```\n- 这里，我们需要将添加 CSS 规则操作至元素 pop前，元素 push 后\n\t- 元素 push 后，也就是 style 标签的子元素文本节点，还未挂载到 style 标签上，styles 标签子元素还是空的\n\t- pop 前，我们可以取到这个元素\n\n- 运行结果\n\t- ![第一步运行结果](http://p0.meituan.net/myvideodistribute/01014f5e30127ef5f2b23dd6b7fa44ac153947.png)\n- 文本结果\n\n\t```json\n\t{\n\t    \"type\": \"stylesheet\",\n\t    \"stylesheet\": {\n\t        \"rules\": [\n\t            {\n\t                \"type\": \"rule\",\n\t                \"selectors\": [\n\t                    \"body div #myid\"\n\t                ],\n\t                \"declarations\": [\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"width\",\n\t                        \"value\": \"100px\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 3,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 3,\n\t                                \"column\": 20\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"background-color\",\n\t                        \"value\": \"#ff5000\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 4,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 4,\n\t                                \"column\": 34\n\t                            }\n\t                        }\n\t                    }\n\t                ],\n\t                \"position\": {\n\t                    \"start\": {\n\t                        \"line\": 2,\n\t                        \"column\": 5\n\t                    },\n\t                    \"end\": {\n\t                        \"line\": 5,\n\t                        \"column\": 6\n\t                    }\n\t                }\n\t            },\n\t            {\n\t                \"type\": \"rule\",\n\t                \"selectors\": [\n\t                    \"body div img\"\n\t                ],\n\t                \"declarations\": [\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"width\",\n\t                        \"value\": \"30px\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 7,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 7,\n\t                                \"column\": 19\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        \"type\": \"declaration\",\n\t                        \"property\": \"background-color\",\n\t                        \"value\": \"#ff1111\",\n\t                        \"position\": {\n\t                            \"start\": {\n\t                                \"line\": 8,\n\t                                \"column\": 9\n\t                            },\n\t                            \"end\": {\n\t                                \"line\": 8,\n\t                                \"column\": 34\n\t                            }\n\t                        }\n\t                    }\n\t                ],\n\t                \"position\": {\n\t                    \"start\": {\n\t                        \"line\": 6,\n\t                        \"column\": 5\n\t                    },\n\t                    \"end\": {\n\t                        \"line\": 9,\n\t                        \"column\": 6\n\t                    }\n\t                }\n\t            }\n\t        ],\n\t        \"parsingErrors\": []\n\t    }\n\t}\n\t```\n\n\n\n### 第二步：添加调用\n- 当我们创建一个元素后，立即计算 CSS\n- 理论上，当我们分析一个元素时，所有 CSS 规则已经收集完毕\n- 在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略\n- computeCSS2.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n\t  console.log(rules)\n\t  console.log(\"-=-=-=-=-=-=-=\")\n\t  console.log(\"compute CSS for Element-=-=-=-=-=-=\", element)\n\t  console.log(\"********************************************\")\n\t}\n\t\n\t...some code\n\t\n\tfunction emit(token) {\n\t\n\t  ... some code\n\t  \n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    computeCSS(element)\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t    \n\t    currentTextNode = null\n\t    // console.log('push', element)\n\t  }\n\t  \n\t  ... some code\n\t\n\t}\n\t```\n\t\n- 这里一个元素的创建后，tagName, 属性都加好后，就应该有一个 cumputeCSS 过程\n- 运行结果\n\t- ![第二步：添加调用](http://p1.meituan.net/myvideodistribute/634ec08db6e9b90b38c17656be424e2d127292.png)\n\n\n\n### 第三步：获取父元素序列\n- 在 computeCss 函数中，我们必须知道元素的所有父元素才能判断元素与规则是否匹配\n- 我们从上一步骤的 stack，可以获取本元素所有的父元素\n- 因为我们首先获取的是”当前元素“，所以我们获得和计算父元素匹配的顺序是从内向外\n\t- ![从内向外 CSS 匹配](http://p1.meituan.net/myvideodistribute/68af300e9e207b8a190b7c3893f17ff036554.png)\n- computeCSS3.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n      const elements = stack.slice().reverse()\n\t}\n\t\n\t...some code\n\t\n\t```\n- 运行结果\n\t- ![第三步运行结果](http://p0.meituan.net/myvideodistribute/706c9c25bc5a46f41f8bc11ba2a6854e250838.png)\n- stack.slice() 拷贝原数组，不在 stack 中操作，防御式编程避免影响 stack\n\t\n\n\n### 第四步：拆分选择器\n- 选择器也要从当前元素从外排列\n- 复杂选择器拆成针对单个元素的选择器，用循环匹配父元素队列\n- computeCSS4.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\nfunction specificity(selector) {\n  const p = [0, 0, 0, 0]\n  const selectorParts = selector.split(\" \")\n  for (let part of selectorParts) {\n    if (part.charAt(0) == \"#\") {\n      p[1] += 1\n    } else if (part.charAt(0) == \".\") {\n      p[2] += 1\n    } else {\n      p[3] += 1\n    }\n  }\n  return p\n}\n\nfunction compare(sp1, sp2) {\n  if (sp1[0] - sp2[0]) {\n    return sp1[0] - sp2[0]\n  }\n  if (sp1[1] - sp2[1]) {\n    return sp1[1] - sp2[1]\n  }\n  if (sp1[2] - sp2[2]) {\n    return sp1[2] - sp2[2]\n  }\n  return sp1[3] - sp2[3]\n}\n\n\tfunction computeCSS(element) {\n      const elements = stack.slice().reverse()\n\n\t  if (!element.computedStyle)\n\t    element.computedStyle = {}\n\t  \n\t  for (let rule of rules) {\n\t    const selectorParts = rule.selectors[0].split(\" \").reverse()\n\t\n\t    if (!match(element, selectorParts[0]))\n\t      continue\n\t\n\t    let matched = false\n\t\n\t    let j = 1\n\t\n\t    for (let i = 0; i < elements.length; i ++) {\n\t      if (match(elements[i], selectorParts[j])) {\n\t        j ++\n\t      }\n\t    }\n\t    if (j >= selectorParts.length) {\n\t      matched = true\n\t    }\n\t    if (matched) { // 匹配成功\n\t      console.log(\"Element\", element, \"matched rule\", rule)\n\t    }\n\t  }\n\t}\n\t\n\t...some code\n\t\n\t```\n\n\n### 第五步：计算选择器与元素匹配\n- 根据选择器的类型和元素属性，计算是否与当前元素匹配\n- 这里仅实现了三种基本选择器，实际的浏览器中要处理复合选择器\n- computeCSS5.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t  \n\t  if (selector.charAt(0) == \"#\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"id\")[0]\n\t    if (attr && attr.value === selector.replace(\"#\", ''))\n\t      return true\n\t  } else if (selector.charAt(0) == \".\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"class\")[0]\n\t    if (attr && attr.value === selector.replace(\".\", ''))\n\t      return true\n\t  } else {\n\t    if (element.tagName === selector) {\n\t      return true\n\t    }\n\t  }\n\t  return false\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n- 运行结果\n\t- ![第五步运行结果](http://p0.meituan.net/myvideodistribute/e23fb1db77239166c990b52468b24451353540.png)\n\n#### 第五步优化：实现支持空格的 Class 选择器\n- 假如我们的 html 改成这样：\n\n\t```html\n\t<html maaa=a >\n\t\t<head>\n\t\t    <style>\n\t\tbody div #myid{\n\t\t    width:100px;\n\t\t    background-color: #ff5000;\n\t\t}\n\t\tbody div img{\n\t\t    width:30px;\n\t\t    background-color: #ff1111;\n\t\t}\n\t\t\n\t\tbody div .cls1 {\n\t\t  background-color: #ff9906;\n\t\t}\n\t\t    </style>\n\t\t</head>\n\t\t<body>\n\t\t    <div>\n\t\t        <img id=\"myid\"/>\n\t\t        <img class=\"cls1 cls2\"/>\n\t\t    </div>\n\t\t</body>\n\t</html>\n\t```\n- 在 &lt;img&gt; 增加多个 class 选择器，那我们的选择器 match 可以改成\n\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction match(element, selector) {\n\t  if (!selector || !element.attributes) \n\t    return false\n\t  \n\t  if (selector.charAt(0) == \"#\") {\n\t\t    \n\t\t...some code\n\t\t\n\t\t\n\t  } else if (selector.charAt(0) == \".\") {\n\t    const attr = element.attributes.filter(attr => attr.name === \"class\")[0]\n\t    if (attr) {\n\t      const attrClassArray = attr.value.split(' ')\n\t      for (let attrClass of attrClassArray) {\n\t        if (attrClass === selector.replace(\".\", '')) {\n\t          return true\n\t        }\n\t      }\n\t    }\n\t  } else {\n\t\t\t    \n\t\t...some code\n\t\t\n\t\t\n\t  }\n\t\t...some code\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n- 思路：\n\t- 我们可以看到\n\t\t- ![多 class 选择器](http://p0.meituan.net/myvideodistribute/a8b9d9396713239928cd8b0af216535e40897.png)\n\t- 我们可以将 元素 attr 根据空格分隔，再利用循环匹配\n- 运行结果\n\t- ![第五步优化运行结果](http://p1.meituan.net/myvideodistribute/1d5533479cdb7d6c1a0af20acdfc4e71146017.png)\n\n### 第六步：生成 computed 属性\n- 一旦选择匹配，就应用选择器到元素上，形成 computedStyle\n- computeCSS6.js\n\t\n\t```javascript\n\t\n\t...some code\n\t\n\t\n\tfunction computeCSS(element) {\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t    if (matched) { // 匹配成功\n\t      const computedStyle = element.computedStyle\n\t      for (let declaration of rule.declarations) {\n\t        if (!computedStyle[declaration.property]) {\n\t          computedStyle[declaration.property] = {}\n\t        }\n\t        computedStyle[declaration.property].value = declaration.value\n\t      }\n\t      console.log(element.computedStyle)\n\t    }\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n- 运行结果\n\t- ![第六步运行结果](http://p0.meituan.net/myvideodistribute/71888ca9220eb11196bc00eb407fb05980361.png)\n\n### 第七步：确定规则覆盖关系\n- CSS 规则根据 specificity 和后来优先规则覆盖\n- specificity 是个四元组，越左边权重越高\n- 一个 CSS 规则的 specificity 根据包含的简单选择器相加而成\n- ![selectors-3 specificity](http://p0.meituan.net/myvideodistribute/a50f3ae53878adbacbdcb7798632605e283940.png)\n- computeCSS7.js\n\t\n\t```javascript\n\t\n\t...some code\n\n\tfunction specificity(selector) {\n\t  const p = [0, 0, 0, 0]\n\t  const selectorParts = selector.split(\" \")\n\t  for (let part of selectorParts) {\n\t    if (part.charAt(0) == \"#\") {\n\t      p[1] += 1\n\t    } else if (part.charAt(0) == \".\") {\n\t      p[2] += 1\n\t    } else {\n\t      p[3] += 1\n\t    }\n\t  }\n\t  return p\n\t}\n\t\n\tfunction compare(sp1, sp2) {\n\t  if (sp1[0] - sp2[0]) {\n\t    return sp1[0] - sp2[0]\n\t  }\n\t  if (sp1[1] - sp2[1]) {\n\t    return sp1[1] - sp2[1]\n\t  }\n\t  if (sp1[2] - sp2[2]) {\n\t    return sp1[2] - sp2[2]\n\t  }\n\t  return sp1[3] - sp2[3]\n\t}\n\t\n\t\n\tfunction computeCSS(element) {\n\t\t\n\t\t...some code\n\t\t\n\t\t\n\t    if (matched) { // 匹配成功\n\t      const sp = specificity(rule.selectors[0])\n\t      const computedStyle = element.computedStyle\n\t      for (let declaration of rule.declarations) {\n\t        if (!computedStyle[declaration.property]) {\n\t          computedStyle[declaration.property] = {}\n\t        }\n\t        if (!computedStyle[declaration.property].specificity) {\n\t          computedStyle[declaration.property].value = declaration.value\n\t          computedStyle[declaration.property].specificity = sp\n\t        } else if (compare(computedStyle[declaration.property].specificity, sp) < 0) {\n\t          computedStyle[declaration.property].value = declaration.value\n\t          computedStyle[declaration.property].specificity = sp\n\t        }\n\t      }\n\t    }\n\t\t\t\n\t\t...some code\n\t\t\n\t\t\n\t}\n\t\n\t...some code\n\t\n\t```\n\t\n\n\n- 运行结果\n\t- ![第七步运行结果](http://p1.meituan.net/myvideodistribute/063c59deee7d24e437fdff9920aec8ea216464.png)\n\t- ![第七步运行结果](http://p1.meituan.net/myvideodistribute/c3a7fb73c0d001fef48137c4a23144b6211501.png)\n\n\n### 参考文献\n- [CSS 优先级是如何计算的？](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n- [selectors-3 specificity](https://drafts.csswg.org/selectors-3/#specificity)\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 学而不思则罔\n- 祝大家多多发财","slug":"Toy-Browser-DAY3","published":1,"updated":"2020-05-26T15:03:39.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x2002d1wp314z3fs3b","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>我们开始进入到 CSS Computing 啦！！！😘</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4bb352346db82d88a68035a6ddad906c81827.png\" alt=\"CSS Computing\"><a id=\"more\"></a>\n\n\n</li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h3><blockquote>\n<p>npm install css</p>\n</blockquote>\n<h3 id=\"第一步：收集-CSS-规则\"><a href=\"#第一步：收集-CSS-规则\" class=\"headerlink\" title=\"第一步：收集 CSS 规则\"></a>第一步：收集 CSS 规则</h3><ul>\n<li><p>遇到 style 标签时，我们把 CSS 规则保存起来</p>\n</li>\n<li><p>这里我们调用 CSS Parser 来分析 CSS 规则</p>\n</li>\n<li><p>这里我们必须要仔细研究此库分析 CSS 规则的格式</p>\n</li>\n<li><p>computeCss1.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">'css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">... some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加入一个新的函数，addCSSRules，这里我们把 CSS 规则暂存到一个数组里</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rules = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCSSRules</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = css.parse(text)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(ast, <span class=\"literal\">null</span>, <span class=\"string\">\"    \"</span>))</span><br><span class=\"line\">  rules.push(...ast.stylesheet.rules)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      <span class=\"comment\">/** 遇到 style 标签时，执行添加 CCS 规则的操作 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (top.tagName === <span class=\"string\">\"style\"</span>) &#123;</span><br><span class=\"line\">        addCSSRules(top.children[<span class=\"number\">0</span>].content)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>这里，我们需要将添加 CSS 规则操作至元素 pop前，元素 push 后</p>\n<ul>\n<li>元素 push 后，也就是 style 标签的子元素文本节点，还未挂载到 style 标签上，styles 标签子元素还是空的</li>\n<li>pop 前，我们可以取到这个元素</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/01014f5e30127ef5f2b23dd6b7fa44ac153947.png\" alt=\"第一步运行结果\"></li>\n</ul>\n</li>\n<li><p>文本结果</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"stylesheet\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylesheet\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"rules\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"rule\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"selectors\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"body div #myid\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"declarations\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"width\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"100px\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">20</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"background-color\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"#ff5000\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">34</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">6</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"rule\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"selectors\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"body div img\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"declarations\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"width\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"30px\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">19</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"background-color\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"#ff1111\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">34</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">6</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"parsingErrors\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"第二步：添加调用\"><a href=\"#第二步：添加调用\" class=\"headerlink\" title=\"第二步：添加调用\"></a>第二步：添加调用</h3><ul>\n<li><p>当我们创建一个元素后，立即计算 CSS</p>\n</li>\n<li><p>理论上，当我们分析一个元素时，所有 CSS 规则已经收集完毕</p>\n</li>\n<li><p>在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略</p>\n</li>\n<li><p>computeCSS2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rules)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-=-=-=-=-=-=-=\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"compute CSS for Element-=-=-=-=-=-=\"</span>, element)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"********************************************\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    computeCSS(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log('push', element)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  ... some code</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里一个元素的创建后，tagName, 属性都加好后，就应该有一个 cumputeCSS 过程</p>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/634ec08db6e9b90b38c17656be424e2d127292.png\" alt=\"第二步：添加调用\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第三步：获取父元素序列\"><a href=\"#第三步：获取父元素序列\" class=\"headerlink\" title=\"第三步：获取父元素序列\"></a>第三步：获取父元素序列</h3><ul>\n<li><p>在 computeCss 函数中，我们必须知道元素的所有父元素才能判断元素与规则是否匹配</p>\n</li>\n<li><p>我们从上一步骤的 stack，可以获取本元素所有的父元素</p>\n</li>\n<li><p>因为我们首先获取的是”当前元素“，所以我们获得和计算父元素匹配的顺序是从内向外</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/68af300e9e207b8a190b7c3893f17ff036554.png\" alt=\"从内向外 CSS 匹配\"></li>\n</ul>\n</li>\n<li><p>computeCSS3.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> elements = stack.slice().reverse()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure></li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/706c9c25bc5a46f41f8bc11ba2a6854e250838.png\" alt=\"第三步运行结果\"></li>\n</ul>\n</li>\n<li><p>stack.slice() 拷贝原数组，不在 stack 中操作，防御式编程避免影响 stack</p>\n</li>\n</ul>\n<h3 id=\"第四步：拆分选择器\"><a href=\"#第四步：拆分选择器\" class=\"headerlink\" title=\"第四步：拆分选择器\"></a>第四步：拆分选择器</h3><ul>\n<li><p>选择器也要从当前元素从外排列</p>\n</li>\n<li><p>复杂选择器拆成针对单个元素的选择器，用循环匹配父元素队列</p>\n</li>\n<li><p>computeCSS4.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">2</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">sp1, sp2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sp1[<span class=\"number\">3</span>] - sp2[<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> elements = stack.slice().reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!element.computedStyle)</span><br><span class=\"line\">\t    element.computedStyle = &#123;&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> rule <span class=\"keyword\">of</span> rules) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">const</span> selectorParts = rule.selectors[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>).reverse()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!match(element, selectorParts[<span class=\"number\">0</span>]))</span><br><span class=\"line\">\t      <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> matched = <span class=\"literal\">false</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> j = <span class=\"number\">1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i ++) &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (match(elements[i], selectorParts[j])) &#123;</span><br><span class=\"line\">\t        j ++</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (j &gt;= selectorParts.length) &#123;</span><br><span class=\"line\">\t      matched = <span class=\"literal\">true</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">\t      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Element\"</span>, element, <span class=\"string\">\"matched rule\"</span>, rule)</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"第五步：计算选择器与元素匹配\"><a href=\"#第五步：计算选择器与元素匹配\" class=\"headerlink\" title=\"第五步：计算选择器与元素匹配\"></a>第五步：计算选择器与元素匹配</h3><ul>\n<li><p>根据选择器的类型和元素属性，计算是否与当前元素匹配</p>\n</li>\n<li><p>这里仅实现了三种基本选择器，实际的浏览器中要处理复合选择器</p>\n</li>\n<li><p>computeCSS5.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"id\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === selector.replace(<span class=\"string\">\"#\"</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === selector.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.tagName === selector) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e23fb1db77239166c990b52468b24451353540.png\" alt=\"第五步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第五步优化：实现支持空格的-Class-选择器\"><a href=\"#第五步优化：实现支持空格的-Class-选择器\" class=\"headerlink\" title=\"第五步优化：实现支持空格的 Class 选择器\"></a>第五步优化：实现支持空格的 Class 选择器</h4><ul>\n<li><p>假如我们的 html 改成这样：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">body</span> <span class=\"selector-tag\">div</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff5000</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbody div img&#123;</span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff1111</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">body</span> <span class=\"selector-tag\">div</span> <span class=\"selector-class\">.cls1</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t  <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff9906</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span>/&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cls1 cls2\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 &lt;img&gt; 增加多个 class 选择器，那我们的选择器 match 可以改成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> attrClassArray = attr.value.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> attrClass <span class=\"keyword\">of</span> attrClassArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attrClass === selector.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">''</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure></li>\n<li><p>思路：</p>\n<ul>\n<li>我们可以看到<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a8b9d9396713239928cd8b0af216535e40897.png\" alt=\"多 class 选择器\"></li>\n</ul>\n</li>\n<li>我们可以将 元素 attr 根据空格分隔，再利用循环匹配</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/1d5533479cdb7d6c1a0af20acdfc4e71146017.png\" alt=\"第五步优化运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六步：生成-computed-属性\"><a href=\"#第六步：生成-computed-属性\" class=\"headerlink\" title=\"第六步：生成 computed 属性\"></a>第六步：生成 computed 属性</h3><ul>\n<li><p>一旦选择匹配，就应用选择器到元素上，形成 computedStyle</p>\n</li>\n<li><p>computeCSS6.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> computedStyle = element.computedStyle</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> declaration <span class=\"keyword\">of</span> rule.declarations) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property]) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property] = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(element.computedStyle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/71888ca9220eb11196bc00eb407fb05980361.png\" alt=\"第六步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七步：确定规则覆盖关系\"><a href=\"#第七步：确定规则覆盖关系\" class=\"headerlink\" title=\"第七步：确定规则覆盖关系\"></a>第七步：确定规则覆盖关系</h3><ul>\n<li><p>CSS 规则根据 specificity 和后来优先规则覆盖</p>\n</li>\n<li><p>specificity 是个四元组，越左边权重越高</p>\n</li>\n<li><p>一个 CSS 规则的 specificity 根据包含的简单选择器相加而成</p>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/a50f3ae53878adbacbdcb7798632605e283940.png\" alt=\"selectors-3 specificity\"></p>\n</li>\n<li><p>computeCSS7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">2</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">sp1, sp2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sp1[<span class=\"number\">3</span>] - sp2[<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> sp = specificity(rule.selectors[<span class=\"number\">0</span>])</span><br><span class=\"line\">      <span class=\"keyword\">const</span> computedStyle = element.computedStyle</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> declaration <span class=\"keyword\">of</span> rule.declarations) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property]) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property] = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property].specificity) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">          computedStyle[declaration.property].specificity = sp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare(computedStyle[declaration.property].specificity, sp) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">          computedStyle[declaration.property].specificity = sp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/063c59deee7d24e437fdff9920aec8ea216464.png\" alt=\"第七步运行结果\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/c3a7fb73c0d001fef48137c4a23144b6211501.png\" alt=\"第七步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">CSS 优先级是如何计算的？</a></li>\n<li><a href=\"https://drafts.csswg.org/selectors-3/#specificity\" target=\"_blank\" rel=\"noopener\">selectors-3 specificity</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>学而不思则罔</li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>我们开始进入到 CSS Computing 啦！！！😘</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4bb352346db82d88a68035a6ddad906c81827.png\" alt=\"CSS Computing\">","more":"</li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h3><blockquote>\n<p>npm install css</p>\n</blockquote>\n<h3 id=\"第一步：收集-CSS-规则\"><a href=\"#第一步：收集-CSS-规则\" class=\"headerlink\" title=\"第一步：收集 CSS 规则\"></a>第一步：收集 CSS 规则</h3><ul>\n<li><p>遇到 style 标签时，我们把 CSS 规则保存起来</p>\n</li>\n<li><p>这里我们调用 CSS Parser 来分析 CSS 规则</p>\n</li>\n<li><p>这里我们必须要仔细研究此库分析 CSS 规则的格式</p>\n</li>\n<li><p>computeCss1.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> css = <span class=\"built_in\">require</span>(<span class=\"string\">'css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">... some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加入一个新的函数，addCSSRules，这里我们把 CSS 规则暂存到一个数组里</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rules = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCSSRules</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = css.parse(text)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(ast, <span class=\"literal\">null</span>, <span class=\"string\">\"    \"</span>))</span><br><span class=\"line\">  rules.push(...ast.stylesheet.rules)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      <span class=\"comment\">/** 遇到 style 标签时，执行添加 CCS 规则的操作 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (top.tagName === <span class=\"string\">\"style\"</span>) &#123;</span><br><span class=\"line\">        addCSSRules(top.children[<span class=\"number\">0</span>].content)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>这里，我们需要将添加 CSS 规则操作至元素 pop前，元素 push 后</p>\n<ul>\n<li>元素 push 后，也就是 style 标签的子元素文本节点，还未挂载到 style 标签上，styles 标签子元素还是空的</li>\n<li>pop 前，我们可以取到这个元素</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/01014f5e30127ef5f2b23dd6b7fa44ac153947.png\" alt=\"第一步运行结果\"></li>\n</ul>\n</li>\n<li><p>文本结果</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"stylesheet\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stylesheet\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"rules\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"rule\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"selectors\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"body div #myid\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"declarations\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"width\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"100px\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">20</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"background-color\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"#ff5000\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">34</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">6</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"rule\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"selectors\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"body div img\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"declarations\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"width\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"30px\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">19</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"declaration\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"background-color\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"#ff1111\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                                <span class=\"attr\">\"line\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                                <span class=\"attr\">\"column\"</span>: <span class=\"number\">34</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"position\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">6</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"parsingErrors\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"第二步：添加调用\"><a href=\"#第二步：添加调用\" class=\"headerlink\" title=\"第二步：添加调用\"></a>第二步：添加调用</h3><ul>\n<li><p>当我们创建一个元素后，立即计算 CSS</p>\n</li>\n<li><p>理论上，当我们分析一个元素时，所有 CSS 规则已经收集完毕</p>\n</li>\n<li><p>在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略</p>\n</li>\n<li><p>computeCSS2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rules)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-=-=-=-=-=-=-=\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"compute CSS for Element-=-=-=-=-=-=\"</span>, element)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"********************************************\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    computeCSS(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log('push', element)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  ... some code</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里一个元素的创建后，tagName, 属性都加好后，就应该有一个 cumputeCSS 过程</p>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/634ec08db6e9b90b38c17656be424e2d127292.png\" alt=\"第二步：添加调用\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第三步：获取父元素序列\"><a href=\"#第三步：获取父元素序列\" class=\"headerlink\" title=\"第三步：获取父元素序列\"></a>第三步：获取父元素序列</h3><ul>\n<li><p>在 computeCss 函数中，我们必须知道元素的所有父元素才能判断元素与规则是否匹配</p>\n</li>\n<li><p>我们从上一步骤的 stack，可以获取本元素所有的父元素</p>\n</li>\n<li><p>因为我们首先获取的是”当前元素“，所以我们获得和计算父元素匹配的顺序是从内向外</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/68af300e9e207b8a190b7c3893f17ff036554.png\" alt=\"从内向外 CSS 匹配\"></li>\n</ul>\n</li>\n<li><p>computeCSS3.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> elements = stack.slice().reverse()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure></li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/706c9c25bc5a46f41f8bc11ba2a6854e250838.png\" alt=\"第三步运行结果\"></li>\n</ul>\n</li>\n<li><p>stack.slice() 拷贝原数组，不在 stack 中操作，防御式编程避免影响 stack</p>\n</li>\n</ul>\n<h3 id=\"第四步：拆分选择器\"><a href=\"#第四步：拆分选择器\" class=\"headerlink\" title=\"第四步：拆分选择器\"></a>第四步：拆分选择器</h3><ul>\n<li><p>选择器也要从当前元素从外排列</p>\n</li>\n<li><p>复杂选择器拆成针对单个元素的选择器，用循环匹配父元素队列</p>\n</li>\n<li><p>computeCSS4.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">2</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">sp1, sp2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sp1[<span class=\"number\">3</span>] - sp2[<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> elements = stack.slice().reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!element.computedStyle)</span><br><span class=\"line\">\t    element.computedStyle = &#123;&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> rule <span class=\"keyword\">of</span> rules) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">const</span> selectorParts = rule.selectors[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>).reverse()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!match(element, selectorParts[<span class=\"number\">0</span>]))</span><br><span class=\"line\">\t      <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> matched = <span class=\"literal\">false</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> j = <span class=\"number\">1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i ++) &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (match(elements[i], selectorParts[j])) &#123;</span><br><span class=\"line\">\t        j ++</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (j &gt;= selectorParts.length) &#123;</span><br><span class=\"line\">\t      matched = <span class=\"literal\">true</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">\t      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Element\"</span>, element, <span class=\"string\">\"matched rule\"</span>, rule)</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"第五步：计算选择器与元素匹配\"><a href=\"#第五步：计算选择器与元素匹配\" class=\"headerlink\" title=\"第五步：计算选择器与元素匹配\"></a>第五步：计算选择器与元素匹配</h3><ul>\n<li><p>根据选择器的类型和元素属性，计算是否与当前元素匹配</p>\n</li>\n<li><p>这里仅实现了三种基本选择器，实际的浏览器中要处理复合选择器</p>\n</li>\n<li><p>computeCSS5.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"id\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === selector.replace(<span class=\"string\">\"#\"</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr &amp;&amp; attr.value === selector.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.tagName === selector) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e23fb1db77239166c990b52468b24451353540.png\" alt=\"第五步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第五步优化：实现支持空格的-Class-选择器\"><a href=\"#第五步优化：实现支持空格的-Class-选择器\" class=\"headerlink\" title=\"第五步优化：实现支持空格的 Class 选择器\"></a>第五步优化：实现支持空格的 Class 选择器</h4><ul>\n<li><p>假如我们的 html 改成这样：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">body</span> <span class=\"selector-tag\">div</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff5000</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbody div img&#123;</span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff1111</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">body</span> <span class=\"selector-tag\">div</span> <span class=\"selector-class\">.cls1</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">\t  <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff9906</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span>/&gt;</span></span><br><span class=\"line\">\t        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cls1 cls2\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 &lt;img&gt; 增加多个 class 选择器，那我们的选择器 match 可以改成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">element, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!selector || !element.attributes) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selector.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = element.attributes.filter(<span class=\"function\"><span class=\"params\">attr</span> =&gt;</span> attr.name === <span class=\"string\">\"class\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> attrClassArray = attr.value.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> attrClass <span class=\"keyword\">of</span> attrClassArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attrClass === selector.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">''</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure></li>\n<li><p>思路：</p>\n<ul>\n<li>我们可以看到<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a8b9d9396713239928cd8b0af216535e40897.png\" alt=\"多 class 选择器\"></li>\n</ul>\n</li>\n<li>我们可以将 元素 attr 根据空格分隔，再利用循环匹配</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/1d5533479cdb7d6c1a0af20acdfc4e71146017.png\" alt=\"第五步优化运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六步：生成-computed-属性\"><a href=\"#第六步：生成-computed-属性\" class=\"headerlink\" title=\"第六步：生成 computed 属性\"></a>第六步：生成 computed 属性</h3><ul>\n<li><p>一旦选择匹配，就应用选择器到元素上，形成 computedStyle</p>\n</li>\n<li><p>computeCSS6.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> computedStyle = element.computedStyle</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> declaration <span class=\"keyword\">of</span> rule.declarations) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property]) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property] = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(element.computedStyle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/71888ca9220eb11196bc00eb407fb05980361.png\" alt=\"第六步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七步：确定规则覆盖关系\"><a href=\"#第七步：确定规则覆盖关系\" class=\"headerlink\" title=\"第七步：确定规则覆盖关系\"></a>第七步：确定规则覆盖关系</h3><ul>\n<li><p>CSS 规则根据 specificity 和后来优先规则覆盖</p>\n</li>\n<li><p>specificity 是个四元组，越左边权重越高</p>\n</li>\n<li><p>一个 CSS 规则的 specificity 根据包含的简单选择器相加而成</p>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/a50f3ae53878adbacbdcb7798632605e283940.png\" alt=\"selectors-3 specificity\"></p>\n</li>\n<li><p>computeCSS7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificity</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectorParts = selector.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> part <span class=\"keyword\">of</span> selectorParts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (part.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">      p[<span class=\"number\">2</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      p[<span class=\"number\">3</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">sp1, sp2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">0</span>] - sp2[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">1</span>] - sp2[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sp1[<span class=\"number\">2</span>] - sp2[<span class=\"number\">2</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sp1[<span class=\"number\">3</span>] - sp2[<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matched) &#123; <span class=\"comment\">// 匹配成功</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> sp = specificity(rule.selectors[<span class=\"number\">0</span>])</span><br><span class=\"line\">      <span class=\"keyword\">const</span> computedStyle = element.computedStyle</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> declaration <span class=\"keyword\">of</span> rule.declarations) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property]) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property] = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!computedStyle[declaration.property].specificity) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">          computedStyle[declaration.property].specificity = sp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (compare(computedStyle[declaration.property].specificity, sp) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          computedStyle[declaration.property].value = declaration.value</span><br><span class=\"line\">          computedStyle[declaration.property].specificity = sp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...some code</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...some code</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/063c59deee7d24e437fdff9920aec8ea216464.png\" alt=\"第七步运行结果\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/c3a7fb73c0d001fef48137c4a23144b6211501.png\" alt=\"第七步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">CSS 优先级是如何计算的？</a></li>\n<li><a href=\"https://drafts.csswg.org/selectors-3/#specificity\" target=\"_blank\" rel=\"noopener\">selectors-3 specificity</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>学而不思则罔</li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Toy Browser DAY1","date":"2020-05-10T06:05:34.000Z","description":["浏览器 -- toy-browser"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n\n<!-- more -->\n\n\n## 实践过程\n\n\n### Server 端实现\n\n```\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nserver.listen(8088);\n```\n\n> When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to **response.writeHead() given precedence**.\n\n- writeHead 与 setHeader 相比，具有更高的优先级\n- 所以最终的请求体头 'Content-Type': 'text/plain'\n- 这里我们让它监听 8088 端口，因为默认的 80端口，可能会存在占用\n- 我们可以在浏览器中，对 http://127.0.0.1:8088/ 访问，最后我们要利用 toy-browser 简单模拟\n\t- ![浏览器行为](http://p0.meituan.net/myvideodistribute/aa69465245fc64274c75ac4e5aab244691470.png)\n\n\n\n### Client 端实现\n\n#### 第一版：简单实现\n\n```\nconst net = require('net');\nconst client = net.createConnection({ port: 8088 }, () => {\n  // 'connect' listener.\n  console.log('connected to server!');\n  client.write('POST / HTTP/1.1\\r\\n');\n  client.write('HOST: 127.0.0.1\\r\\n');\n  client.write('Content-Length: 9\\r\\n');\n  client.write('Content-Type: application/x-www-form-urlencoded\\r\\n');\n  client.write('\\r\\n');\n  client.write('name=elle');\n  client.write('\\r\\n');\n});\nclient.on('data', (data) => {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () => {\n  console.log('disconnected from server');\n});\n```\n\n- 我们开启服务端\n\t> node server.js\n\t\n\t\n\t\n- 再开启客户端\n\t> node client.js\n\t\n\t\n\n- 运行截图\n\t- ![client](http://p0.meituan.net/myvideodistribute/5a4f9f936d87d43335d08670a03205a448885.png)\n\t- ![server](http://p1.meituan.net/myvideodistribute/115d90c1e9de7f974d7749988e01c87332973.png)\n\n- 我们可以看到请求成功的发出，并且服务端也进行了正确的反馈。\n\t- 请求体：name=elle，'content-length': '9'\n\n#### 第二版：对 request 进行简单封装\n- 简单分析 request 构造器所需内容\n\t- ![request](http://p0.meituan.net/myvideodistribute/7663a0cff7c034fbeadce907b2e445b588991.png)\n\t\n\t\t```javascript\n\t    // request line\n\t      // method, url = host + port + path\n\t    // headers\n\t      // Content-Type\n\t        // Content-Type: application/x-www-form-urlencoded\n\t        // Content-Type: application/json\n\t        // Content-Type: multipart/form-data\n\t        // Content-Type: text/xml\n\t      // Content-Length\n\t    // body: k-v\n\t\t```\n\t\t\n- 我们可以简单写出封装后的 reqeust\n\n\t```javascript\n\tclass Request {\n\t    // request line\n\t      // method, url = host + port + path\n\t    // headers\n\t      // Content-Type\n\t        // Content-Type: application/x-www-form-urlencoded\n\t        // Content-Type: application/json\n\t        // Content-Type: multipart/form-data\n\t        // Content-Type: text/xml\n\t      // Content-Length\n\t    // body: k-v\n\t\n\t  constructor(options) {\n\t    this.method = options.method || \"GET\"\n\t    this.host = options.host\n\t    this.port = options.port || 80\n\t    this.path = options.path || \"/\"\n\t    this.body = options.body || {}\n\t    this.headers = options.headers || {}\n\t    if (!this.headers[\"Content-Type\"]) {\n\t      this.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\t    }\n\t\n\t    if (this.headers[\"Content-Type\"] === \"application/json\") {\n\t      this.bodyText = JSON.stringify(this.body)\n\t    } else if (this.headers[\"Content-Type\"] === \"application/x-www-form-urlencoded\") {\n\t      this.bodyText = Object.keys(this.body).map(key => `${key}=${encodeURIComponent(this.body[key])}`).join('&')\n\t    }\n\t\n\t    // calculate Content-Length\n\t    this.headers[\"Content-Length\"] = this.bodyText.length\n\t\n\t  }\n\t\n\t  toString() {\n\t    return `${this.method} ${this.path} HTTP/1.1\\r\\nHOST: ${this.host}\\r\\n${Object.keys(this.headers).map(key => `${key}: ${this.headers[key]}`).join('\\r\\n')}\\r\\n\\r\\n${this.bodyText}\\r\\n`\n\t  }\n\t}\n\t```\n\t\n- 再利用封装后的 request 进行 client 访问\n\n\t```javascript\n\tconst net = require(\"net\");\n\t\n\tconst client = net.createConnection({\n\t  host: \"127.0.0.1\",\n\t  port: 8088\n\t}, () => {\n\t  // 'connect' listener.\n\t  console.log('connected to server!');\n\t\n\t  const options = {\n\t    method: \"POST\",\n\t    path: \"/\",\n\t    host: \"127.0.0.1\",\n\t    port: 8088,\n\t    headers: {\n\t      [\"X-Foo2\"]: \"customed\"\n\t    },\n\t    body: {\n\t      name: \"elle\"\n\t    }\n\t  }\n\t\n\t  let request = new Request(options)\n\t  client.write(request.toString());\n\t});\n\tclient.on('data', (data) => {\n\t  console.log(data.toString());\n\t  client.end();\n\t});\n\tclient.on('end', () => {\n\t  console.log('disconnected from server');\n\t});\n\tclient.on('error', (err) => {\n\t  console.log(err);\n\t  client.end();\n\t});\n\t```\n\t\n- 运行结果\n\t- ![封装后的request](http://p0.meituan.net/myvideodistribute/19807e0f02f52d93b9391645a286cfdf48815.png)\n\n\t\n#### 第三版：对 responseParse 进行封装\n\n- 简单分析 response 内容框架\n\t- ![response内容框架](http://p0.meituan.net/myvideodistribute/9c17bab40bf615430215e496d9bdfeb5147249.png)\n\n\t- 开始我们的状态机 constructor 简单编写\n\t\n\t\t```javascript\n\t\tconstructor() {\n\t\t  this.WAITING_STATUS_LINE = 0;\n\t\t  this.WAITING_STATUS_LINE_END = 1;\n\t\t  this.WAITING_HEADER_NAME = 2;\n\t\t  this.WAITING_HEADER_SPACE = 3;\n\t\t  this.WAITING_HEADER_VALUE = 4;\n\t\t  this.WAITING_HEADER_LINE_END = 5;\n\t\t  this.WAITING_HEADER_BLOCK_END = 6;\n\t\t  this.WAITING_BODY = 7;\n\t\t\n\t\t  this.current = this.WAITING_STATUS_LINE;\n\t\t  this.statusLine = \"\";\n\t\t  this.headers = {};\n\t\t  this.headerName = \"\";\n\t\t  this.headerValue = \"\";\n\t\t  this.bodyParse = null;\n\t\t}\n\t\t```\n\t\t\n\t- 对 response 字符流进行处理。循环读取流中数据\n\t\t\n\t\t```javascript\n\t\t// 字符流处理\n\t\treceive(string) {\n\t\t    for (let i = 0; i < string.length; i++) {\n\t\t      this.receiveChar(string.charAt(i));\n\t\t    }\n\t\t}\t\t\n  \t\t```\n  \t\t\n\t - 对流中单个字符进行扫描\n  \t\t\n  \t\t```javascript\n\t\t  receiveChar(char) {\n\t\t    if (this.current === this.WAITING_STATUS_LINE) {\n\t\t      if (char === '\\r') {\n\t\t        this.current = this.WAITING_STATUS_LINE_END\n\t\t      } else {\n\t\t        this.statusLine += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_STATUS_LINE_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_HEADER_NAME\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_NAME) {\n\t\t      if (char === ':') {\n\t\t        this.current = this.WAITING_HEADER_SPACE\n\t\t      } else if (char === '\\r') {\n\t\t        this.current = this.WAITING_HEADER_BLOCK_END\n\t\t        if (this.headers['Transfer-Encoding'] === 'chunked')\n\t\t          this.bodyParse = new TrunkedBodyParser();\n\t\t      } else {\n\t\t        this.headerName += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_SPACE) {\n\t\t      if (char === ' ') {\n\t\t        this.current = this.WAITING_HEADER_VALUE\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_VALUE) {\n\t\t      if (char === '\\r') {\n\t\t        this.current = this.WAITING_HEADER_LINE_END\n\t\t        this.headers[this.headerName] = this.headerValue\n\t\t        this.headerName = \"\"\n\t\t        this.headerValue = \"\"\n\t\t      } else {\n\t\t        this.headerValue += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_LINE_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_HEADER_NAME\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_BLOCK_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_BODY\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_BODY) {\n\t\t      this.bodyParse.receiveChar(char)\n\t\t    }\n\t\t  }  \t\t\n  \t\t```\n  \t\t\t\n   - 简单分析 server 端的 TrunkBody \n\t\t\t\n\t\t```javascript\n\t\t2 // 下一行 trunk 长度\n\t\tok // trunk 内容\n\t\t0 // trunk 终止，再没有内容\n\t\t```\n\t\t- 开始我们的 TrunkedBodyParser 状态机 constructor 简单编写\n\t\n\t\t\t```javascript\n\t\t\t  constructor() {\n\t\t\t    this.WAITING_LENGTH = 0;\n\t\t\t    this.WAITING_LENGTH_LINE_END = 1;\n\t\t\t    this.READING_TRUNK = 2;\n\t\t\t    this.WAITING_NEW_LINE = 3;\n\t\t\t    this.WAITING_NEW_LINE_END = 4;\n\t\t\t    this.FINISHED_NEW_LINE = 5;\n\t\t\t    this.FINISHED_NEW_LINE_END = 6;\n\t\t\t    this.isFinished = false;\n\t\t\t    this.length = 0;\n\t\t\t    this.content = [];\n\t\t\t    this.current = this.WAITING_LENGTH;\n\t\t\t  }\n\t\t\t```\n\t\t\t- TrunkBody 字符处理\n\t\t\t\n\t\t\t\t```javascript\n\t\t\t\t  // 字符流处理\n\t\t\t\t  receiveChar(char) {\n\t\t\t\t    if (this.current === this.WAITING_LENGTH) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        if (this.length === 0) {\n\t\t\t\t          this.current = this.FINISHED_NEW_LINE\n\t\t\t\t        } else {\n\t\t\t\t          this.current = this.WAITING_LENGTH_LINE_END\n\t\t\t\t        }\n\t\t\t\t      } else {\n\t\t\t\t        this.length *= 10\n\t\t\t\t        this.length += char.charCodeAt(0) - '0'.charCodeAt(0)\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_LENGTH_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.current = this.READING_TRUNK\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.READING_TRUNK) {\n\t\t\t\t      this.content.push(char)\n\t\t\t\t      this.length --\n\t\t\t\t      if (this.length === 0) {\n\t\t\t\t        this.current = this.WAITING_NEW_LINE\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_NEW_LINE) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        this.current = this.WAITING_NEW_LINE_END\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_NEW_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.current = this.WAITING_LENGTH\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.FINISHED_NEW_LINE) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        this.current = this.FINISHED_NEW_LINE_END\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.FINISHED_NEW_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.isFinished = true\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t  \t\t  }\n\t\t\t\t```\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n- 运行结果\n\t- ![client](http://p0.meituan.net/myvideodistribute/50256a14d9171b06c374dc7e6894efcf61275.png)\n\t- ![server](http://p0.meituan.net/myvideodistribute/23ed78fb0b5598952897249eb5ae2fbb29575.png)\n\n\t\n## 错误修改\n\n\n- ![错误修改](http://p0.meituan.net/myvideodistribute/fd4b58c42c99e0f2754c025b6682307650941.png)\n- server 端长度计算不是十进制，是十六进制\n\n\n  ```javascript\n  // 字符流处理\n  receiveChar(char) {\n    if (this.current === this.WAITING_LENGTH) {\n      if (char === '\\r') {\n        if (this.length === 0) {\n          this.current = this.FINISHED_NEW_LINE\n        } else {\n          this.current = this.WAITING_LENGTH_LINE_END\n        }\n      } else {\n        this.length *= 16\n        this.length += parseInt(char, 16)\n      }\n    }\n    ...\n  }\n  ```\n## 参考文献\n- [Node.js v12.16.3 Documentation](https://nodejs.org/dist/latest-v12.x/docs/api/http.html)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财","source":"_posts/Toy-Browser-DAY1.md","raw":"---\ntitle: Toy Browser DAY1\ndate: 2020-05-10 14:05:34\ntags:\n- 浏览器\ncategories:\n- 浏览器\ndescription:\n- 浏览器 -- toy-browser\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n\n<!-- more -->\n\n\n## 实践过程\n\n\n### Server 端实现\n\n```\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nserver.listen(8088);\n```\n\n> When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to **response.writeHead() given precedence**.\n\n- writeHead 与 setHeader 相比，具有更高的优先级\n- 所以最终的请求体头 'Content-Type': 'text/plain'\n- 这里我们让它监听 8088 端口，因为默认的 80端口，可能会存在占用\n- 我们可以在浏览器中，对 http://127.0.0.1:8088/ 访问，最后我们要利用 toy-browser 简单模拟\n\t- ![浏览器行为](http://p0.meituan.net/myvideodistribute/aa69465245fc64274c75ac4e5aab244691470.png)\n\n\n\n### Client 端实现\n\n#### 第一版：简单实现\n\n```\nconst net = require('net');\nconst client = net.createConnection({ port: 8088 }, () => {\n  // 'connect' listener.\n  console.log('connected to server!');\n  client.write('POST / HTTP/1.1\\r\\n');\n  client.write('HOST: 127.0.0.1\\r\\n');\n  client.write('Content-Length: 9\\r\\n');\n  client.write('Content-Type: application/x-www-form-urlencoded\\r\\n');\n  client.write('\\r\\n');\n  client.write('name=elle');\n  client.write('\\r\\n');\n});\nclient.on('data', (data) => {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () => {\n  console.log('disconnected from server');\n});\n```\n\n- 我们开启服务端\n\t> node server.js\n\t\n\t\n\t\n- 再开启客户端\n\t> node client.js\n\t\n\t\n\n- 运行截图\n\t- ![client](http://p0.meituan.net/myvideodistribute/5a4f9f936d87d43335d08670a03205a448885.png)\n\t- ![server](http://p1.meituan.net/myvideodistribute/115d90c1e9de7f974d7749988e01c87332973.png)\n\n- 我们可以看到请求成功的发出，并且服务端也进行了正确的反馈。\n\t- 请求体：name=elle，'content-length': '9'\n\n#### 第二版：对 request 进行简单封装\n- 简单分析 request 构造器所需内容\n\t- ![request](http://p0.meituan.net/myvideodistribute/7663a0cff7c034fbeadce907b2e445b588991.png)\n\t\n\t\t```javascript\n\t    // request line\n\t      // method, url = host + port + path\n\t    // headers\n\t      // Content-Type\n\t        // Content-Type: application/x-www-form-urlencoded\n\t        // Content-Type: application/json\n\t        // Content-Type: multipart/form-data\n\t        // Content-Type: text/xml\n\t      // Content-Length\n\t    // body: k-v\n\t\t```\n\t\t\n- 我们可以简单写出封装后的 reqeust\n\n\t```javascript\n\tclass Request {\n\t    // request line\n\t      // method, url = host + port + path\n\t    // headers\n\t      // Content-Type\n\t        // Content-Type: application/x-www-form-urlencoded\n\t        // Content-Type: application/json\n\t        // Content-Type: multipart/form-data\n\t        // Content-Type: text/xml\n\t      // Content-Length\n\t    // body: k-v\n\t\n\t  constructor(options) {\n\t    this.method = options.method || \"GET\"\n\t    this.host = options.host\n\t    this.port = options.port || 80\n\t    this.path = options.path || \"/\"\n\t    this.body = options.body || {}\n\t    this.headers = options.headers || {}\n\t    if (!this.headers[\"Content-Type\"]) {\n\t      this.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\t    }\n\t\n\t    if (this.headers[\"Content-Type\"] === \"application/json\") {\n\t      this.bodyText = JSON.stringify(this.body)\n\t    } else if (this.headers[\"Content-Type\"] === \"application/x-www-form-urlencoded\") {\n\t      this.bodyText = Object.keys(this.body).map(key => `${key}=${encodeURIComponent(this.body[key])}`).join('&')\n\t    }\n\t\n\t    // calculate Content-Length\n\t    this.headers[\"Content-Length\"] = this.bodyText.length\n\t\n\t  }\n\t\n\t  toString() {\n\t    return `${this.method} ${this.path} HTTP/1.1\\r\\nHOST: ${this.host}\\r\\n${Object.keys(this.headers).map(key => `${key}: ${this.headers[key]}`).join('\\r\\n')}\\r\\n\\r\\n${this.bodyText}\\r\\n`\n\t  }\n\t}\n\t```\n\t\n- 再利用封装后的 request 进行 client 访问\n\n\t```javascript\n\tconst net = require(\"net\");\n\t\n\tconst client = net.createConnection({\n\t  host: \"127.0.0.1\",\n\t  port: 8088\n\t}, () => {\n\t  // 'connect' listener.\n\t  console.log('connected to server!');\n\t\n\t  const options = {\n\t    method: \"POST\",\n\t    path: \"/\",\n\t    host: \"127.0.0.1\",\n\t    port: 8088,\n\t    headers: {\n\t      [\"X-Foo2\"]: \"customed\"\n\t    },\n\t    body: {\n\t      name: \"elle\"\n\t    }\n\t  }\n\t\n\t  let request = new Request(options)\n\t  client.write(request.toString());\n\t});\n\tclient.on('data', (data) => {\n\t  console.log(data.toString());\n\t  client.end();\n\t});\n\tclient.on('end', () => {\n\t  console.log('disconnected from server');\n\t});\n\tclient.on('error', (err) => {\n\t  console.log(err);\n\t  client.end();\n\t});\n\t```\n\t\n- 运行结果\n\t- ![封装后的request](http://p0.meituan.net/myvideodistribute/19807e0f02f52d93b9391645a286cfdf48815.png)\n\n\t\n#### 第三版：对 responseParse 进行封装\n\n- 简单分析 response 内容框架\n\t- ![response内容框架](http://p0.meituan.net/myvideodistribute/9c17bab40bf615430215e496d9bdfeb5147249.png)\n\n\t- 开始我们的状态机 constructor 简单编写\n\t\n\t\t```javascript\n\t\tconstructor() {\n\t\t  this.WAITING_STATUS_LINE = 0;\n\t\t  this.WAITING_STATUS_LINE_END = 1;\n\t\t  this.WAITING_HEADER_NAME = 2;\n\t\t  this.WAITING_HEADER_SPACE = 3;\n\t\t  this.WAITING_HEADER_VALUE = 4;\n\t\t  this.WAITING_HEADER_LINE_END = 5;\n\t\t  this.WAITING_HEADER_BLOCK_END = 6;\n\t\t  this.WAITING_BODY = 7;\n\t\t\n\t\t  this.current = this.WAITING_STATUS_LINE;\n\t\t  this.statusLine = \"\";\n\t\t  this.headers = {};\n\t\t  this.headerName = \"\";\n\t\t  this.headerValue = \"\";\n\t\t  this.bodyParse = null;\n\t\t}\n\t\t```\n\t\t\n\t- 对 response 字符流进行处理。循环读取流中数据\n\t\t\n\t\t```javascript\n\t\t// 字符流处理\n\t\treceive(string) {\n\t\t    for (let i = 0; i < string.length; i++) {\n\t\t      this.receiveChar(string.charAt(i));\n\t\t    }\n\t\t}\t\t\n  \t\t```\n  \t\t\n\t - 对流中单个字符进行扫描\n  \t\t\n  \t\t```javascript\n\t\t  receiveChar(char) {\n\t\t    if (this.current === this.WAITING_STATUS_LINE) {\n\t\t      if (char === '\\r') {\n\t\t        this.current = this.WAITING_STATUS_LINE_END\n\t\t      } else {\n\t\t        this.statusLine += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_STATUS_LINE_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_HEADER_NAME\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_NAME) {\n\t\t      if (char === ':') {\n\t\t        this.current = this.WAITING_HEADER_SPACE\n\t\t      } else if (char === '\\r') {\n\t\t        this.current = this.WAITING_HEADER_BLOCK_END\n\t\t        if (this.headers['Transfer-Encoding'] === 'chunked')\n\t\t          this.bodyParse = new TrunkedBodyParser();\n\t\t      } else {\n\t\t        this.headerName += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_SPACE) {\n\t\t      if (char === ' ') {\n\t\t        this.current = this.WAITING_HEADER_VALUE\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_VALUE) {\n\t\t      if (char === '\\r') {\n\t\t        this.current = this.WAITING_HEADER_LINE_END\n\t\t        this.headers[this.headerName] = this.headerValue\n\t\t        this.headerName = \"\"\n\t\t        this.headerValue = \"\"\n\t\t      } else {\n\t\t        this.headerValue += char\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_LINE_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_HEADER_NAME\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_HEADER_BLOCK_END) {\n\t\t      if (char === '\\n') {\n\t\t        this.current = this.WAITING_BODY\n\t\t      }\n\t\t    }\n\t\t\n\t\t    else if (this.current === this.WAITING_BODY) {\n\t\t      this.bodyParse.receiveChar(char)\n\t\t    }\n\t\t  }  \t\t\n  \t\t```\n  \t\t\t\n   - 简单分析 server 端的 TrunkBody \n\t\t\t\n\t\t```javascript\n\t\t2 // 下一行 trunk 长度\n\t\tok // trunk 内容\n\t\t0 // trunk 终止，再没有内容\n\t\t```\n\t\t- 开始我们的 TrunkedBodyParser 状态机 constructor 简单编写\n\t\n\t\t\t```javascript\n\t\t\t  constructor() {\n\t\t\t    this.WAITING_LENGTH = 0;\n\t\t\t    this.WAITING_LENGTH_LINE_END = 1;\n\t\t\t    this.READING_TRUNK = 2;\n\t\t\t    this.WAITING_NEW_LINE = 3;\n\t\t\t    this.WAITING_NEW_LINE_END = 4;\n\t\t\t    this.FINISHED_NEW_LINE = 5;\n\t\t\t    this.FINISHED_NEW_LINE_END = 6;\n\t\t\t    this.isFinished = false;\n\t\t\t    this.length = 0;\n\t\t\t    this.content = [];\n\t\t\t    this.current = this.WAITING_LENGTH;\n\t\t\t  }\n\t\t\t```\n\t\t\t- TrunkBody 字符处理\n\t\t\t\n\t\t\t\t```javascript\n\t\t\t\t  // 字符流处理\n\t\t\t\t  receiveChar(char) {\n\t\t\t\t    if (this.current === this.WAITING_LENGTH) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        if (this.length === 0) {\n\t\t\t\t          this.current = this.FINISHED_NEW_LINE\n\t\t\t\t        } else {\n\t\t\t\t          this.current = this.WAITING_LENGTH_LINE_END\n\t\t\t\t        }\n\t\t\t\t      } else {\n\t\t\t\t        this.length *= 10\n\t\t\t\t        this.length += char.charCodeAt(0) - '0'.charCodeAt(0)\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_LENGTH_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.current = this.READING_TRUNK\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.READING_TRUNK) {\n\t\t\t\t      this.content.push(char)\n\t\t\t\t      this.length --\n\t\t\t\t      if (this.length === 0) {\n\t\t\t\t        this.current = this.WAITING_NEW_LINE\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_NEW_LINE) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        this.current = this.WAITING_NEW_LINE_END\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.WAITING_NEW_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.current = this.WAITING_LENGTH\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.FINISHED_NEW_LINE) {\n\t\t\t\t      if (char === '\\r') {\n\t\t\t\t        this.current = this.FINISHED_NEW_LINE_END\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    else if (this.current === this.FINISHED_NEW_LINE_END) {\n\t\t\t\t      if (char === '\\n') {\n\t\t\t\t        this.isFinished = true\n\t\t\t\t      }\n\t\t\t\t    }\n\t\t  \t\t  }\n\t\t\t\t```\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n- 运行结果\n\t- ![client](http://p0.meituan.net/myvideodistribute/50256a14d9171b06c374dc7e6894efcf61275.png)\n\t- ![server](http://p0.meituan.net/myvideodistribute/23ed78fb0b5598952897249eb5ae2fbb29575.png)\n\n\t\n## 错误修改\n\n\n- ![错误修改](http://p0.meituan.net/myvideodistribute/fd4b58c42c99e0f2754c025b6682307650941.png)\n- server 端长度计算不是十进制，是十六进制\n\n\n  ```javascript\n  // 字符流处理\n  receiveChar(char) {\n    if (this.current === this.WAITING_LENGTH) {\n      if (char === '\\r') {\n        if (this.length === 0) {\n          this.current = this.FINISHED_NEW_LINE\n        } else {\n          this.current = this.WAITING_LENGTH_LINE_END\n        }\n      } else {\n        this.length *= 16\n        this.length += parseInt(char, 16)\n      }\n    }\n    ...\n  }\n  ```\n## 参考文献\n- [Node.js v12.16.3 Documentation](https://nodejs.org/dist/latest-v12.x/docs/api/http.html)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 祝大家多多发财","slug":"Toy-Browser-DAY1","published":1,"updated":"2020-05-26T14:56:08.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x3002f1wp341gm3sw8","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h3 id=\"Server-端实现\"><a href=\"#Server-端实现\" class=\"headerlink\" title=\"Server 端实现\"></a>Server 端实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Returns content-type &#x3D; text&#x2F;plain</span><br><span class=\"line\">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.setHeader(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;);</span><br><span class=\"line\">  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);</span><br><span class=\"line\">  res.writeHead(200, &#123; &#39;Content-Type&#39;: &#39;text&#x2F;plain&#39; &#125;);</span><br><span class=\"line\">  res.end(&#39;ok&#39;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8088);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to <strong>response.writeHead() given precedence</strong>.</p>\n</blockquote>\n<ul>\n<li>writeHead 与 setHeader 相比，具有更高的优先级</li>\n<li>所以最终的请求体头 ‘Content-Type’: ‘text/plain’</li>\n<li>这里我们让它监听 8088 端口，因为默认的 80端口，可能会存在占用</li>\n<li>我们可以在浏览器中，对 <a href=\"http://127.0.0.1:8088/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088/</a> 访问，最后我们要利用 toy-browser 简单模拟<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/aa69465245fc64274c75ac4e5aab244691470.png\" alt=\"浏览器行为\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Client-端实现\"><a href=\"#Client-端实现\" class=\"headerlink\" title=\"Client 端实现\"></a>Client 端实现</h3><h4 id=\"第一版：简单实现\"><a href=\"#第一版：简单实现\" class=\"headerlink\" title=\"第一版：简单实现\"></a>第一版：简单实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const net &#x3D; require(&#39;net&#39;);</span><br><span class=\"line\">const client &#x3D; net.createConnection(&#123; port: 8088 &#125;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; &#39;connect&#39; listener.</span><br><span class=\"line\">  console.log(&#39;connected to server!&#39;);</span><br><span class=\"line\">  client.write(&#39;POST &#x2F; HTTP&#x2F;1.1\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;HOST: 127.0.0.1\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;Content-Length: 9\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;Content-Type: application&#x2F;x-www-form-urlencoded\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;name&#x3D;elle&#39;);</span><br><span class=\"line\">  client.write(&#39;\\r\\n&#39;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(data.toString());</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;disconnected from server&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们开启服务端<blockquote>\n<p>node server.js</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>再开启客户端<blockquote>\n<p>node client.js</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>运行截图</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5a4f9f936d87d43335d08670a03205a448885.png\" alt=\"client\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/115d90c1e9de7f974d7749988e01c87332973.png\" alt=\"server\"></li>\n</ul>\n</li>\n<li><p>我们可以看到请求成功的发出，并且服务端也进行了正确的反馈。</p>\n<ul>\n<li>请求体：name=elle，’content-length’: ‘9’</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第二版：对-request-进行简单封装\"><a href=\"#第二版：对-request-进行简单封装\" class=\"headerlink\" title=\"第二版：对 request 进行简单封装\"></a>第二版：对 request 进行简单封装</h4><ul>\n<li><p>简单分析 request 构造器所需内容</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/7663a0cff7c034fbeadce907b2e445b588991.png\" alt=\"request\"></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request line</span></span><br><span class=\"line\">  <span class=\"comment\">// method, url = host + port + path</span></span><br><span class=\"line\"><span class=\"comment\">// headers</span></span><br><span class=\"line\">  <span class=\"comment\">// Content-Type</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: application/json</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: multipart/form-data</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: text/xml</span></span><br><span class=\"line\">  <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\"><span class=\"comment\">// body: k-v</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>我们可以简单写出封装后的 reqeust</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// request line</span></span><br><span class=\"line\">      <span class=\"comment\">// method, url = host + port + path</span></span><br><span class=\"line\">    <span class=\"comment\">// headers</span></span><br><span class=\"line\">      <span class=\"comment\">// Content-Type</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: application/json</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: multipart/form-data</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: text/xml</span></span><br><span class=\"line\">      <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\">    <span class=\"comment\">// body: k-v</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.method = options.method || <span class=\"string\">\"GET\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.host = options.host</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.port = options.port || <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.path = options.path || <span class=\"string\">\"/\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = options.body || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.headers = options.headers || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] === <span class=\"string\">\"application/json\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bodyText = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.body)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] === <span class=\"string\">\"application/x-www-form-urlencoded\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bodyText = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.body).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">this</span>.body[key])&#125;</span>`</span>).join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calculate Content-Length</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Length\"</span>] = <span class=\"keyword\">this</span>.bodyText.length</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.method&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.path&#125;</span> HTTP/1.1\\r\\nHOST: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.host&#125;</span>\\r\\n<span class=\"subst\">$&#123;<span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.headers).map(key =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.headers[key]&#125;</span>`</span>).join(<span class=\"string\">'\\r\\n'</span>)&#125;</span>\\r\\n\\r\\n<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.bodyText&#125;</span>\\r\\n`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再利用封装后的 request 进行 client 访问</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = net.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8088</span></span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 'connect' listener.</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'connected to server!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    host: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8088</span>,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      [<span class=\"string\">\"X-Foo2\"</span>]: <span class=\"string\">\"customed\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"elle\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> Request(options)</span><br><span class=\"line\">  client.write(request.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'disconnected from server'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, (err) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/19807e0f02f52d93b9391645a286cfdf48815.png\" alt=\"封装后的request\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第三版：对-responseParse-进行封装\"><a href=\"#第三版：对-responseParse-进行封装\" class=\"headerlink\" title=\"第三版：对 responseParse 进行封装\"></a>第三版：对 responseParse 进行封装</h4><ul>\n<li><p>简单分析 response 内容框架</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/9c17bab40bf615430215e496d9bdfeb5147249.png\" alt=\"response内容框架\"></p>\n</li>\n<li><p>开始我们的状态机 constructor 简单编写</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_STATUS_LINE = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_NAME = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_BODY = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_STATUS_LINE;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.statusLine = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headers = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headerName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headerValue = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bodyParse = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 response 字符流进行处理。循环读取流中数据</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receive(string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; string.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.receiveChar(string.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对流中单个字符进行扫描</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_STATUS_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.statusLine += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_NAME</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_NAME) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">':'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">'Transfer-Encoding'</span>] === <span class=\"string\">'chunked'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bodyParse = <span class=\"keyword\">new</span> TrunkedBodyParser();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerName += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headers[<span class=\"keyword\">this</span>.headerName] = <span class=\"keyword\">this</span>.headerValue</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerName = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerValue = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerValue += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_NAME</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_BODY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_BODY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bodyParse.receiveChar(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>简单分析 server 端的 TrunkBody </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"comment\">// 下一行 trunk 长度</span></span><br><span class=\"line\">ok <span class=\"comment\">// trunk 内容</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"comment\">// trunk 终止，再没有内容</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>开始我们的 TrunkedBodyParser 状态机 constructor 简单编写</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_LENGTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.READING_TRUNK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_NEW_LINE = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.FINISHED_NEW_LINE = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isFinished = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.content = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>TrunkBody 字符处理</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length *= <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length += char.charCodeAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.charCodeAt(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.READING_TRUNK</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.READING_TRUNK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.content.push(char)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length --</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_NEW_LINE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_NEW_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.FINISHED_NEW_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isFinished = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/50256a14d9171b06c374dc7e6894efcf61275.png\" alt=\"client\"></li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/23ed78fb0b5598952897249eb5ae2fbb29575.png\" alt=\"server\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"错误修改\"><a href=\"#错误修改\" class=\"headerlink\" title=\"错误修改\"></a>错误修改</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/fd4b58c42c99e0f2754c025b6682307650941.png\" alt=\"错误修改\"></li>\n<li>server 端长度计算不是十进制，是十六进制</li>\n</ul>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length *= <span class=\"number\">16</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length += <span class=\"built_in\">parseInt</span>(char, <span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/http.html\" target=\"_blank\" rel=\"noopener\">Node.js v12.16.3 Documentation</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n</ul>","more":"<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h3 id=\"Server-端实现\"><a href=\"#Server-端实现\" class=\"headerlink\" title=\"Server 端实现\"></a>Server 端实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Returns content-type &#x3D; text&#x2F;plain</span><br><span class=\"line\">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.setHeader(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;);</span><br><span class=\"line\">  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);</span><br><span class=\"line\">  res.writeHead(200, &#123; &#39;Content-Type&#39;: &#39;text&#x2F;plain&#39; &#125;);</span><br><span class=\"line\">  res.end(&#39;ok&#39;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8088);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to <strong>response.writeHead() given precedence</strong>.</p>\n</blockquote>\n<ul>\n<li>writeHead 与 setHeader 相比，具有更高的优先级</li>\n<li>所以最终的请求体头 ‘Content-Type’: ‘text/plain’</li>\n<li>这里我们让它监听 8088 端口，因为默认的 80端口，可能会存在占用</li>\n<li>我们可以在浏览器中，对 <a href=\"http://127.0.0.1:8088/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088/</a> 访问，最后我们要利用 toy-browser 简单模拟<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/aa69465245fc64274c75ac4e5aab244691470.png\" alt=\"浏览器行为\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Client-端实现\"><a href=\"#Client-端实现\" class=\"headerlink\" title=\"Client 端实现\"></a>Client 端实现</h3><h4 id=\"第一版：简单实现\"><a href=\"#第一版：简单实现\" class=\"headerlink\" title=\"第一版：简单实现\"></a>第一版：简单实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const net &#x3D; require(&#39;net&#39;);</span><br><span class=\"line\">const client &#x3D; net.createConnection(&#123; port: 8088 &#125;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; &#39;connect&#39; listener.</span><br><span class=\"line\">  console.log(&#39;connected to server!&#39;);</span><br><span class=\"line\">  client.write(&#39;POST &#x2F; HTTP&#x2F;1.1\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;HOST: 127.0.0.1\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;Content-Length: 9\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;Content-Type: application&#x2F;x-www-form-urlencoded\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;\\r\\n&#39;);</span><br><span class=\"line\">  client.write(&#39;name&#x3D;elle&#39;);</span><br><span class=\"line\">  client.write(&#39;\\r\\n&#39;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(data.toString());</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;disconnected from server&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们开启服务端<blockquote>\n<p>node server.js</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>再开启客户端<blockquote>\n<p>node client.js</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>运行截图</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5a4f9f936d87d43335d08670a03205a448885.png\" alt=\"client\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/115d90c1e9de7f974d7749988e01c87332973.png\" alt=\"server\"></li>\n</ul>\n</li>\n<li><p>我们可以看到请求成功的发出，并且服务端也进行了正确的反馈。</p>\n<ul>\n<li>请求体：name=elle，’content-length’: ‘9’</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第二版：对-request-进行简单封装\"><a href=\"#第二版：对-request-进行简单封装\" class=\"headerlink\" title=\"第二版：对 request 进行简单封装\"></a>第二版：对 request 进行简单封装</h4><ul>\n<li><p>简单分析 request 构造器所需内容</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/7663a0cff7c034fbeadce907b2e445b588991.png\" alt=\"request\"></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request line</span></span><br><span class=\"line\">  <span class=\"comment\">// method, url = host + port + path</span></span><br><span class=\"line\"><span class=\"comment\">// headers</span></span><br><span class=\"line\">  <span class=\"comment\">// Content-Type</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: application/json</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: multipart/form-data</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type: text/xml</span></span><br><span class=\"line\">  <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\"><span class=\"comment\">// body: k-v</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>我们可以简单写出封装后的 reqeust</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// request line</span></span><br><span class=\"line\">      <span class=\"comment\">// method, url = host + port + path</span></span><br><span class=\"line\">    <span class=\"comment\">// headers</span></span><br><span class=\"line\">      <span class=\"comment\">// Content-Type</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: application/json</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: multipart/form-data</span></span><br><span class=\"line\">        <span class=\"comment\">// Content-Type: text/xml</span></span><br><span class=\"line\">      <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\">    <span class=\"comment\">// body: k-v</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.method = options.method || <span class=\"string\">\"GET\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.host = options.host</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.port = options.port || <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.path = options.path || <span class=\"string\">\"/\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = options.body || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.headers = options.headers || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] === <span class=\"string\">\"application/json\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bodyText = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.body)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Type\"</span>] === <span class=\"string\">\"application/x-www-form-urlencoded\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bodyText = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.body).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">this</span>.body[key])&#125;</span>`</span>).join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calculate Content-Length</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.headers[<span class=\"string\">\"Content-Length\"</span>] = <span class=\"keyword\">this</span>.bodyText.length</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.method&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.path&#125;</span> HTTP/1.1\\r\\nHOST: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.host&#125;</span>\\r\\n<span class=\"subst\">$&#123;<span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.headers).map(key =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.headers[key]&#125;</span>`</span>).join(<span class=\"string\">'\\r\\n'</span>)&#125;</span>\\r\\n\\r\\n<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.bodyText&#125;</span>\\r\\n`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再利用封装后的 request 进行 client 访问</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = net.createConnection(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8088</span></span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 'connect' listener.</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'connected to server!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    host: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8088</span>,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      [<span class=\"string\">\"X-Foo2\"</span>]: <span class=\"string\">\"customed\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"elle\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> Request(options)</span><br><span class=\"line\">  client.write(request.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'disconnected from server'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, (err) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  client.end();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/19807e0f02f52d93b9391645a286cfdf48815.png\" alt=\"封装后的request\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第三版：对-responseParse-进行封装\"><a href=\"#第三版：对-responseParse-进行封装\" class=\"headerlink\" title=\"第三版：对 responseParse 进行封装\"></a>第三版：对 responseParse 进行封装</h4><ul>\n<li><p>简单分析 response 内容框架</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/9c17bab40bf615430215e496d9bdfeb5147249.png\" alt=\"response内容框架\"></p>\n</li>\n<li><p>开始我们的状态机 constructor 简单编写</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_STATUS_LINE = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_NAME = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_BODY = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_STATUS_LINE;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.statusLine = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headers = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headerName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headerValue = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bodyParse = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 response 字符流进行处理。循环读取流中数据</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receive(string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; string.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.receiveChar(string.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对流中单个字符进行扫描</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_STATUS_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.statusLine += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_STATUS_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_NAME</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_NAME) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">':'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.headers[<span class=\"string\">'Transfer-Encoding'</span>] === <span class=\"string\">'chunked'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bodyParse = <span class=\"keyword\">new</span> TrunkedBodyParser();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerName += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_SPACE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_VALUE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headers[<span class=\"keyword\">this</span>.headerName] = <span class=\"keyword\">this</span>.headerValue</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerName = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerValue = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.headerValue += char</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_HEADER_NAME</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_HEADER_BLOCK_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_BODY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_BODY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bodyParse.receiveChar(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>简单分析 server 端的 TrunkBody </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"comment\">// 下一行 trunk 长度</span></span><br><span class=\"line\">ok <span class=\"comment\">// trunk 内容</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"comment\">// trunk 终止，再没有内容</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>开始我们的 TrunkedBodyParser 状态机 constructor 简单编写</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_LENGTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.READING_TRUNK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_NEW_LINE = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.FINISHED_NEW_LINE = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isFinished = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.content = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>TrunkBody 字符处理</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length *= <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length += char.charCodeAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.charCodeAt(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.READING_TRUNK</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.READING_TRUNK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.content.push(char)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length --</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_NEW_LINE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_NEW_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_NEW_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.FINISHED_NEW_LINE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.FINISHED_NEW_LINE_END) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isFinished = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/50256a14d9171b06c374dc7e6894efcf61275.png\" alt=\"client\"></li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/23ed78fb0b5598952897249eb5ae2fbb29575.png\" alt=\"server\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"错误修改\"><a href=\"#错误修改\" class=\"headerlink\" title=\"错误修改\"></a>错误修改</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/fd4b58c42c99e0f2754c025b6682307650941.png\" alt=\"错误修改\"></li>\n<li>server 端长度计算不是十进制，是十六进制</li>\n</ul>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符流处理</span></span><br><span class=\"line\">receiveChar(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.current === <span class=\"keyword\">this</span>.WAITING_LENGTH) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.FINISHED_NEW_LINE</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current = <span class=\"keyword\">this</span>.WAITING_LENGTH_LINE_END</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length *= <span class=\"number\">16</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.length += <span class=\"built_in\">parseInt</span>(char, <span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/http.html\" target=\"_blank\" rel=\"noopener\">Node.js v12.16.3 Documentation</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"UTF8_Encoing","date":"2020-04-21T13:53:02.000Z","description":["记录一下将 String 字符串，转成字节流的整个实现过程"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 周一和小姐妹 Skady 宝贝练完舞后，交流了一个小时技术，是的🙆我们没有扯皮，难得交流技术。🤣她在玩“在C语言中编写JS代码，然后再编译成wasm，可以在浏览器里跑”，我们简单地交流了一下底层实现.<span style=\"color: #bfbfbf\">应该是基于 ArrayBuffer 的</span>\n- 然后不知怎么就想到了 0.1 + 0.2 ≠ 0.3，这个经典问题\n- 想看看它在内存中的表现\n- 并记录一下将 String 字符串，转成字节流的整个实现过程\n- 往下看吧~ 🤓\n\n<!-- more -->\n\n## 实践过程\n#### 总体思路\n- 统计字符串长度\n- 循环遍历字符串，进行编码\n- 输出编码后的字节流\n\n```javascript\nfunction UTF8_Encoding(str) {\n   let length = str.length,\n        strIndex = -1,\n        strEnd = length - 1,\n        bytes = new Uint8Array(length),\n        index = 0;\n\n    while (strIndex++ < strEnd) {\n        bytes[index] = str.charCodeAt(strIndex) & 0xFF; // 设置为低8位值\n        index += 1;\n    }\n\n    return bytes;\n}\n```\n\n## 字节流文件转 String\n#### 总体思路\n- 统计字节流长度\n- 循环遍历字节流，进行解码\n- 输出解码后的字节流\n\n```javascript\nfunction UTF8_Decoding(bytes) {\n    let str = \"\",\n        bytesIndex = -1,\n        bytesEnd = bytes.length - 1;\n\n    while (bytesIndex ++ < bytesEnd) {\n        str += String.fromCharCode(bytes[bytesIndex]);\n    }\n\n    return str;\n};\n```\n\n#### 测试截图\n- ![测试截图](http://p0.meituan.net/myvideodistribute/c1770110908275e40343791324f7dfff154914.png)\n\n\n## 类型化数组\n- 类型化数组中的元素都是数字。使用构造函数在创建类型化数组的时候决定了数组中数字（有符号或者无符号整数或者浮点数）的类型和大小（以位为单位）\n- 类型化数组有固定的长度。\n- 在创建类型化数组的时候，数组中的元素总是默认初始化为0.\n- **类型化数组**\n\t- **TypedArray** 视图支持的数据类型一共有 9 种（ **DataView** 视图支持除 **Uint8C** 以外的其他 8 种）。\n\n\t\t| 数据类型 |  字节长度  |  含义  | 对应的 C 语言类型 |\n\t\t| --- | --- | --- | --- |\n\t\t| Int8 | 1 | 8 位带符号整数 | signed char |\n\t\t| Uint8 |\t1 |\t8 位不带符号整数 |\tunsigned char |\n\t\t| Uint8C | 1 | 8 位不带符号整数（自动过滤溢出）|unsigned char |\n\t\t| Int16 |\t2 |\t16 位带符号整数 |\tshort |\n\t\t| Uint16 | 2 | 16 位不带符号整数 | unsigned short |\n\t\t| Int32 |\t4 | 32 位带符号整数 | int |\n\t\t| Uint32 | 4 | 32 位不带符号的整数 | unsigned int |\n\t\t| Float32 | 4\t | 32 位浮点数 | float |\n\t\t| Float64 | 8 |\t64 位浮点数 | double |\n- 在创建一个类型化数组的时候，可以传递数组大小给构造函数，或者传递一个数组或者类型化数组来用于初始化数组元素。一旦创建了类型化数组，就可以像操作其他类数组对象那样，通过常规的中括号表示法来对数组元素进行读/写操作。\n\n\t```javascript\n\tvar bytes = new Uint8Array(1024); // 1kb字节 \n\tfor (var i = 0; i < bytes.length; i ++) // 循环数组的每个元素\n\tfor (var i = 0; i < bytes.length; i ++) // 循环数组的每个元素\n\t\tbytes[i] = i & 0xFF; // 设置为索引的低8位值\n\tvar copy = new Uint8Array(bytes); // 创建数组的副本\n\tvar ints = new Int32Array([0, 1, 2, 3]); // 包含这4个int值的类型化数组\n\t```\n- 类型化数组：他们都是**基本字节块的视图**，称为一个 ArrayBuffer 。ArrayBuffer 只是不透明的字节块。可以通过类型化数组获取这些字节，但是 ArrayBuffer 自己并不是一个类型化数组。可以像对任意 Javascript 对象那样，使用数字数组索引来操作 ArrayBuffer。但是，这样做并**不能赋予访问缓冲区中字节的权限**\n\t\n\t```javascript\n\tvar bytes = new Uint8Array(8); // 分配8个字节\n\tbytes[0] = 1 // 把第一个字节设置为1\n\tbytes.buffer[0] = 255 // 错误获取，缓冲区中没有索引值0\n\tbytes.buffer[1] = 255 // 错误设置缓冲区字节\n\t\n\t```\n\n### “字节顺序”\n- 字节组织成更长的字的顺序\n- 为了高效，类型化数组采用底层硬件的原生顺序。在低位优先(little-endian)系统中， ArrayBuffer 中数字的字节是按照从低位到高位的顺序排列的。在高位优先(big-endian)系统中，字节是按照从高位到低位的顺序排列的。\n- 可以使用如下代码来检测系统的字节顺序：\n\n\t```javascript\n\t// 如果整数 Ox00000001 在内存中表示成： 01 00 00 00\n\t// 则说明当前系统是低位优先系统\n\t// 相反，在高位优先系统中，它会表示成：00 00 00 01\n\tvar little_endian = new Int8Array(new Int32Array([1]).buffer)[0] === 1\n\t```\n\t\n## 思考问题 0.1 + 0.2 ≠ 0.3\n- 我们可以先来看看 十进制小数的二进制表示：\n\t- 整数部分：除以2，取出余数，商继续除以2，直到得到0为止，将取出的余数逆序\n\t- 小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。\n\t- 所以 0.1 可以表示为\n\t\t- 0.000110011001100110011...\n\t- 0.2 可以表示为\n\t\t- 0.00110011001100110011...\n\n\t\t\n```javascript\n// 0.1 和 0.2 都转化成二进制后再进行运算\n0.00011001100110011001100110011001100110011001100110011010 +\n0.0011001100110011001100110011001100110011001100110011010 =\n0.0100110011001100110011001100110011001100110011001100111\n\n// 转成十进制正好是 0.30000000000000004\n```\n\n- 二进制数转成 IEEE 754 标准\n\n\t- ![IEEE 754 标准](http://p0.meituan.net/myvideodistribute/eefbaacb81e66deb742370e27d9e3bb876872.png)\n\n\t- 使用 64 位固定长度来表示，也就是标准的double 双精度浮点数。\n\t- 这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。\n\t- 这64个比特又可分为三个部分，即：\n\t\t- 第1位: 是符号的标志位(S), 0代表正数，1代表负数\n\t\t- 第1-11位: 指数位(E), 存储指数（exponent），用来表示次方数\n\t\t- 第12-63位: 尾数(M), 这52 位是尾数，超出的部分自动进一舍零\n\t- 实际数字就可以用以下公式来计算：\n\t\t\n\t\t- ![IEEE 754数学公式](http://p0.meituan.net/myvideodistribute/7b2c9fce00cfe3bf57fcede347257af276632.png)\n\n\t- 因此 0.1 的二进制表示：\t\n\n\t\t> 0.00011001100110011001100110011001100110011001100110011001100...\n\t\n\t\t- 首先 0.1 是正数，标志位 \n\t\t\n\t\t\t> Sign = 0\n\t\t\t\n\t\t- 其次, 将小数转化为科学计数法\n\t\t\t\n\t\t\t> 1.100110011001100110011001100110011001100110011001100... * 2^-4\n\t\t\t\n\t\t\t- 相对于，小数点移了4位，指数减4\n\t\t\t\n\t\t\t\t> exponent = -4 + 1023 = 1019\n\t\t\t\t\n\t\t\t\t> 01111111011\n\n\t\t- 由于科学计数法, 第一个数始终是1, 所以可以忽略存储, 只要存后面的52位就可以了\n\t\t- **如果超过了52位, 就是对第53位舍0进1**（精度误差）, 结果也就是\n\n\t\t\t> 1001100110011001100110011001100110011001100110011010\n\t\t\n\t- 因此 0.1 的 IEEE 754 的表示：\n\t\n\t\t- ![0.1 的IEEE 754](http://p0.meituan.net/myvideodistribute/1ae3cf9f7bda61d8d0849ce05f7657f997288.png)\n\t- 同理 0.2 的 IEEE 754 的表示：\n\t\t\n\t\t- ![0.2 的 IEEE 754](http://p0.meituan.net/myvideodistribute/0c5d93145800b45b59a3ef23dc2abe4a97936.png)\n\n### 查看 0.1 表示方式\n\n```javascript\nlet b = new Float64Array([0.1])\nconsole.log(b)\nlet intArr = new Uint8Array(b.buffer)\nfor (let i = 7; i >= 0; i --) {\n    s = intArr[i].toString(2)\n    while(s.length < 8) {\n        s = '0' + s\n    }\n    console.log(s)\n\n}\n```\t\n\n- ![低位优先系统](http://p0.meituan.net/myvideodistribute/d996e0a508b796f5a3d4f4866c1bf43064783.png)\n- 首先我们的系统是低位优先系统(little_endian)\n- ![查看 0.1 表示方式截图](http://p0.meituan.net/myvideodistribute/de79ee3caac77ddad9398cfeaaf3719f227171.png)\n\t- 0 --> 标志位\n\t- 011111111011 --> 指数位\n\t- 1001{12}1010 --> 尾数\n\n\t\n## 参考文献\n- 《Javascript 权威指南》22.5章 类型化数组和 ArrayBuffer P678\n- [彻底搞懂Javascript 浮点数](https://cloud.tencent.com/developer/article/1592651)\n- [二进制转换工具](http://www.binaryconvert.com/convert_double.html)\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/UTF8-Encoing.md","raw":"---\ntitle: UTF8_Encoing\ndate: 2020-04-21 21:53:02\ntags:\n- 前端概念\n- UTF-8\ncategories:\n- [前端概念]\ndescription:\n- 记录一下将 String 字符串，转成字节流的整个实现过程\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 周一和小姐妹 Skady 宝贝练完舞后，交流了一个小时技术，是的🙆我们没有扯皮，难得交流技术。🤣她在玩“在C语言中编写JS代码，然后再编译成wasm，可以在浏览器里跑”，我们简单地交流了一下底层实现.<span style=\"color: #bfbfbf\">应该是基于 ArrayBuffer 的</span>\n- 然后不知怎么就想到了 0.1 + 0.2 ≠ 0.3，这个经典问题\n- 想看看它在内存中的表现\n- 并记录一下将 String 字符串，转成字节流的整个实现过程\n- 往下看吧~ 🤓\n\n<!-- more -->\n\n## 实践过程\n#### 总体思路\n- 统计字符串长度\n- 循环遍历字符串，进行编码\n- 输出编码后的字节流\n\n```javascript\nfunction UTF8_Encoding(str) {\n   let length = str.length,\n        strIndex = -1,\n        strEnd = length - 1,\n        bytes = new Uint8Array(length),\n        index = 0;\n\n    while (strIndex++ < strEnd) {\n        bytes[index] = str.charCodeAt(strIndex) & 0xFF; // 设置为低8位值\n        index += 1;\n    }\n\n    return bytes;\n}\n```\n\n## 字节流文件转 String\n#### 总体思路\n- 统计字节流长度\n- 循环遍历字节流，进行解码\n- 输出解码后的字节流\n\n```javascript\nfunction UTF8_Decoding(bytes) {\n    let str = \"\",\n        bytesIndex = -1,\n        bytesEnd = bytes.length - 1;\n\n    while (bytesIndex ++ < bytesEnd) {\n        str += String.fromCharCode(bytes[bytesIndex]);\n    }\n\n    return str;\n};\n```\n\n#### 测试截图\n- ![测试截图](http://p0.meituan.net/myvideodistribute/c1770110908275e40343791324f7dfff154914.png)\n\n\n## 类型化数组\n- 类型化数组中的元素都是数字。使用构造函数在创建类型化数组的时候决定了数组中数字（有符号或者无符号整数或者浮点数）的类型和大小（以位为单位）\n- 类型化数组有固定的长度。\n- 在创建类型化数组的时候，数组中的元素总是默认初始化为0.\n- **类型化数组**\n\t- **TypedArray** 视图支持的数据类型一共有 9 种（ **DataView** 视图支持除 **Uint8C** 以外的其他 8 种）。\n\n\t\t| 数据类型 |  字节长度  |  含义  | 对应的 C 语言类型 |\n\t\t| --- | --- | --- | --- |\n\t\t| Int8 | 1 | 8 位带符号整数 | signed char |\n\t\t| Uint8 |\t1 |\t8 位不带符号整数 |\tunsigned char |\n\t\t| Uint8C | 1 | 8 位不带符号整数（自动过滤溢出）|unsigned char |\n\t\t| Int16 |\t2 |\t16 位带符号整数 |\tshort |\n\t\t| Uint16 | 2 | 16 位不带符号整数 | unsigned short |\n\t\t| Int32 |\t4 | 32 位带符号整数 | int |\n\t\t| Uint32 | 4 | 32 位不带符号的整数 | unsigned int |\n\t\t| Float32 | 4\t | 32 位浮点数 | float |\n\t\t| Float64 | 8 |\t64 位浮点数 | double |\n- 在创建一个类型化数组的时候，可以传递数组大小给构造函数，或者传递一个数组或者类型化数组来用于初始化数组元素。一旦创建了类型化数组，就可以像操作其他类数组对象那样，通过常规的中括号表示法来对数组元素进行读/写操作。\n\n\t```javascript\n\tvar bytes = new Uint8Array(1024); // 1kb字节 \n\tfor (var i = 0; i < bytes.length; i ++) // 循环数组的每个元素\n\tfor (var i = 0; i < bytes.length; i ++) // 循环数组的每个元素\n\t\tbytes[i] = i & 0xFF; // 设置为索引的低8位值\n\tvar copy = new Uint8Array(bytes); // 创建数组的副本\n\tvar ints = new Int32Array([0, 1, 2, 3]); // 包含这4个int值的类型化数组\n\t```\n- 类型化数组：他们都是**基本字节块的视图**，称为一个 ArrayBuffer 。ArrayBuffer 只是不透明的字节块。可以通过类型化数组获取这些字节，但是 ArrayBuffer 自己并不是一个类型化数组。可以像对任意 Javascript 对象那样，使用数字数组索引来操作 ArrayBuffer。但是，这样做并**不能赋予访问缓冲区中字节的权限**\n\t\n\t```javascript\n\tvar bytes = new Uint8Array(8); // 分配8个字节\n\tbytes[0] = 1 // 把第一个字节设置为1\n\tbytes.buffer[0] = 255 // 错误获取，缓冲区中没有索引值0\n\tbytes.buffer[1] = 255 // 错误设置缓冲区字节\n\t\n\t```\n\n### “字节顺序”\n- 字节组织成更长的字的顺序\n- 为了高效，类型化数组采用底层硬件的原生顺序。在低位优先(little-endian)系统中， ArrayBuffer 中数字的字节是按照从低位到高位的顺序排列的。在高位优先(big-endian)系统中，字节是按照从高位到低位的顺序排列的。\n- 可以使用如下代码来检测系统的字节顺序：\n\n\t```javascript\n\t// 如果整数 Ox00000001 在内存中表示成： 01 00 00 00\n\t// 则说明当前系统是低位优先系统\n\t// 相反，在高位优先系统中，它会表示成：00 00 00 01\n\tvar little_endian = new Int8Array(new Int32Array([1]).buffer)[0] === 1\n\t```\n\t\n## 思考问题 0.1 + 0.2 ≠ 0.3\n- 我们可以先来看看 十进制小数的二进制表示：\n\t- 整数部分：除以2，取出余数，商继续除以2，直到得到0为止，将取出的余数逆序\n\t- 小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。\n\t- 所以 0.1 可以表示为\n\t\t- 0.000110011001100110011...\n\t- 0.2 可以表示为\n\t\t- 0.00110011001100110011...\n\n\t\t\n```javascript\n// 0.1 和 0.2 都转化成二进制后再进行运算\n0.00011001100110011001100110011001100110011001100110011010 +\n0.0011001100110011001100110011001100110011001100110011010 =\n0.0100110011001100110011001100110011001100110011001100111\n\n// 转成十进制正好是 0.30000000000000004\n```\n\n- 二进制数转成 IEEE 754 标准\n\n\t- ![IEEE 754 标准](http://p0.meituan.net/myvideodistribute/eefbaacb81e66deb742370e27d9e3bb876872.png)\n\n\t- 使用 64 位固定长度来表示，也就是标准的double 双精度浮点数。\n\t- 这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。\n\t- 这64个比特又可分为三个部分，即：\n\t\t- 第1位: 是符号的标志位(S), 0代表正数，1代表负数\n\t\t- 第1-11位: 指数位(E), 存储指数（exponent），用来表示次方数\n\t\t- 第12-63位: 尾数(M), 这52 位是尾数，超出的部分自动进一舍零\n\t- 实际数字就可以用以下公式来计算：\n\t\t\n\t\t- ![IEEE 754数学公式](http://p0.meituan.net/myvideodistribute/7b2c9fce00cfe3bf57fcede347257af276632.png)\n\n\t- 因此 0.1 的二进制表示：\t\n\n\t\t> 0.00011001100110011001100110011001100110011001100110011001100...\n\t\n\t\t- 首先 0.1 是正数，标志位 \n\t\t\n\t\t\t> Sign = 0\n\t\t\t\n\t\t- 其次, 将小数转化为科学计数法\n\t\t\t\n\t\t\t> 1.100110011001100110011001100110011001100110011001100... * 2^-4\n\t\t\t\n\t\t\t- 相对于，小数点移了4位，指数减4\n\t\t\t\n\t\t\t\t> exponent = -4 + 1023 = 1019\n\t\t\t\t\n\t\t\t\t> 01111111011\n\n\t\t- 由于科学计数法, 第一个数始终是1, 所以可以忽略存储, 只要存后面的52位就可以了\n\t\t- **如果超过了52位, 就是对第53位舍0进1**（精度误差）, 结果也就是\n\n\t\t\t> 1001100110011001100110011001100110011001100110011010\n\t\t\n\t- 因此 0.1 的 IEEE 754 的表示：\n\t\n\t\t- ![0.1 的IEEE 754](http://p0.meituan.net/myvideodistribute/1ae3cf9f7bda61d8d0849ce05f7657f997288.png)\n\t- 同理 0.2 的 IEEE 754 的表示：\n\t\t\n\t\t- ![0.2 的 IEEE 754](http://p0.meituan.net/myvideodistribute/0c5d93145800b45b59a3ef23dc2abe4a97936.png)\n\n### 查看 0.1 表示方式\n\n```javascript\nlet b = new Float64Array([0.1])\nconsole.log(b)\nlet intArr = new Uint8Array(b.buffer)\nfor (let i = 7; i >= 0; i --) {\n    s = intArr[i].toString(2)\n    while(s.length < 8) {\n        s = '0' + s\n    }\n    console.log(s)\n\n}\n```\t\n\n- ![低位优先系统](http://p0.meituan.net/myvideodistribute/d996e0a508b796f5a3d4f4866c1bf43064783.png)\n- 首先我们的系统是低位优先系统(little_endian)\n- ![查看 0.1 表示方式截图](http://p0.meituan.net/myvideodistribute/de79ee3caac77ddad9398cfeaaf3719f227171.png)\n\t- 0 --> 标志位\n\t- 011111111011 --> 指数位\n\t- 1001{12}1010 --> 尾数\n\n\t\n## 参考文献\n- 《Javascript 权威指南》22.5章 类型化数组和 ArrayBuffer P678\n- [彻底搞懂Javascript 浮点数](https://cloud.tencent.com/developer/article/1592651)\n- [二进制转换工具](http://www.binaryconvert.com/convert_double.html)\n\n## 写在后面\n- 祝大家多多发财\n","slug":"UTF8-Encoing","published":1,"updated":"2020-04-27T04:03:59.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x4002i1wp32y9aaco2","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>周一和小姐妹 Skady 宝贝练完舞后，交流了一个小时技术，是的🙆我们没有扯皮，难得交流技术。🤣她在玩“在C语言中编写JS代码，然后再编译成wasm，可以在浏览器里跑”，我们简单地交流了一下底层实现.<span style=\"color: #bfbfbf\">应该是基于 ArrayBuffer 的</span></li>\n<li>然后不知怎么就想到了 0.1 + 0.2 ≠ 0.3，这个经典问题</li>\n<li>想看看它在内存中的表现</li>\n<li>并记录一下将 String 字符串，转成字节流的整个实现过程</li>\n<li>往下看吧~ 🤓</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h4 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h4><ul>\n<li>统计字符串长度</li>\n<li>循环遍历字符串，进行编码</li>\n<li>输出编码后的字节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UTF8_Encoding</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> length = str.length,</span><br><span class=\"line\">        strIndex = <span class=\"number\">-1</span>,</span><br><span class=\"line\">        strEnd = length - <span class=\"number\">1</span>,</span><br><span class=\"line\">        bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(length),</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (strIndex++ &lt; strEnd) &#123;</span><br><span class=\"line\">        bytes[index] = str.charCodeAt(strIndex) &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// 设置为低8位值</span></span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字节流文件转-String\"><a href=\"#字节流文件转-String\" class=\"headerlink\" title=\"字节流文件转 String\"></a>字节流文件转 String</h2><h4 id=\"总体思路-1\"><a href=\"#总体思路-1\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h4><ul>\n<li>统计字节流长度</li>\n<li>循环遍历字节流，进行解码</li>\n<li>输出解码后的字节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UTF8_Decoding</span>(<span class=\"params\">bytes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        bytesIndex = <span class=\"number\">-1</span>,</span><br><span class=\"line\">        bytesEnd = bytes.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytesIndex ++ &lt; bytesEnd) &#123;</span><br><span class=\"line\">        str += <span class=\"built_in\">String</span>.fromCharCode(bytes[bytesIndex]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试截图\"><a href=\"#测试截图\" class=\"headerlink\" title=\"测试截图\"></a>测试截图</h4><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c1770110908275e40343791324f7dfff154914.png\" alt=\"测试截图\"></li>\n</ul>\n<h2 id=\"类型化数组\"><a href=\"#类型化数组\" class=\"headerlink\" title=\"类型化数组\"></a>类型化数组</h2><ul>\n<li><p>类型化数组中的元素都是数字。使用构造函数在创建类型化数组的时候决定了数组中数字（有符号或者无符号整数或者浮点数）的类型和大小（以位为单位）</p>\n</li>\n<li><p>类型化数组有固定的长度。</p>\n</li>\n<li><p>在创建类型化数组的时候，数组中的元素总是默认初始化为0.</p>\n</li>\n<li><p><strong>类型化数组</strong></p>\n<ul>\n<li><p><strong>TypedArray</strong> 视图支持的数据类型一共有 9 种（ <strong>DataView</strong> 视图支持除 <strong>Uint8C</strong> 以外的其他 8 种）。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节长度</th>\n<th>含义</th>\n<th>对应的 C 语言类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Int8</td>\n<td>1</td>\n<td>8 位带符号整数</td>\n<td>signed char</td>\n</tr>\n<tr>\n<td>Uint8</td>\n<td>1</td>\n<td>8 位不带符号整数</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>Uint8C</td>\n<td>1</td>\n<td>8 位不带符号整数（自动过滤溢出）</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>Int16</td>\n<td>2</td>\n<td>16 位带符号整数</td>\n<td>short</td>\n</tr>\n<tr>\n<td>Uint16</td>\n<td>2</td>\n<td>16 位不带符号整数</td>\n<td>unsigned short</td>\n</tr>\n<tr>\n<td>Int32</td>\n<td>4</td>\n<td>32 位带符号整数</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Uint32</td>\n<td>4</td>\n<td>32 位不带符号的整数</td>\n<td>unsigned int</td>\n</tr>\n<tr>\n<td>Float32</td>\n<td>4</td>\n<td>32 位浮点数</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Float64</td>\n<td>8</td>\n<td>64 位浮点数</td>\n<td>double</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>在创建一个类型化数组的时候，可以传递数组大小给构造函数，或者传递一个数组或者类型化数组来用于初始化数组元素。一旦创建了类型化数组，就可以像操作其他类数组对象那样，通过常规的中括号表示法来对数组元素进行读/写操作。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// 1kb字节 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i ++) <span class=\"comment\">// 循环数组的每个元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i ++) <span class=\"comment\">// 循环数组的每个元素</span></span><br><span class=\"line\">\tbytes[i] = i &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// 设置为索引的低8位值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(bytes); <span class=\"comment\">// 创建数组的副本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 包含这4个int值的类型化数组</span></span><br></pre></td></tr></table></figure></li>\n<li><p>类型化数组：他们都是<strong>基本字节块的视图</strong>，称为一个 ArrayBuffer 。ArrayBuffer 只是不透明的字节块。可以通过类型化数组获取这些字节，但是 ArrayBuffer 自己并不是一个类型化数组。可以像对任意 Javascript 对象那样，使用数字数组索引来操作 ArrayBuffer。但是，这样做并<strong>不能赋予访问缓冲区中字节的权限</strong></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 分配8个字节</span></span><br><span class=\"line\">bytes[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"comment\">// 把第一个字节设置为1</span></span><br><span class=\"line\">bytes.buffer[<span class=\"number\">0</span>] = <span class=\"number\">255</span> <span class=\"comment\">// 错误获取，缓冲区中没有索引值0</span></span><br><span class=\"line\">bytes.buffer[<span class=\"number\">1</span>] = <span class=\"number\">255</span> <span class=\"comment\">// 错误设置缓冲区字节</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"“字节顺序”\"><a href=\"#“字节顺序”\" class=\"headerlink\" title=\"“字节顺序”\"></a>“字节顺序”</h3><ul>\n<li><p>字节组织成更长的字的顺序</p>\n</li>\n<li><p>为了高效，类型化数组采用底层硬件的原生顺序。在低位优先(little-endian)系统中， ArrayBuffer 中数字的字节是按照从低位到高位的顺序排列的。在高位优先(big-endian)系统中，字节是按照从高位到低位的顺序排列的。</p>\n</li>\n<li><p>可以使用如下代码来检测系统的字节顺序：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果整数 Ox00000001 在内存中表示成： 01 00 00 00</span></span><br><span class=\"line\"><span class=\"comment\">// 则说明当前系统是低位优先系统</span></span><br><span class=\"line\"><span class=\"comment\">// 相反，在高位优先系统中，它会表示成：00 00 00 01</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> little_endian = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>]).buffer)[<span class=\"number\">0</span>] === <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"思考问题-0-1-0-2-≠-0-3\"><a href=\"#思考问题-0-1-0-2-≠-0-3\" class=\"headerlink\" title=\"思考问题 0.1 + 0.2 ≠ 0.3\"></a>思考问题 0.1 + 0.2 ≠ 0.3</h2><ul>\n<li>我们可以先来看看 十进制小数的二进制表示：<ul>\n<li>整数部分：除以2，取出余数，商继续除以2，直到得到0为止，将取出的余数逆序</li>\n<li>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</li>\n<li>所以 0.1 可以表示为<ul>\n<li>0.000110011001100110011…</li>\n</ul>\n</li>\n<li>0.2 可以表示为<ul>\n<li>0.00110011001100110011…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0.1 和 0.2 都转化成二进制后再进行运算</span></span><br><span class=\"line\"><span class=\"number\">0.00011001100110011001100110011001100110011001100110011010</span> +</span><br><span class=\"line\"><span class=\"number\">0.0011001100110011001100110011001100110011001100110011010</span> =</span><br><span class=\"line\"><span class=\"number\">0.0100110011001100110011001100110011001100110011001100111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转成十进制正好是 0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>二进制数转成 IEEE 754 标准</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/eefbaacb81e66deb742370e27d9e3bb876872.png\" alt=\"IEEE 754 标准\"></p>\n</li>\n<li><p>使用 64 位固定长度来表示，也就是标准的double 双精度浮点数。</p>\n</li>\n<li><p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。</p>\n</li>\n<li><p>这64个比特又可分为三个部分，即：</p>\n<ul>\n<li>第1位: 是符号的标志位(S), 0代表正数，1代表负数</li>\n<li>第1-11位: 指数位(E), 存储指数（exponent），用来表示次方数</li>\n<li>第12-63位: 尾数(M), 这52 位是尾数，超出的部分自动进一舍零</li>\n</ul>\n</li>\n<li><p>实际数字就可以用以下公式来计算：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7b2c9fce00cfe3bf57fcede347257af276632.png\" alt=\"IEEE 754数学公式\"></li>\n</ul>\n</li>\n<li><p>因此 0.1 的二进制表示：    </p>\n<blockquote>\n<p>0.00011001100110011001100110011001100110011001100110011001100…</p>\n</blockquote>\n<ul>\n<li><p>首先 0.1 是正数，标志位 </p>\n<blockquote>\n<p>Sign = 0</p>\n</blockquote>\n</li>\n<li><p>其次, 将小数转化为科学计数法</p>\n<blockquote>\n<p>1.100110011001100110011001100110011001100110011001100… * 2^-4</p>\n</blockquote>\n<ul>\n<li><p>相对于，小数点移了4位，指数减4</p>\n<blockquote>\n<p>exponent = -4 + 1023 = 1019</p>\n</blockquote>\n<blockquote>\n<p>01111111011</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>由于科学计数法, 第一个数始终是1, 所以可以忽略存储, 只要存后面的52位就可以了</p>\n</li>\n<li><p><strong>如果超过了52位, 就是对第53位舍0进1</strong>（精度误差）, 结果也就是</p>\n<blockquote>\n<p>1001100110011001100110011001100110011001100110011010</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>因此 0.1 的 IEEE 754 的表示：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/1ae3cf9f7bda61d8d0849ce05f7657f997288.png\" alt=\"0.1 的IEEE 754\"></li>\n</ul>\n</li>\n<li><p>同理 0.2 的 IEEE 754 的表示：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0c5d93145800b45b59a3ef23dc2abe4a97936.png\" alt=\"0.2 的 IEEE 754\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看-0-1-表示方式\"><a href=\"#查看-0-1-表示方式\" class=\"headerlink\" title=\"查看 0.1 表示方式\"></a>查看 0.1 表示方式</h3><pre><code class=\"javascript\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Float64Array</span>([<span class=\"number\">0.1</span>])\n<span class=\"built_in\">console</span>.log(b)\n<span class=\"keyword\">let</span> intArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(b.buffer)\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">7</span>; i &gt;= <span class=\"number\">0</span>; i --) {\n    s = intArr[i].toString(<span class=\"number\">2</span>)\n    <span class=\"keyword\">while</span>(s.length &lt; <span class=\"number\">8</span>) {\n        s = <span class=\"string\">'0'</span> + s\n    }\n    <span class=\"built_in\">console</span>.log(s)\n\n}</code></pre>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d996e0a508b796f5a3d4f4866c1bf43064783.png\" alt=\"低位优先系统\"></li>\n<li>首先我们的系统是低位优先系统(little_endian)</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/de79ee3caac77ddad9398cfeaaf3719f227171.png\" alt=\"查看 0.1 表示方式截图\"><ul>\n<li>0 –&gt; 标志位</li>\n<li>011111111011 –&gt; 指数位</li>\n<li>1001{12}1010 –&gt; 尾数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《Javascript 权威指南》22.5章 类型化数组和 ArrayBuffer P678</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1592651\" target=\"_blank\" rel=\"noopener\">彻底搞懂Javascript 浮点数</a></li>\n<li><a href=\"http://www.binaryconvert.com/convert_double.html\" target=\"_blank\" rel=\"noopener\">二进制转换工具</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>周一和小姐妹 Skady 宝贝练完舞后，交流了一个小时技术，是的🙆我们没有扯皮，难得交流技术。🤣她在玩“在C语言中编写JS代码，然后再编译成wasm，可以在浏览器里跑”，我们简单地交流了一下底层实现.<span style=\"color: #bfbfbf\">应该是基于 ArrayBuffer 的</span></li>\n<li>然后不知怎么就想到了 0.1 + 0.2 ≠ 0.3，这个经典问题</li>\n<li>想看看它在内存中的表现</li>\n<li>并记录一下将 String 字符串，转成字节流的整个实现过程</li>\n<li>往下看吧~ 🤓</li>\n</ul>","more":"<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h4 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h4><ul>\n<li>统计字符串长度</li>\n<li>循环遍历字符串，进行编码</li>\n<li>输出编码后的字节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UTF8_Encoding</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> length = str.length,</span><br><span class=\"line\">        strIndex = <span class=\"number\">-1</span>,</span><br><span class=\"line\">        strEnd = length - <span class=\"number\">1</span>,</span><br><span class=\"line\">        bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(length),</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (strIndex++ &lt; strEnd) &#123;</span><br><span class=\"line\">        bytes[index] = str.charCodeAt(strIndex) &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// 设置为低8位值</span></span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字节流文件转-String\"><a href=\"#字节流文件转-String\" class=\"headerlink\" title=\"字节流文件转 String\"></a>字节流文件转 String</h2><h4 id=\"总体思路-1\"><a href=\"#总体思路-1\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h4><ul>\n<li>统计字节流长度</li>\n<li>循环遍历字节流，进行解码</li>\n<li>输出解码后的字节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UTF8_Decoding</span>(<span class=\"params\">bytes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        bytesIndex = <span class=\"number\">-1</span>,</span><br><span class=\"line\">        bytesEnd = bytes.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytesIndex ++ &lt; bytesEnd) &#123;</span><br><span class=\"line\">        str += <span class=\"built_in\">String</span>.fromCharCode(bytes[bytesIndex]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试截图\"><a href=\"#测试截图\" class=\"headerlink\" title=\"测试截图\"></a>测试截图</h4><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c1770110908275e40343791324f7dfff154914.png\" alt=\"测试截图\"></li>\n</ul>\n<h2 id=\"类型化数组\"><a href=\"#类型化数组\" class=\"headerlink\" title=\"类型化数组\"></a>类型化数组</h2><ul>\n<li><p>类型化数组中的元素都是数字。使用构造函数在创建类型化数组的时候决定了数组中数字（有符号或者无符号整数或者浮点数）的类型和大小（以位为单位）</p>\n</li>\n<li><p>类型化数组有固定的长度。</p>\n</li>\n<li><p>在创建类型化数组的时候，数组中的元素总是默认初始化为0.</p>\n</li>\n<li><p><strong>类型化数组</strong></p>\n<ul>\n<li><p><strong>TypedArray</strong> 视图支持的数据类型一共有 9 种（ <strong>DataView</strong> 视图支持除 <strong>Uint8C</strong> 以外的其他 8 种）。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>字节长度</th>\n<th>含义</th>\n<th>对应的 C 语言类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Int8</td>\n<td>1</td>\n<td>8 位带符号整数</td>\n<td>signed char</td>\n</tr>\n<tr>\n<td>Uint8</td>\n<td>1</td>\n<td>8 位不带符号整数</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>Uint8C</td>\n<td>1</td>\n<td>8 位不带符号整数（自动过滤溢出）</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>Int16</td>\n<td>2</td>\n<td>16 位带符号整数</td>\n<td>short</td>\n</tr>\n<tr>\n<td>Uint16</td>\n<td>2</td>\n<td>16 位不带符号整数</td>\n<td>unsigned short</td>\n</tr>\n<tr>\n<td>Int32</td>\n<td>4</td>\n<td>32 位带符号整数</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Uint32</td>\n<td>4</td>\n<td>32 位不带符号的整数</td>\n<td>unsigned int</td>\n</tr>\n<tr>\n<td>Float32</td>\n<td>4</td>\n<td>32 位浮点数</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Float64</td>\n<td>8</td>\n<td>64 位浮点数</td>\n<td>double</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>在创建一个类型化数组的时候，可以传递数组大小给构造函数，或者传递一个数组或者类型化数组来用于初始化数组元素。一旦创建了类型化数组，就可以像操作其他类数组对象那样，通过常规的中括号表示法来对数组元素进行读/写操作。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// 1kb字节 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i ++) <span class=\"comment\">// 循环数组的每个元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i ++) <span class=\"comment\">// 循环数组的每个元素</span></span><br><span class=\"line\">\tbytes[i] = i &amp; <span class=\"number\">0xFF</span>; <span class=\"comment\">// 设置为索引的低8位值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(bytes); <span class=\"comment\">// 创建数组的副本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 包含这4个int值的类型化数组</span></span><br></pre></td></tr></table></figure></li>\n<li><p>类型化数组：他们都是<strong>基本字节块的视图</strong>，称为一个 ArrayBuffer 。ArrayBuffer 只是不透明的字节块。可以通过类型化数组获取这些字节，但是 ArrayBuffer 自己并不是一个类型化数组。可以像对任意 Javascript 对象那样，使用数字数组索引来操作 ArrayBuffer。但是，这样做并<strong>不能赋予访问缓冲区中字节的权限</strong></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 分配8个字节</span></span><br><span class=\"line\">bytes[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"comment\">// 把第一个字节设置为1</span></span><br><span class=\"line\">bytes.buffer[<span class=\"number\">0</span>] = <span class=\"number\">255</span> <span class=\"comment\">// 错误获取，缓冲区中没有索引值0</span></span><br><span class=\"line\">bytes.buffer[<span class=\"number\">1</span>] = <span class=\"number\">255</span> <span class=\"comment\">// 错误设置缓冲区字节</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"“字节顺序”\"><a href=\"#“字节顺序”\" class=\"headerlink\" title=\"“字节顺序”\"></a>“字节顺序”</h3><ul>\n<li><p>字节组织成更长的字的顺序</p>\n</li>\n<li><p>为了高效，类型化数组采用底层硬件的原生顺序。在低位优先(little-endian)系统中， ArrayBuffer 中数字的字节是按照从低位到高位的顺序排列的。在高位优先(big-endian)系统中，字节是按照从高位到低位的顺序排列的。</p>\n</li>\n<li><p>可以使用如下代码来检测系统的字节顺序：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果整数 Ox00000001 在内存中表示成： 01 00 00 00</span></span><br><span class=\"line\"><span class=\"comment\">// 则说明当前系统是低位优先系统</span></span><br><span class=\"line\"><span class=\"comment\">// 相反，在高位优先系统中，它会表示成：00 00 00 01</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> little_endian = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>]).buffer)[<span class=\"number\">0</span>] === <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"思考问题-0-1-0-2-≠-0-3\"><a href=\"#思考问题-0-1-0-2-≠-0-3\" class=\"headerlink\" title=\"思考问题 0.1 + 0.2 ≠ 0.3\"></a>思考问题 0.1 + 0.2 ≠ 0.3</h2><ul>\n<li>我们可以先来看看 十进制小数的二进制表示：<ul>\n<li>整数部分：除以2，取出余数，商继续除以2，直到得到0为止，将取出的余数逆序</li>\n<li>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</li>\n<li>所以 0.1 可以表示为<ul>\n<li>0.000110011001100110011…</li>\n</ul>\n</li>\n<li>0.2 可以表示为<ul>\n<li>0.00110011001100110011…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0.1 和 0.2 都转化成二进制后再进行运算</span></span><br><span class=\"line\"><span class=\"number\">0.00011001100110011001100110011001100110011001100110011010</span> +</span><br><span class=\"line\"><span class=\"number\">0.0011001100110011001100110011001100110011001100110011010</span> =</span><br><span class=\"line\"><span class=\"number\">0.0100110011001100110011001100110011001100110011001100111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转成十进制正好是 0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>二进制数转成 IEEE 754 标准</p>\n<ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/eefbaacb81e66deb742370e27d9e3bb876872.png\" alt=\"IEEE 754 标准\"></p>\n</li>\n<li><p>使用 64 位固定长度来表示，也就是标准的double 双精度浮点数。</p>\n</li>\n<li><p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。</p>\n</li>\n<li><p>这64个比特又可分为三个部分，即：</p>\n<ul>\n<li>第1位: 是符号的标志位(S), 0代表正数，1代表负数</li>\n<li>第1-11位: 指数位(E), 存储指数（exponent），用来表示次方数</li>\n<li>第12-63位: 尾数(M), 这52 位是尾数，超出的部分自动进一舍零</li>\n</ul>\n</li>\n<li><p>实际数字就可以用以下公式来计算：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7b2c9fce00cfe3bf57fcede347257af276632.png\" alt=\"IEEE 754数学公式\"></li>\n</ul>\n</li>\n<li><p>因此 0.1 的二进制表示：    </p>\n<blockquote>\n<p>0.00011001100110011001100110011001100110011001100110011001100…</p>\n</blockquote>\n<ul>\n<li><p>首先 0.1 是正数，标志位 </p>\n<blockquote>\n<p>Sign = 0</p>\n</blockquote>\n</li>\n<li><p>其次, 将小数转化为科学计数法</p>\n<blockquote>\n<p>1.100110011001100110011001100110011001100110011001100… * 2^-4</p>\n</blockquote>\n<ul>\n<li><p>相对于，小数点移了4位，指数减4</p>\n<blockquote>\n<p>exponent = -4 + 1023 = 1019</p>\n</blockquote>\n<blockquote>\n<p>01111111011</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>由于科学计数法, 第一个数始终是1, 所以可以忽略存储, 只要存后面的52位就可以了</p>\n</li>\n<li><p><strong>如果超过了52位, 就是对第53位舍0进1</strong>（精度误差）, 结果也就是</p>\n<blockquote>\n<p>1001100110011001100110011001100110011001100110011010</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>因此 0.1 的 IEEE 754 的表示：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/1ae3cf9f7bda61d8d0849ce05f7657f997288.png\" alt=\"0.1 的IEEE 754\"></li>\n</ul>\n</li>\n<li><p>同理 0.2 的 IEEE 754 的表示：</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0c5d93145800b45b59a3ef23dc2abe4a97936.png\" alt=\"0.2 的 IEEE 754\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看-0-1-表示方式\"><a href=\"#查看-0-1-表示方式\" class=\"headerlink\" title=\"查看 0.1 表示方式\"></a>查看 0.1 表示方式</h3><pre><code class=\"javascript\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Float64Array</span>([<span class=\"number\">0.1</span>])\n<span class=\"built_in\">console</span>.log(b)\n<span class=\"keyword\">let</span> intArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(b.buffer)\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">7</span>; i &gt;= <span class=\"number\">0</span>; i --) {\n    s = intArr[i].toString(<span class=\"number\">2</span>)\n    <span class=\"keyword\">while</span>(s.length &lt; <span class=\"number\">8</span>) {\n        s = <span class=\"string\">'0'</span> + s\n    }\n    <span class=\"built_in\">console</span>.log(s)\n\n}</code></pre>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d996e0a508b796f5a3d4f4866c1bf43064783.png\" alt=\"低位优先系统\"></li>\n<li>首先我们的系统是低位优先系统(little_endian)</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/de79ee3caac77ddad9398cfeaaf3719f227171.png\" alt=\"查看 0.1 表示方式截图\"><ul>\n<li>0 –&gt; 标志位</li>\n<li>011111111011 –&gt; 指数位</li>\n<li>1001{12}1010 –&gt; 尾数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《Javascript 权威指南》22.5章 类型化数组和 ArrayBuffer P678</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1592651\" target=\"_blank\" rel=\"noopener\">彻底搞懂Javascript 浮点数</a></li>\n<li><a href=\"http://www.binaryconvert.com/convert_double.html\" target=\"_blank\" rel=\"noopener\">二进制转换工具</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"layout":"微信小程序-fix canvas原生组件最顶层","title":"微信小程序-fix canvas原生组件最顶层","date":"2020-04-05T04:04:24.000Z","description":["大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题\n- 就像这样\n\t- ![canvas顶层问题截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxYmQ5OTM2M2VkYjU1NTRmYjc5MzBlZDllMTA0ZjEwMTc2MDM0LnBuZw?x-oss-process=image/format,png)\n\t- 柱状图是用canvas画的，它置于了我的tooltip之上。【这看起来真是一个可怕的问题\n  <!-- more -->\n---\n\n## 解决问题\n- 微信官方提供了[cover-view](https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html)原生组件，覆盖在原生组件之上的文本视图\n- 微信官方提供了将canvas转化为图片的方式--[wx.canvasToTempFilePath](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html)，这样就可以”降级“\n\n\n### 方法一：cover-view\n- 将tooltip用cover-view改写，效果如下\n\t- ![cover-view version0.1 截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2Y0MTZjZjhlMjNiZWEwMjNjYTM1M2JhOGExMDM1MDM2MzYyOTIucG5n?x-oss-process=image/format,png)\n\t- 看上去，是解决了我们的问题，且tooltip后的灰色背景不能滑动了，【妈耶，好棒！\n\t- 但是，这产生了一个：**当文本超出tooltip宽度时，scroll-y: auto，失效了，溢出部分被直接截取**\n\t- 罪魁祸首就是它\n\t\t- ![cover内置样式](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2M5ZDljYjZiZTQ0ZGY3YmJmNmRlMjAxNDM1ZmYzOTJjNDMxNDMucG5n?x-oss-process=image/format,png)\n\t- 那我们可以：\n\t\t- 在tooltip分段内容中加上\n\t\t\t```css\n\t\t\t.modal-layer-content-rule {\n\t\t\t    white-space: pre-wrap;\n\t\t\t}\n\t\t\t```\n\t\t- 在内容wrapper中加上\n\t\t\t```css\n\t\t\t.modal-layer-content {\n\t\t\t    overflow: scroll;\n\t\t\t}\n\t\t\t```\n\t- 完美解决\n\t\t- ![cover-view解决图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2FhZjRkMDAyODdjZGI4M2Y0NWRhMGVkOTg3Mzc5MGNhNDQxMjkucG5n?x-oss-process=image/format,png)\n### 方法二：wx.canvasToTempFilePath\n- 首先我们要做的就是将网络图片绘制进canvas，官方关于canvas类型有两种\n![两种canvas类型](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2E4ZjJmNjA5OGYxNmQ4MzY3NWJiN2I3OWY0ZDM1NWM1MTAwMDg3LnBuZw?x-oss-process=image/format,png)\n- 新canvas 2D接口尝试\n\t```javascript\n\tconst query = wx.createSelectorQuery().in(this)\n    query.select('#myCanvas')\n      .fields({ node: true, size: true })\n      .exec((res) => {\n        const canvas = res[0].node\n        const ctx = canvas.getContext('2d')\n        const img = canvas.createImage()\n        img.onload = () => {\n          ctx.drawImage(img, 0, 0, 100, 100)\n        }\n        img.src = 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'\n        // 这种方式获取canvas区域隐含的像素数据\n        console.log(ctx.getImageData(0, 0, 150, 100).data)\n      })\n\t```\n\t```html\n\t<canvas type=\"2d\" id=\"myCanvas\" canvas-id=\"myCanvas\"></canvas>\n\t```\n- 运行截图![canvas2d 运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzE5ZWE3ZGYxYjg2ODUzOWFhNzVhY2E0OTAxYzI2MzU2OTk4NDYucG5n?x-oss-process=image/format,png)\n- 第二种旧canvas\n\t```javascript\n\tconst ctx = wx.createCanvasContext('myCanvas')\n    wx.getImageInfo({\n        src: 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg',\n        success: function (res) {\n          console.log('res', res)\n          const poster = res.path                                  \n          ctx.drawImage(poster, 0, 0, 150, 100)\n          ctx.draw()\n        }\n      })\n      // 这种方式获取canvas区域隐含的像素数据\n      wx.canvasGetImageData({\n        canvasId: 'myCanvas',\n        x: 0,\n        y: 0,\n        width: 150,\n        height: 100,\n        success(res) {\n          console.log(res.width) // 150\n          console.log(res.height) // 100\n          console.log(res.data instanceof Uint8ClampedArray) // true\n          console.log(res.data) // 150 * 100 * 4\n          console.log(res.data.length) // 150 * 100 * 4\n        }\n      })\n\t```\n\t```html\n\t<canvas id=\"myCanvas\" canvas-id=\"myCanvas\"></canvas>\n\t```\n- 运行截图![旧canvas](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzU4NTg5MzQ4MDc3Njk3OTA0OTRmZmIzOWRiNDdjMWRmNjk4ODQucG5n?x-oss-process=image/format,png)\n- 虽然两种方法，都能实现将网络图片绘制进canvas，但新版的进行了createImage，将其打印的话，其实就是新建了一个img标签，并将img标签的东西绘制进canvas\n\t- ![img console](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzFjMjE1NzMzZTRkY2UzNGZiNzI4NDFhZWEyMDc0ZWIwMjQ1OTQucG5n?x-oss-process=image/format,png)\n\t- 为什么微信官方会仅支持以下方式进行新版canvas2d 图片的绘制，考虑是什么？\n\t- ![经典报错](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JhYWQ1OWRhNDI4M2FjZmViZTY1NGQ0ZWZiNTAxZDZlMjAxMjE2LnBuZw?x-oss-process=image/format,png)\n- 现在我们要将canvas的内容导成图片，同样分成新旧两版\n- 主要思路都是：在wxml中，如果canvas绘制图片没有完成，则显示canvas内容，绘制完成后，就利用canvasToTempFilePath，将图层内容生成指定大小图片，显示image\n\t- canvas2d \n\t\t```javascript\n\t\tconst that = this\n\t    const query = wx.createSelectorQuery().in(this)\n\t    query.select('#myCanvas')\n\t      .fields({ node: true, size: true })\n\t      .exec((res) => {\n\t        const canvas = res[0].node\n\t        const ctx = canvas.getContext('2d')\n\t        const img = canvas.createImage()\n\t        console.log('img', img)\n\t        img.onload = () => {\n\t          ctx.drawImage(img, 0, 0, 100, 100)\n\t            wx.canvasToTempFilePath({\n\t              x: 0,\n\t              y: 0,\n\t              width: 100,\n\t              height: 100,\n\t              destWidth: 100,\n\t              destHeight: 100,\n\t              canvas: canvas,\n\t              success(res) {\n\t                that.setData({\n\t                  imgPath: res.tempFilePath\n\t                })\n\t              },\n\t              fail(err) {\n\t                console.log('err', err)\n\t              }\n\t            })\n\t        }\n\t        img.src = 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'\n\t        // 这种方式获取canvas区域隐含的像素数据\n\t        console.log(ctx.getImageData(0, 0, 100, 100).data)\n\t      })\n\t\t```\n\t\t```html\n\t\t<canvas wx:if=\"{{!imgPath}}\" type=\"2d\" id=\"myCanvas\" canvas-id=\"myCanvas\" style=\"width: 330px;height: 340px;\"></canvas>\n\t\t<image wx:else src=\"{{imgPath}}\" style=\"width: 330px;height: 340px;\" />\n\t\t```\n\t\t- canvas2d 需要踩得坑是：它的官方文档🙃\n\t\t\t- ![canvas2d 转图片误导](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UwM2Q1ZDg0YzYyNmI0NzlmZjBjOTlmNzA1YmRhYjg5NDc5MjcucG5n?x-oss-process=image/format,png)\n\t\t\t- 尝试下来，会\n\t\t\t\t- ![ctx.draw报错](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxMjRiY2Q3ZmNjYWI5ODBlNDdkMTk2YTMyZGQyODI4NDUzODcucG5n?x-oss-process=image/format,png)\n\t\t\t- 那我们可以继续往下看\n\t\t\t\t- ![canvas2d tempath正确实力](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxODk5NWFiNDY4N2IwYmZlYzhjZTZkZWU2ZWQxYmZjMTA1MTY1LnBuZw?x-oss-process=image/format,png)这才是符合我们需要\n\t\t- 运行截图\n\t\t\t- ![canvas2d运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JmMzVlMzY4YzRjMmRhYTgxNTA0NzM0YTIxZGMxM2I2NDYwNzIucG5n?x-oss-process=image/format,png)\n\t- 旧版canvas\n\t\t```javascript\n\t    const ctx = wx.createCanvasContext('myCanvas')\n\t    const that = this\n\t    wx.getImageInfo({\n\t      src: 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg',\n\t      success: function (res) {\n\t        console.log('res', res)\n\t        const poster = res.path\n\t        ctx.drawImage(poster, 0, 0, 150, 100)\n\t        ctx.draw(false, () => {\n\t          wx.canvasToTempFilePath({\n\t            x: 0,\n\t            y: 0,\n\t            width: 100,\n\t            height: 100,\n\t            destWidth: 100,\n\t            destHeight: 100,\n\t            canvasId: \"myCanvas\",\n\t            success(res) {\n\t              that.setData({\n\t                imgPath: res.tempFilePath\n\t              })\n\t              console.log(res.tempFilePath)\n\t            },\n\t            fail(err) {\n\t              console.log('err', err)\n\t            }\n\t          })\n\t        })\n\t        // 这种方式获取canvas区域隐含的像素数据\n\t        wx.canvasGetImageData({\n\t          canvasId: 'myCanvas',\n\t          x: 0,\n\t          y: 0,\n\t          width: 150,\n\t          height: 100,\n\t          success(res) {\n\t            console.log(res.width) // 150\n\t            console.log(res.height) // 100\n\t            console.log(res.data instanceof Uint8ClampedArray) // true\n\t            console.log(res.data) // 150 * 100 * 4\n\t            console.log(res.data.length) // 150 * 100 * 4\n\t          }\n\t        })\n\t      }\n\t    })\n\t\t```\n\t\t```html\n\t\t<canvas wx:if=\"{{!imgPath}}\" id=\"myCanvas\" canvas-id=\"myCanvas\" style=\"width: 330px;height: 340px;\"></canvas>\n\t\t<image wx:else src=\"{{imgPath}}\" style=\"width: 330px;height: 340px;\" />\n\t\t```\n\t\t- 运行截图\n\t\t\t- ![旧版canvas运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2EzZTRiYTBkYzc2NDgzYTM1NTYxZDcwNDUzNzZkNjZmNDU5MTgucG5n?x-oss-process=image/format,png)\n## 写在后面\n- 感谢[Skady宝贝](https://github.com/skadieyes)在探讨问题中给予的帮助，欢迎大家去github找她玩👈\n- 祝大家多多发财\n----\n\t\t\n","source":"_posts/微信小程序-fix canvas原生组件最顶层.md","raw":"---\nlayout: 微信小程序-fix canvas原生组件最顶层\ntitle: 微信小程序-fix canvas原生组件最顶层\ndate: 2020-04-05 12:04:24\ntags: \n- 微信小程序\ncategories:\n- 微信小程序\ndescription:\n  - 大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题\n- 就像这样\n\t- ![canvas顶层问题截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxYmQ5OTM2M2VkYjU1NTRmYjc5MzBlZDllMTA0ZjEwMTc2MDM0LnBuZw?x-oss-process=image/format,png)\n\t- 柱状图是用canvas画的，它置于了我的tooltip之上。【这看起来真是一个可怕的问题\n  <!-- more -->\n---\n\n## 解决问题\n- 微信官方提供了[cover-view](https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html)原生组件，覆盖在原生组件之上的文本视图\n- 微信官方提供了将canvas转化为图片的方式--[wx.canvasToTempFilePath](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html)，这样就可以”降级“\n\n\n### 方法一：cover-view\n- 将tooltip用cover-view改写，效果如下\n\t- ![cover-view version0.1 截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2Y0MTZjZjhlMjNiZWEwMjNjYTM1M2JhOGExMDM1MDM2MzYyOTIucG5n?x-oss-process=image/format,png)\n\t- 看上去，是解决了我们的问题，且tooltip后的灰色背景不能滑动了，【妈耶，好棒！\n\t- 但是，这产生了一个：**当文本超出tooltip宽度时，scroll-y: auto，失效了，溢出部分被直接截取**\n\t- 罪魁祸首就是它\n\t\t- ![cover内置样式](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2M5ZDljYjZiZTQ0ZGY3YmJmNmRlMjAxNDM1ZmYzOTJjNDMxNDMucG5n?x-oss-process=image/format,png)\n\t- 那我们可以：\n\t\t- 在tooltip分段内容中加上\n\t\t\t```css\n\t\t\t.modal-layer-content-rule {\n\t\t\t    white-space: pre-wrap;\n\t\t\t}\n\t\t\t```\n\t\t- 在内容wrapper中加上\n\t\t\t```css\n\t\t\t.modal-layer-content {\n\t\t\t    overflow: scroll;\n\t\t\t}\n\t\t\t```\n\t- 完美解决\n\t\t- ![cover-view解决图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2FhZjRkMDAyODdjZGI4M2Y0NWRhMGVkOTg3Mzc5MGNhNDQxMjkucG5n?x-oss-process=image/format,png)\n### 方法二：wx.canvasToTempFilePath\n- 首先我们要做的就是将网络图片绘制进canvas，官方关于canvas类型有两种\n![两种canvas类型](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2E4ZjJmNjA5OGYxNmQ4MzY3NWJiN2I3OWY0ZDM1NWM1MTAwMDg3LnBuZw?x-oss-process=image/format,png)\n- 新canvas 2D接口尝试\n\t```javascript\n\tconst query = wx.createSelectorQuery().in(this)\n    query.select('#myCanvas')\n      .fields({ node: true, size: true })\n      .exec((res) => {\n        const canvas = res[0].node\n        const ctx = canvas.getContext('2d')\n        const img = canvas.createImage()\n        img.onload = () => {\n          ctx.drawImage(img, 0, 0, 100, 100)\n        }\n        img.src = 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'\n        // 这种方式获取canvas区域隐含的像素数据\n        console.log(ctx.getImageData(0, 0, 150, 100).data)\n      })\n\t```\n\t```html\n\t<canvas type=\"2d\" id=\"myCanvas\" canvas-id=\"myCanvas\"></canvas>\n\t```\n- 运行截图![canvas2d 运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzE5ZWE3ZGYxYjg2ODUzOWFhNzVhY2E0OTAxYzI2MzU2OTk4NDYucG5n?x-oss-process=image/format,png)\n- 第二种旧canvas\n\t```javascript\n\tconst ctx = wx.createCanvasContext('myCanvas')\n    wx.getImageInfo({\n        src: 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg',\n        success: function (res) {\n          console.log('res', res)\n          const poster = res.path                                  \n          ctx.drawImage(poster, 0, 0, 150, 100)\n          ctx.draw()\n        }\n      })\n      // 这种方式获取canvas区域隐含的像素数据\n      wx.canvasGetImageData({\n        canvasId: 'myCanvas',\n        x: 0,\n        y: 0,\n        width: 150,\n        height: 100,\n        success(res) {\n          console.log(res.width) // 150\n          console.log(res.height) // 100\n          console.log(res.data instanceof Uint8ClampedArray) // true\n          console.log(res.data) // 150 * 100 * 4\n          console.log(res.data.length) // 150 * 100 * 4\n        }\n      })\n\t```\n\t```html\n\t<canvas id=\"myCanvas\" canvas-id=\"myCanvas\"></canvas>\n\t```\n- 运行截图![旧canvas](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzU4NTg5MzQ4MDc3Njk3OTA0OTRmZmIzOWRiNDdjMWRmNjk4ODQucG5n?x-oss-process=image/format,png)\n- 虽然两种方法，都能实现将网络图片绘制进canvas，但新版的进行了createImage，将其打印的话，其实就是新建了一个img标签，并将img标签的东西绘制进canvas\n\t- ![img console](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzFjMjE1NzMzZTRkY2UzNGZiNzI4NDFhZWEyMDc0ZWIwMjQ1OTQucG5n?x-oss-process=image/format,png)\n\t- 为什么微信官方会仅支持以下方式进行新版canvas2d 图片的绘制，考虑是什么？\n\t- ![经典报错](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JhYWQ1OWRhNDI4M2FjZmViZTY1NGQ0ZWZiNTAxZDZlMjAxMjE2LnBuZw?x-oss-process=image/format,png)\n- 现在我们要将canvas的内容导成图片，同样分成新旧两版\n- 主要思路都是：在wxml中，如果canvas绘制图片没有完成，则显示canvas内容，绘制完成后，就利用canvasToTempFilePath，将图层内容生成指定大小图片，显示image\n\t- canvas2d \n\t\t```javascript\n\t\tconst that = this\n\t    const query = wx.createSelectorQuery().in(this)\n\t    query.select('#myCanvas')\n\t      .fields({ node: true, size: true })\n\t      .exec((res) => {\n\t        const canvas = res[0].node\n\t        const ctx = canvas.getContext('2d')\n\t        const img = canvas.createImage()\n\t        console.log('img', img)\n\t        img.onload = () => {\n\t          ctx.drawImage(img, 0, 0, 100, 100)\n\t            wx.canvasToTempFilePath({\n\t              x: 0,\n\t              y: 0,\n\t              width: 100,\n\t              height: 100,\n\t              destWidth: 100,\n\t              destHeight: 100,\n\t              canvas: canvas,\n\t              success(res) {\n\t                that.setData({\n\t                  imgPath: res.tempFilePath\n\t                })\n\t              },\n\t              fail(err) {\n\t                console.log('err', err)\n\t              }\n\t            })\n\t        }\n\t        img.src = 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'\n\t        // 这种方式获取canvas区域隐含的像素数据\n\t        console.log(ctx.getImageData(0, 0, 100, 100).data)\n\t      })\n\t\t```\n\t\t```html\n\t\t<canvas wx:if=\"{{!imgPath}}\" type=\"2d\" id=\"myCanvas\" canvas-id=\"myCanvas\" style=\"width: 330px;height: 340px;\"></canvas>\n\t\t<image wx:else src=\"{{imgPath}}\" style=\"width: 330px;height: 340px;\" />\n\t\t```\n\t\t- canvas2d 需要踩得坑是：它的官方文档🙃\n\t\t\t- ![canvas2d 转图片误导](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UwM2Q1ZDg0YzYyNmI0NzlmZjBjOTlmNzA1YmRhYjg5NDc5MjcucG5n?x-oss-process=image/format,png)\n\t\t\t- 尝试下来，会\n\t\t\t\t- ![ctx.draw报错](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxMjRiY2Q3ZmNjYWI5ODBlNDdkMTk2YTMyZGQyODI4NDUzODcucG5n?x-oss-process=image/format,png)\n\t\t\t- 那我们可以继续往下看\n\t\t\t\t- ![canvas2d tempath正确实力](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxODk5NWFiNDY4N2IwYmZlYzhjZTZkZWU2ZWQxYmZjMTA1MTY1LnBuZw?x-oss-process=image/format,png)这才是符合我们需要\n\t\t- 运行截图\n\t\t\t- ![canvas2d运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JmMzVlMzY4YzRjMmRhYTgxNTA0NzM0YTIxZGMxM2I2NDYwNzIucG5n?x-oss-process=image/format,png)\n\t- 旧版canvas\n\t\t```javascript\n\t    const ctx = wx.createCanvasContext('myCanvas')\n\t    const that = this\n\t    wx.getImageInfo({\n\t      src: 'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg',\n\t      success: function (res) {\n\t        console.log('res', res)\n\t        const poster = res.path\n\t        ctx.drawImage(poster, 0, 0, 150, 100)\n\t        ctx.draw(false, () => {\n\t          wx.canvasToTempFilePath({\n\t            x: 0,\n\t            y: 0,\n\t            width: 100,\n\t            height: 100,\n\t            destWidth: 100,\n\t            destHeight: 100,\n\t            canvasId: \"myCanvas\",\n\t            success(res) {\n\t              that.setData({\n\t                imgPath: res.tempFilePath\n\t              })\n\t              console.log(res.tempFilePath)\n\t            },\n\t            fail(err) {\n\t              console.log('err', err)\n\t            }\n\t          })\n\t        })\n\t        // 这种方式获取canvas区域隐含的像素数据\n\t        wx.canvasGetImageData({\n\t          canvasId: 'myCanvas',\n\t          x: 0,\n\t          y: 0,\n\t          width: 150,\n\t          height: 100,\n\t          success(res) {\n\t            console.log(res.width) // 150\n\t            console.log(res.height) // 100\n\t            console.log(res.data instanceof Uint8ClampedArray) // true\n\t            console.log(res.data) // 150 * 100 * 4\n\t            console.log(res.data.length) // 150 * 100 * 4\n\t          }\n\t        })\n\t      }\n\t    })\n\t\t```\n\t\t```html\n\t\t<canvas wx:if=\"{{!imgPath}}\" id=\"myCanvas\" canvas-id=\"myCanvas\" style=\"width: 330px;height: 340px;\"></canvas>\n\t\t<image wx:else src=\"{{imgPath}}\" style=\"width: 330px;height: 340px;\" />\n\t\t```\n\t\t- 运行截图\n\t\t\t- ![旧版canvas运行截图](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2EzZTRiYTBkYzc2NDgzYTM1NTYxZDcwNDUzNzZkNjZmNDU5MTgucG5n?x-oss-process=image/format,png)\n## 写在后面\n- 感谢[Skady宝贝](https://github.com/skadieyes)在探讨问题中给予的帮助，欢迎大家去github找她玩👈\n- 祝大家多多发财\n----\n\t\t\n","slug":"微信小程序-fix canvas原生组件最顶层","published":1,"updated":"2020-04-26T11:01:43.767Z","comments":1,"photos":[],"link":"","_id":"ckaw7l1x5002l1wp3cxgggjq0","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题</li>\n<li>就像这样<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxYmQ5OTM2M2VkYjU1NTRmYjc5MzBlZDllMTA0ZjEwMTc2MDM0LnBuZw?x-oss-process=image/format,png\" alt=\"canvas顶层问题截图\"></li>\n<li>柱状图是用canvas画的，它置于了我的tooltip之上。【这看起来真是一个可怕的问题<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><ul>\n<li>微信官方提供了<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html\" target=\"_blank\" rel=\"noopener\">cover-view</a>原生组件，覆盖在原生组件之上的文本视图</li>\n<li>微信官方提供了将canvas转化为图片的方式–<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html\" target=\"_blank\" rel=\"noopener\">wx.canvasToTempFilePath</a>，这样就可以”降级“</li>\n</ul>\n<h3 id=\"方法一：cover-view\"><a href=\"#方法一：cover-view\" class=\"headerlink\" title=\"方法一：cover-view\"></a>方法一：cover-view</h3><ul>\n<li>将tooltip用cover-view改写，效果如下<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2Y0MTZjZjhlMjNiZWEwMjNjYTM1M2JhOGExMDM1MDM2MzYyOTIucG5n?x-oss-process=image/format,png\" alt=\"cover-view version0.1 截图\"></li>\n<li>看上去，是解决了我们的问题，且tooltip后的灰色背景不能滑动了，【妈耶，好棒！</li>\n<li>但是，这产生了一个：<strong>当文本超出tooltip宽度时，scroll-y: auto，失效了，溢出部分被直接截取</strong></li>\n<li>罪魁祸首就是它<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2M5ZDljYjZiZTQ0ZGY3YmJmNmRlMjAxNDM1ZmYzOTJjNDMxNDMucG5n?x-oss-process=image/format,png\" alt=\"cover内置样式\"></li>\n</ul>\n</li>\n<li>那我们可以：<ul>\n<li>在tooltip分段内容中加上  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-layer-content-rule</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在内容wrapper中加上  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-layer-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>完美解决<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2FhZjRkMDAyODdjZGI4M2Y0NWRhMGVkOTg3Mzc5MGNhNDQxMjkucG5n?x-oss-process=image/format,png\" alt=\"cover-view解决图\"><h3 id=\"方法二：wx-canvasToTempFilePath\"><a href=\"#方法二：wx-canvasToTempFilePath\" class=\"headerlink\" title=\"方法二：wx.canvasToTempFilePath\"></a>方法二：wx.canvasToTempFilePath</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>首先我们要做的就是将网络图片绘制进canvas，官方关于canvas类型有两种<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2E4ZjJmNjA5OGYxNmQ4MzY3NWJiN2I3OWY0ZDM1NWM1MTAwMDg3LnBuZw?x-oss-process=image/format,png\" alt=\"两种canvas类型\"></li>\n<li>新canvas 2D接口尝试  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> query = wx.createSelectorQuery().in(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">   query.select(<span class=\"string\">'#myCanvas'</span>)</span><br><span class=\"line\">     .fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">     .exec(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node</span><br><span class=\"line\">       <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">const</span> img = canvas.createImage()</span><br><span class=\"line\">       img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       img.src = <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span></span><br><span class=\"line\">       <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>).data)</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2d\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>运行截图<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzE5ZWE3ZGYxYjg2ODUzOWFhNzVhY2E0OTAxYzI2MzU2OTk4NDYucG5n?x-oss-process=image/format,png\" alt=\"canvas2d 运行截图\"></li>\n<li>第二种旧canvas  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\">   wx.getImageInfo(&#123;</span><br><span class=\"line\">       src: <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span>,</span><br><span class=\"line\">       success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res)</span><br><span class=\"line\">         <span class=\"keyword\">const</span> poster = res.path                                  </span><br><span class=\"line\">         ctx.drawImage(poster, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">         ctx.draw()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">     wx.canvasGetImageData(&#123;</span><br><span class=\"line\">       canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">       x: <span class=\"number\">0</span>,</span><br><span class=\"line\">       y: <span class=\"number\">0</span>,</span><br><span class=\"line\">       width: <span class=\"number\">150</span>,</span><br><span class=\"line\">       height: <span class=\"number\">100</span>,</span><br><span class=\"line\">       success(res) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.width) <span class=\"comment\">// 150</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.height) <span class=\"comment\">// 100</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Uint8ClampedArray</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data.length) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>运行截图<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzU4NTg5MzQ4MDc3Njk3OTA0OTRmZmIzOWRiNDdjMWRmNjk4ODQucG5n?x-oss-process=image/format,png\" alt=\"旧canvas\"></li>\n<li>虽然两种方法，都能实现将网络图片绘制进canvas，但新版的进行了createImage，将其打印的话，其实就是新建了一个img标签，并将img标签的东西绘制进canvas<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzFjMjE1NzMzZTRkY2UzNGZiNzI4NDFhZWEyMDc0ZWIwMjQ1OTQucG5n?x-oss-process=image/format,png\" alt=\"img console\"></li>\n<li>为什么微信官方会仅支持以下方式进行新版canvas2d 图片的绘制，考虑是什么？</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JhYWQ1OWRhNDI4M2FjZmViZTY1NGQ0ZWZiNTAxZDZlMjAxMjE2LnBuZw?x-oss-process=image/format,png\" alt=\"经典报错\"></li>\n</ul>\n</li>\n<li>现在我们要将canvas的内容导成图片，同样分成新旧两版</li>\n<li>主要思路都是：在wxml中，如果canvas绘制图片没有完成，则显示canvas内容，绘制完成后，就利用canvasToTempFilePath，将图层内容生成指定大小图片，显示image<ul>\n<li>canvas2d   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> query = wx.createSelectorQuery().in(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">   query.select(<span class=\"string\">'#myCanvas'</span>)</span><br><span class=\"line\">     .fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">     .exec(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node</span><br><span class=\"line\">       <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">const</span> img = canvas.createImage()</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'img'</span>, img)</span><br><span class=\"line\">       img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">           wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">             x: <span class=\"number\">0</span>,</span><br><span class=\"line\">             y: <span class=\"number\">0</span>,</span><br><span class=\"line\">             width: <span class=\"number\">100</span>,</span><br><span class=\"line\">             height: <span class=\"number\">100</span>,</span><br><span class=\"line\">             destWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">             destHeight: <span class=\"number\">100</span>,</span><br><span class=\"line\">             canvas: canvas,</span><br><span class=\"line\">             success(res) &#123;</span><br><span class=\"line\">               that.setData(&#123;</span><br><span class=\"line\">                 imgPath: res.tempFilePath</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             fail(err) &#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, err)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       img.src = <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span></span><br><span class=\"line\">       <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>).data)</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;!imgPath&#125;&#125;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2d\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">wx:else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;imgPath&#125;&#125;\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>canvas2d 需要踩得坑是：它的官方文档🙃<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UwM2Q1ZDg0YzYyNmI0NzlmZjBjOTlmNzA1YmRhYjg5NDc5MjcucG5n?x-oss-process=image/format,png\" alt=\"canvas2d 转图片误导\"></li>\n<li>尝试下来，会<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxMjRiY2Q3ZmNjYWI5ODBlNDdkMTk2YTMyZGQyODI4NDUzODcucG5n?x-oss-process=image/format,png\" alt=\"ctx.draw报错\"></li>\n</ul>\n</li>\n<li>那我们可以继续往下看<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxODk5NWFiNDY4N2IwYmZlYzhjZTZkZWU2ZWQxYmZjMTA1MTY1LnBuZw?x-oss-process=image/format,png\" alt=\"canvas2d tempath正确实力\">这才是符合我们需要</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JmMzVlMzY4YzRjMmRhYTgxNTA0NzM0YTIxZGMxM2I2NDYwNzIucG5n?x-oss-process=image/format,png\" alt=\"canvas2d运行截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>旧版canvas  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">wx.getImageInfo(&#123;</span><br><span class=\"line\">  src: <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> poster = res.path</span><br><span class=\"line\">    ctx.drawImage(poster, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    ctx.draw(<span class=\"literal\">false</span>, () =&gt; &#123;</span><br><span class=\"line\">      wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">        x: <span class=\"number\">0</span>,</span><br><span class=\"line\">        y: <span class=\"number\">0</span>,</span><br><span class=\"line\">        width: <span class=\"number\">100</span>,</span><br><span class=\"line\">        height: <span class=\"number\">100</span>,</span><br><span class=\"line\">        destWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">        destHeight: <span class=\"number\">100</span>,</span><br><span class=\"line\">        canvasId: <span class=\"string\">\"myCanvas\"</span>,</span><br><span class=\"line\">        success(res) &#123;</span><br><span class=\"line\">          that.setData(&#123;</span><br><span class=\"line\">            imgPath: res.tempFilePath</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.tempFilePath)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail(err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">    wx.canvasGetImageData(&#123;</span><br><span class=\"line\">      canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">      x: <span class=\"number\">0</span>,</span><br><span class=\"line\">      y: <span class=\"number\">0</span>,</span><br><span class=\"line\">      width: <span class=\"number\">150</span>,</span><br><span class=\"line\">      height: <span class=\"number\">100</span>,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.width) <span class=\"comment\">// 150</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.height) <span class=\"comment\">// 100</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Uint8ClampedArray</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data.length) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;!imgPath&#125;&#125;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">wx:else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;imgPath&#125;&#125;\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2EzZTRiYTBkYzc2NDgzYTM1NTYxZDcwNDUzNzZkNjZmNDU5MTgucG5n?x-oss-process=image/format,png\" alt=\"旧版canvas运行截图\"><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>感谢<a href=\"https://github.com/skadieyes\" target=\"_blank\" rel=\"noopener\">Skady宝贝</a>在探讨问题中给予的帮助，欢迎大家去github找她玩👈</li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>大家应该都知道过，在微信小程序中，canvas等原生组件的层级是最高的，页面中无论你设置多大的z-index都无法覆盖在其之上，这就可能会产生一些问题</li>\n<li>就像这样<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxYmQ5OTM2M2VkYjU1NTRmYjc5MzBlZDllMTA0ZjEwMTc2MDM0LnBuZw?x-oss-process=image/format,png\" alt=\"canvas顶层问题截图\"></li>\n<li>柱状图是用canvas画的，它置于了我的tooltip之上。【这看起来真是一个可怕的问题","more":"</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><ul>\n<li>微信官方提供了<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/cover-view.html\" target=\"_blank\" rel=\"noopener\">cover-view</a>原生组件，覆盖在原生组件之上的文本视图</li>\n<li>微信官方提供了将canvas转化为图片的方式–<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html\" target=\"_blank\" rel=\"noopener\">wx.canvasToTempFilePath</a>，这样就可以”降级“</li>\n</ul>\n<h3 id=\"方法一：cover-view\"><a href=\"#方法一：cover-view\" class=\"headerlink\" title=\"方法一：cover-view\"></a>方法一：cover-view</h3><ul>\n<li>将tooltip用cover-view改写，效果如下<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2Y0MTZjZjhlMjNiZWEwMjNjYTM1M2JhOGExMDM1MDM2MzYyOTIucG5n?x-oss-process=image/format,png\" alt=\"cover-view version0.1 截图\"></li>\n<li>看上去，是解决了我们的问题，且tooltip后的灰色背景不能滑动了，【妈耶，好棒！</li>\n<li>但是，这产生了一个：<strong>当文本超出tooltip宽度时，scroll-y: auto，失效了，溢出部分被直接截取</strong></li>\n<li>罪魁祸首就是它<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2M5ZDljYjZiZTQ0ZGY3YmJmNmRlMjAxNDM1ZmYzOTJjNDMxNDMucG5n?x-oss-process=image/format,png\" alt=\"cover内置样式\"></li>\n</ul>\n</li>\n<li>那我们可以：<ul>\n<li>在tooltip分段内容中加上  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-layer-content-rule</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在内容wrapper中加上  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-layer-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>完美解决<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2FhZjRkMDAyODdjZGI4M2Y0NWRhMGVkOTg3Mzc5MGNhNDQxMjkucG5n?x-oss-process=image/format,png\" alt=\"cover-view解决图\"><h3 id=\"方法二：wx-canvasToTempFilePath\"><a href=\"#方法二：wx-canvasToTempFilePath\" class=\"headerlink\" title=\"方法二：wx.canvasToTempFilePath\"></a>方法二：wx.canvasToTempFilePath</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>首先我们要做的就是将网络图片绘制进canvas，官方关于canvas类型有两种<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2E4ZjJmNjA5OGYxNmQ4MzY3NWJiN2I3OWY0ZDM1NWM1MTAwMDg3LnBuZw?x-oss-process=image/format,png\" alt=\"两种canvas类型\"></li>\n<li>新canvas 2D接口尝试  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> query = wx.createSelectorQuery().in(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">   query.select(<span class=\"string\">'#myCanvas'</span>)</span><br><span class=\"line\">     .fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">     .exec(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node</span><br><span class=\"line\">       <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">const</span> img = canvas.createImage()</span><br><span class=\"line\">       img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       img.src = <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span></span><br><span class=\"line\">       <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>).data)</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2d\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>运行截图<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzE5ZWE3ZGYxYjg2ODUzOWFhNzVhY2E0OTAxYzI2MzU2OTk4NDYucG5n?x-oss-process=image/format,png\" alt=\"canvas2d 运行截图\"></li>\n<li>第二种旧canvas  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\">   wx.getImageInfo(&#123;</span><br><span class=\"line\">       src: <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span>,</span><br><span class=\"line\">       success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res)</span><br><span class=\"line\">         <span class=\"keyword\">const</span> poster = res.path                                  </span><br><span class=\"line\">         ctx.drawImage(poster, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">         ctx.draw()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">     wx.canvasGetImageData(&#123;</span><br><span class=\"line\">       canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">       x: <span class=\"number\">0</span>,</span><br><span class=\"line\">       y: <span class=\"number\">0</span>,</span><br><span class=\"line\">       width: <span class=\"number\">150</span>,</span><br><span class=\"line\">       height: <span class=\"number\">100</span>,</span><br><span class=\"line\">       success(res) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.width) <span class=\"comment\">// 150</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.height) <span class=\"comment\">// 100</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Uint8ClampedArray</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(res.data.length) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>运行截图<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzU4NTg5MzQ4MDc3Njk3OTA0OTRmZmIzOWRiNDdjMWRmNjk4ODQucG5n?x-oss-process=image/format,png\" alt=\"旧canvas\"></li>\n<li>虽然两种方法，都能实现将网络图片绘制进canvas，但新版的进行了createImage，将其打印的话，其实就是新建了一个img标签，并将img标签的东西绘制进canvas<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzFjMjE1NzMzZTRkY2UzNGZiNzI4NDFhZWEyMDc0ZWIwMjQ1OTQucG5n?x-oss-process=image/format,png\" alt=\"img console\"></li>\n<li>为什么微信官方会仅支持以下方式进行新版canvas2d 图片的绘制，考虑是什么？</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JhYWQ1OWRhNDI4M2FjZmViZTY1NGQ0ZWZiNTAxZDZlMjAxMjE2LnBuZw?x-oss-process=image/format,png\" alt=\"经典报错\"></li>\n</ul>\n</li>\n<li>现在我们要将canvas的内容导成图片，同样分成新旧两版</li>\n<li>主要思路都是：在wxml中，如果canvas绘制图片没有完成，则显示canvas内容，绘制完成后，就利用canvasToTempFilePath，将图层内容生成指定大小图片，显示image<ul>\n<li>canvas2d   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> query = wx.createSelectorQuery().in(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">   query.select(<span class=\"string\">'#myCanvas'</span>)</span><br><span class=\"line\">     .fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">     .exec(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node</span><br><span class=\"line\">       <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">const</span> img = canvas.createImage()</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'img'</span>, img)</span><br><span class=\"line\">       img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">           wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">             x: <span class=\"number\">0</span>,</span><br><span class=\"line\">             y: <span class=\"number\">0</span>,</span><br><span class=\"line\">             width: <span class=\"number\">100</span>,</span><br><span class=\"line\">             height: <span class=\"number\">100</span>,</span><br><span class=\"line\">             destWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">             destHeight: <span class=\"number\">100</span>,</span><br><span class=\"line\">             canvas: canvas,</span><br><span class=\"line\">             success(res) &#123;</span><br><span class=\"line\">               that.setData(&#123;</span><br><span class=\"line\">                 imgPath: res.tempFilePath</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             fail(err) &#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, err)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       img.src = <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span></span><br><span class=\"line\">       <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>).data)</span><br><span class=\"line\">     &#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;!imgPath&#125;&#125;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2d\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">wx:else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;imgPath&#125;&#125;\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>canvas2d 需要踩得坑是：它的官方文档🙃<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UwM2Q1ZDg0YzYyNmI0NzlmZjBjOTlmNzA1YmRhYjg5NDc5MjcucG5n?x-oss-process=image/format,png\" alt=\"canvas2d 转图片误导\"></li>\n<li>尝试下来，会<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2UxMjRiY2Q3ZmNjYWI5ODBlNDdkMTk2YTMyZGQyODI4NDUzODcucG5n?x-oss-process=image/format,png\" alt=\"ctx.draw报错\"></li>\n</ul>\n</li>\n<li>那我们可以继续往下看<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxODk5NWFiNDY4N2IwYmZlYzhjZTZkZWU2ZWQxYmZjMTA1MTY1LnBuZw?x-oss-process=image/format,png\" alt=\"canvas2d tempath正确实力\">这才是符合我们需要</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AxLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2JmMzVlMzY4YzRjMmRhYTgxNTA0NzM0YTIxZGMxM2I2NDYwNzIucG5n?x-oss-process=image/format,png\" alt=\"canvas2d运行截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>旧版canvas  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = wx.createCanvasContext(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">wx.getImageInfo(&#123;</span><br><span class=\"line\">  src: <span class=\"string\">'https://p0.meituan.net/myvideodistribute/0990cc2062e81ab6cc11fd8690f8755042005.jpg'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> poster = res.path</span><br><span class=\"line\">    ctx.drawImage(poster, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    ctx.draw(<span class=\"literal\">false</span>, () =&gt; &#123;</span><br><span class=\"line\">      wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">        x: <span class=\"number\">0</span>,</span><br><span class=\"line\">        y: <span class=\"number\">0</span>,</span><br><span class=\"line\">        width: <span class=\"number\">100</span>,</span><br><span class=\"line\">        height: <span class=\"number\">100</span>,</span><br><span class=\"line\">        destWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">        destHeight: <span class=\"number\">100</span>,</span><br><span class=\"line\">        canvasId: <span class=\"string\">\"myCanvas\"</span>,</span><br><span class=\"line\">        success(res) &#123;</span><br><span class=\"line\">          that.setData(&#123;</span><br><span class=\"line\">            imgPath: res.tempFilePath</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.tempFilePath)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fail(err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 这种方式获取canvas区域隐含的像素数据</span></span><br><span class=\"line\">    wx.canvasGetImageData(&#123;</span><br><span class=\"line\">      canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">      x: <span class=\"number\">0</span>,</span><br><span class=\"line\">      y: <span class=\"number\">0</span>,</span><br><span class=\"line\">      width: <span class=\"number\">150</span>,</span><br><span class=\"line\">      height: <span class=\"number\">100</span>,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.width) <span class=\"comment\">// 150</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.height) <span class=\"comment\">// 100</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Uint8ClampedArray</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data.length) <span class=\"comment\">// 150 * 100 * 4</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;!imgPath&#125;&#125;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">wx:else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;imgPath&#125;&#125;\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 330px;height: 340px;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2EzZTRiYTBkYzc2NDgzYTM1NTYxZDcwNDUzNzZkNjZmNDU5MTgucG5n?x-oss-process=image/format,png\" alt=\"旧版canvas运行截图\"><h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>感谢<a href=\"https://github.com/skadieyes\" target=\"_blank\" rel=\"noopener\">Skady宝贝</a>在探讨问题中给予的帮助，欢迎大家去github找她玩👈</li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>"},{"title":"微信小程序-获取图片主色调","date":"2020-04-05T04:06:48.000Z","description":["是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆","记录一下，自己碰到的问题以及思考","时间多的话，会考虑将代码发在github，欢迎大家去star😘 - 理一下思路 1. 将网络图片绘制进canvas 2. 通过canvas的getImageData获取图片的像素数据 -  [canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践](https://blog.csdn.net/Elle_Peng/article/details/105030971) 3. 分析目前主要用于获取图片主色调的算法，并实践 4. 得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆\n- 记录一下，自己碰到的问题以及思考\n- [miniprogram-main-color 完整代码 点击一下](https://github.com/Ele-Peng/miniprogram-main-color) 欢迎大家去star😘\n---\n\n## 开发准备\n - 理一下思路\n\t1. 将网络图片绘制进canvas\n\t2. 通过canvas的getImageData获取图片的像素数据\n\t\t-  [canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践](https://blog.csdn.net/Elle_Peng/article/details/105030971)\n\t3. 分析目前主要用于获取图片主色调的算法，并实践\n\t4. 得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15\n<!-- more -->\n- 嗯，祝我成功\n## 颜色空间基础知识背景+减色算法\n- [颜色空间 RGB CMY HSV HSL LAB](http://www.360doc.com/content/17/0417/19/41797635_646363886.shtml)\n- 图片颜色量化算法\n\t- 比较常见的应用就是用于提取图片的主色调用于上色配色,当然也可以用于图像分割\n\t- 主流算法\n\t\t- 两个大方向\n\t\t- **在颜色空间合理地选取采样点来构造颜色表，使得减色后的图像和原图尽可能地接近**\n\t\t\t- 直接量化\n\t\t\t\t- 对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代\n\t\t\t- 统计量化\n\t\t\t\t- 核心：调整直方图使得累积分布曲线呈线性，从而使图像像素点的亮度值尽可能均匀地分布\n\t\t\t\t- 利用原图的直方图来引导采样点的选取，使得每个采样点可以大致覆盖相同数量的像素点\n\t\t\t\t- 对每个颜色通道建立直方图，然后根据这些直方图对各个颜色通道单独采样，在像素值分布多的区域进行密集采样，别的区域稀疏采样，再利用这些采样点来组合成最终的颜色表，原图中的每个像素点用颜色表中最接近的颜色替换掉\n\t\t\t- 颜色空间分割(Median-Cut)\n\t\t\t\t- 核心：在颜色空间建立一棵二叉树，通过不断地细化这棵树来近似得到一个颜色三维直方图，然后再根据这棵树来分配采样点\n\t\t\t\t- 基于图像颜色样本分布的自适应方法，不论图像中颜色样本的分布如何，总是可以生成一个和颜色样本分布匹配良好的颜色表：在颜色样本分布密集的区域内采样点分布也相对密集，其他区域则分配了较少的采样点。且相同数目的颜色样本总是用同样数量的采样点来代表，所以颜色样本分布密集的区域，采样点的数量自然就会多，反之则相应的比较少\n\t\t\t\t- 最重要、应用最广泛的减色算法之一\n\t\t\t- k均值聚类(k-Means clustering)\n\t\t\t\t- 核心：将像素按颜色的相似程度归类\n\t\t- **从一个初始的颜色表出发，通过不断修改颜色表来改善减色效果**\n\t\t\t- 神经网络方法(ANN)\n\t\t\t\t- 颜色表通过神经元来编码，通过缓慢的调节神经元的颜色值以保证整个神经网络逐步收敛于最小误差状态（即通过神经网络产生的图像和原图之间误差最小）\n## 直接量化实践\n- 首先我们可以来看一看getImageData后的数据\n\t- ![getImageData数据](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzljZjVjMjQzMDI0NmE0YjE0YzFlYmMzMjYwZDkwYTgwNTQzMDIucG5n?x-oss-process=image/format,png)\n\t- 可以简单看作是外层循环为rgba的打平了二维数组\n- 如果按满足需求做，只要一个主色调的话，可以把整个getImageData获得的数据，进行各个通道的平均值求值，再拼接，像这样\n\t```javascript\n\tgetUniqueColor(imageData) {\n    let res_r = 0\n    let res_g = 0\n    let res_b = 0\n    let res_a = 0\n    for (let i = 0; i < imageData.length; i += 1) {\n      if (i % 4 === 0) {\n        res_r += imageData[i]\n      } else if (i % 4 === 1) {\n        res_g += imageData[i]\n      } else if (i % 4 === 2) {\n        res_b += imageData[i]\n      } else if (i % 4 === 3) {\n        res_a += imageData[i]\n      } \n    }\n    res_r = Math.round(res_r / (imageData.length / 4))\n    res_g =  Math.round(res_g / (imageData.length / 4))\n    res_b =  Math.round(res_b / (imageData.length / 4))\n    res_a =  Math.round(res_a / (imageData.length / 4))\n    console.log('res_r', res_r)\n    console.log('res_g', res_g)\n    console.log('res_b', res_b)\n    console.log('res_a', res_a)\n  },\n\t```\n\t- 运行截图\n\t\t- ![暴力法求主色调](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzc4NzFiOTVmYzA4NWQ3NGQwNDc4OWY0ZWI5Yzc0YThmNzQ5OTYucG5n?x-oss-process=image/format,png)\n\t\t- 无相关点越多，误差越大👎\n- 我们可以“对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代”\n\t```javascript\n\tconst COLOR_SIZE = 40 // 单位色块的大小（像素个数，默认40）。以单位色块的平均像素值为作为统计单位\n\tconst LEVEL = 32 // 色深，颜色分区参数（0-255），总256，2^8，即8bit，4个通道（rgba），即默认色深4*8bit，32bit\n\t// 分区块，可以拓展性的求主要色板，用来做palette\n    const mapData = that.getLevelData(imageData);\n    const colors = that.getMostColor(mapData);\n    if (!colors) {\n      return\n    } else {\n      const color = that.getAverageColor(colors)\n      console.log('color', color)\n    }\n\t```\n\t- 将getImageData数据分成特定大小的区块，分别算出各个区块的averageColor，再利用map特性，将averageColor作key，count各个averageColor个数\n\t\t```javascript\n\t\t  // 获取每段的颜色数据\n\t\t  // 根据像素数据，按单位色块进行切割\n\t\t  getLevelData(imageData) {\n\t\t    const len = imageData.length;\n\t\t    const mapData = {};\n\t\t    for (let i = 0; i < len; i += COLOR_SIZE * 4) {\n\t\t      const blockColor = this.getBlockColor(imageData, i); // 该区块平均rgba [{r,g,b,a}]数据\n\t\t      // 获取各个区块的平均rgba数据，将各个通道的颜色进行LEVEL色深降级\n\t\t      // 根据r_g_b_a 建立map索引\n\t\t      const key = this.getColorLevel(blockColor);\n\t\t      !mapData[key] && (mapData[key] = []);\n\t\t      mapData[key].push(blockColor);\n\t\t    }\n\t\t    return mapData;\n\t\t  },\n\t\t\n\t\t  // 获取单位块的全部色值\n\t\t  // 并根据全部色值，计算平均色值\n\t\t  // 处理最后边界值，小于COLOR_SIZE\n\t\t  getBlockColor(imageData, start) {\n\t\t    let data = [],\n\t\t      count = COLOR_SIZE,\n\t\t      len = COLOR_SIZE * 4;\n\t\t    imageData.length <= start + len && (count = Math.floor((imageData.length - start - 1) / 4));\n\t\t    for (let i = 0; i < count; i += 4) {\n\t\t      data.push({\n\t\t        r: imageData[start + i + 0],\n\t\t        g: imageData[start + i + 1],\n\t\t        b: imageData[start + i + 2],\n\t\t        a: imageData[start + i + 3]\n\t\t      })\n\t\t    }\n\t\t    return this.getAverageColor(data);\n\t\t  },\n\t\t\n\t\t  // 取出各个通道的平均值，即为改色块的平均色值\n\t\t  getAverageColor(colorArr) {\n\t\t    const len = colorArr.length;\n\t\t    let sr = 0, sg = 0, sb = 0, sa = 0;\n\t\t    colorArr.map(function (item) {\n\t\t      sr += item.r;\n\t\t      sg += item.g;\n\t\t      sb += item.b;\n\t\t      sa += item.a;\n\t\t    });\n\t\t    return {\n\t\t      r: Math.round(sr / len),\n\t\t      g: Math.round(sg / len),\n\t\t      b: Math.round(sb / len),\n\t\t      a: Math.round(sa / len)\n\t\t    }\n\t\t  },\n\t\t\n\t\t  getColorLevel(color) {\n\t\t    return this.getLevel(color.r) + '_' + this.getLevel(color.g) + '_' + this.getLevel(color.b) + '_' + this.getLevel(color.a)\n\t\t  },\n\t\t\n\t\t  // 色深降级\n\t\t  getLevel(value) {\n\t\t    return Math.round(value / LEVEL)\n\t\t  },\n\t\t```\n\t- 把出现次数最多的averageColor区块，作为采样区块，再获取一遍averageColor，即是最终主色调\n\t\t```javascript\n\t\t  // 根据色块颜色，获取\n\t\t  getMostColor(colorData) {\n\t\t    let rst = null, len = 0;\n\t\t    for (let key in colorData) {\n\t\t      console.log('colorData[key].length', colorData[key].length)\n\t\t      console.log('colorData[key].length', colorData[key])\n\t\t      console.log('colorData[key].length', key)\n\t\t      colorData[key].length > len && (\n\t\t        rst = colorData[key],\n\t\t        len = colorData[key].length\n\t\t      )\n\t\t    }\n\t\t    return rst;\n\t\t  },\n\t\t```\n\t- 运行截图\n\t\t- ![区块获取主色调](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2ViYzI3MmNkNzU2NjNhODUxYmM2MWQ0MDE4OWJjZGI3NzQ5NDUucG5n?x-oss-process=image/format,png)\n\t\t- 颜色可信度提高了很多\n## 拓展实践-医学灰色影像\n- 核心：将**三通道转成单通道**即可\n\t```javascript\n\tlet greyImageData = that.greyTheImage(imageData)\n    wx.canvasPutImageData({\n      canvasId: 'myCanvas',\n      x: 150,\n      y: 0,\n      width: 150,\n      height: 100,\n      data: greyImageData,\n      success (res) {\n        console.log('canvasPutImageData it worked!')\n      }\n    })\n\n  greyTheImage(imageData) {\n      // imageData有4个通道rgba\n      for (let i = 0; i < imageData.length; i += 4) {\n        let sum_rgb = 0\n        // 但我们只需要rgb三通道，a-alpha通道无用\n        for (let j = 0; j < 3; j += 1) {\n          sum_rgb = sum_rgb + imageData[i + j]\n        }\n        let grey = Math.round(sum_rgb / 3)\n        imageData[i] = grey\n        imageData[i + 1] = grey\n        imageData[i + 2] = grey\n      }\n      return imageData\n  },\n\t```\n- 运行截图\n![医学灰色影像](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmNWJhNzk2OTJjOWEwOTA2MDNlMzkxMzBlMDRiZTY4MTAwNzcwLnBuZw?x-oss-process=image/format,png)\n\n## 格式化rgba输出\n- 像这样![格式化rgba输出](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxNDVhYzM4YzQ1MjFkNDgzNGNkZGQ5NTNmNjQ1MWQ3NTI0NTkucG5n?x-oss-process=image/format,png)\n\t```javascript\n\t  // 对最终颜色的字符串格式化\n\t  /**\n\t   * result:{\n\t   *   hex:'#ffffff',            十六位值\n\t   *   hexa:'#ffffff00',         十六位值带alpha值\n\t   *   rgb:'rgb(0,0,0)',         RGB值\n\t   *   rgba:'rgba(0,0,0,0)'      RGB值带alpha值\n\t   * }\n\t   */\n\t\n\t  colorStrFormat(color) {\n\t    const rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + (color.a / 255).toFixed(4).replace(/\\.*0+$/, '') + ')';\n\t    const rgb = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n\t    const hex = '#' + this.Num2Hex(color.r) + this.Num2Hex(color.g) + this.Num2Hex(color.b);\n\t    const hexa = hex + this.Num2Hex(color.a);\n\t    return {\n\t      rgba: rgba,\n\t      rgb: rgb,\n\t      hex: hex,\n\t      hexa: hexa\n\t    }\n\t  },\n\t\n\t  Num2Hex(num) {\n\t    const hex = num.toString(16) + '';\n\t    if (hex.length < 2) {\n\t      return '0' + hex;\n\t    } else {\n\t      return hex;\n\t    }\n\t  },\n\t```\n## 参考文献\n- [phg1024 JavaScript图像处理(6) - 减色算法(Color Reduction)](https://blog.csdn.net/u012843346/article/details/16839649)\n- [获取图片主色调的插件](https://github.com/whoiam2007s/ImgMainColor)\n- 其实也可以利用 [CSS新特性去改变背景颜色](https://blog.csdn.net/nanhupatar/article/details/82793637)，比如高斯模糊等来达到业务需求\n## 写在后面\n- 周六听了一天 John Lennon 歌曲【这也是我拖更的原因😶 羡慕他和 Yoko 那段伊甸园般的爱情，他对 Yoko 的痴爱，他和母亲的两次分别感同身受，Beatles在一起做音乐的欢乐，他对 Sean 的宠溺父爱，但他的人生却在一次枪杀后戛然而止，心痛 心痛 🌧\n- 祝大家多多发财\n---\n","source":"_posts/微信小程序-获取图片主色调.md","raw":"---\ntitle: 微信小程序-获取图片主色调\ndate: 2020-04-05 12:06:48\ntags: \n- 微信小程序\ncategories:\n- 微信小程序\ndescription:\n- 是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆\n- 记录一下，自己碰到的问题以及思考\n- 时间多的话，会考虑将代码发在github，欢迎大家去star😘\n  - 理一下思路\n    1. 将网络图片绘制进canvas\n    2. 通过canvas的getImageData获取图片的像素数据\n      -  [canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践](https://blog.csdn.net/Elle_Peng/article/details/105030971)\n    3. 分析目前主要用于获取图片主色调的算法，并实践\n    4. 得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆\n- 记录一下，自己碰到的问题以及思考\n- [miniprogram-main-color 完整代码 点击一下](https://github.com/Ele-Peng/miniprogram-main-color) 欢迎大家去star😘\n---\n\n## 开发准备\n - 理一下思路\n\t1. 将网络图片绘制进canvas\n\t2. 通过canvas的getImageData获取图片的像素数据\n\t\t-  [canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践](https://blog.csdn.net/Elle_Peng/article/details/105030971)\n\t3. 分析目前主要用于获取图片主色调的算法，并实践\n\t4. 得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15\n<!-- more -->\n- 嗯，祝我成功\n## 颜色空间基础知识背景+减色算法\n- [颜色空间 RGB CMY HSV HSL LAB](http://www.360doc.com/content/17/0417/19/41797635_646363886.shtml)\n- 图片颜色量化算法\n\t- 比较常见的应用就是用于提取图片的主色调用于上色配色,当然也可以用于图像分割\n\t- 主流算法\n\t\t- 两个大方向\n\t\t- **在颜色空间合理地选取采样点来构造颜色表，使得减色后的图像和原图尽可能地接近**\n\t\t\t- 直接量化\n\t\t\t\t- 对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代\n\t\t\t- 统计量化\n\t\t\t\t- 核心：调整直方图使得累积分布曲线呈线性，从而使图像像素点的亮度值尽可能均匀地分布\n\t\t\t\t- 利用原图的直方图来引导采样点的选取，使得每个采样点可以大致覆盖相同数量的像素点\n\t\t\t\t- 对每个颜色通道建立直方图，然后根据这些直方图对各个颜色通道单独采样，在像素值分布多的区域进行密集采样，别的区域稀疏采样，再利用这些采样点来组合成最终的颜色表，原图中的每个像素点用颜色表中最接近的颜色替换掉\n\t\t\t- 颜色空间分割(Median-Cut)\n\t\t\t\t- 核心：在颜色空间建立一棵二叉树，通过不断地细化这棵树来近似得到一个颜色三维直方图，然后再根据这棵树来分配采样点\n\t\t\t\t- 基于图像颜色样本分布的自适应方法，不论图像中颜色样本的分布如何，总是可以生成一个和颜色样本分布匹配良好的颜色表：在颜色样本分布密集的区域内采样点分布也相对密集，其他区域则分配了较少的采样点。且相同数目的颜色样本总是用同样数量的采样点来代表，所以颜色样本分布密集的区域，采样点的数量自然就会多，反之则相应的比较少\n\t\t\t\t- 最重要、应用最广泛的减色算法之一\n\t\t\t- k均值聚类(k-Means clustering)\n\t\t\t\t- 核心：将像素按颜色的相似程度归类\n\t\t- **从一个初始的颜色表出发，通过不断修改颜色表来改善减色效果**\n\t\t\t- 神经网络方法(ANN)\n\t\t\t\t- 颜色表通过神经元来编码，通过缓慢的调节神经元的颜色值以保证整个神经网络逐步收敛于最小误差状态（即通过神经网络产生的图像和原图之间误差最小）\n## 直接量化实践\n- 首先我们可以来看一看getImageData后的数据\n\t- ![getImageData数据](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzljZjVjMjQzMDI0NmE0YjE0YzFlYmMzMjYwZDkwYTgwNTQzMDIucG5n?x-oss-process=image/format,png)\n\t- 可以简单看作是外层循环为rgba的打平了二维数组\n- 如果按满足需求做，只要一个主色调的话，可以把整个getImageData获得的数据，进行各个通道的平均值求值，再拼接，像这样\n\t```javascript\n\tgetUniqueColor(imageData) {\n    let res_r = 0\n    let res_g = 0\n    let res_b = 0\n    let res_a = 0\n    for (let i = 0; i < imageData.length; i += 1) {\n      if (i % 4 === 0) {\n        res_r += imageData[i]\n      } else if (i % 4 === 1) {\n        res_g += imageData[i]\n      } else if (i % 4 === 2) {\n        res_b += imageData[i]\n      } else if (i % 4 === 3) {\n        res_a += imageData[i]\n      } \n    }\n    res_r = Math.round(res_r / (imageData.length / 4))\n    res_g =  Math.round(res_g / (imageData.length / 4))\n    res_b =  Math.round(res_b / (imageData.length / 4))\n    res_a =  Math.round(res_a / (imageData.length / 4))\n    console.log('res_r', res_r)\n    console.log('res_g', res_g)\n    console.log('res_b', res_b)\n    console.log('res_a', res_a)\n  },\n\t```\n\t- 运行截图\n\t\t- ![暴力法求主色调](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzc4NzFiOTVmYzA4NWQ3NGQwNDc4OWY0ZWI5Yzc0YThmNzQ5OTYucG5n?x-oss-process=image/format,png)\n\t\t- 无相关点越多，误差越大👎\n- 我们可以“对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代”\n\t```javascript\n\tconst COLOR_SIZE = 40 // 单位色块的大小（像素个数，默认40）。以单位色块的平均像素值为作为统计单位\n\tconst LEVEL = 32 // 色深，颜色分区参数（0-255），总256，2^8，即8bit，4个通道（rgba），即默认色深4*8bit，32bit\n\t// 分区块，可以拓展性的求主要色板，用来做palette\n    const mapData = that.getLevelData(imageData);\n    const colors = that.getMostColor(mapData);\n    if (!colors) {\n      return\n    } else {\n      const color = that.getAverageColor(colors)\n      console.log('color', color)\n    }\n\t```\n\t- 将getImageData数据分成特定大小的区块，分别算出各个区块的averageColor，再利用map特性，将averageColor作key，count各个averageColor个数\n\t\t```javascript\n\t\t  // 获取每段的颜色数据\n\t\t  // 根据像素数据，按单位色块进行切割\n\t\t  getLevelData(imageData) {\n\t\t    const len = imageData.length;\n\t\t    const mapData = {};\n\t\t    for (let i = 0; i < len; i += COLOR_SIZE * 4) {\n\t\t      const blockColor = this.getBlockColor(imageData, i); // 该区块平均rgba [{r,g,b,a}]数据\n\t\t      // 获取各个区块的平均rgba数据，将各个通道的颜色进行LEVEL色深降级\n\t\t      // 根据r_g_b_a 建立map索引\n\t\t      const key = this.getColorLevel(blockColor);\n\t\t      !mapData[key] && (mapData[key] = []);\n\t\t      mapData[key].push(blockColor);\n\t\t    }\n\t\t    return mapData;\n\t\t  },\n\t\t\n\t\t  // 获取单位块的全部色值\n\t\t  // 并根据全部色值，计算平均色值\n\t\t  // 处理最后边界值，小于COLOR_SIZE\n\t\t  getBlockColor(imageData, start) {\n\t\t    let data = [],\n\t\t      count = COLOR_SIZE,\n\t\t      len = COLOR_SIZE * 4;\n\t\t    imageData.length <= start + len && (count = Math.floor((imageData.length - start - 1) / 4));\n\t\t    for (let i = 0; i < count; i += 4) {\n\t\t      data.push({\n\t\t        r: imageData[start + i + 0],\n\t\t        g: imageData[start + i + 1],\n\t\t        b: imageData[start + i + 2],\n\t\t        a: imageData[start + i + 3]\n\t\t      })\n\t\t    }\n\t\t    return this.getAverageColor(data);\n\t\t  },\n\t\t\n\t\t  // 取出各个通道的平均值，即为改色块的平均色值\n\t\t  getAverageColor(colorArr) {\n\t\t    const len = colorArr.length;\n\t\t    let sr = 0, sg = 0, sb = 0, sa = 0;\n\t\t    colorArr.map(function (item) {\n\t\t      sr += item.r;\n\t\t      sg += item.g;\n\t\t      sb += item.b;\n\t\t      sa += item.a;\n\t\t    });\n\t\t    return {\n\t\t      r: Math.round(sr / len),\n\t\t      g: Math.round(sg / len),\n\t\t      b: Math.round(sb / len),\n\t\t      a: Math.round(sa / len)\n\t\t    }\n\t\t  },\n\t\t\n\t\t  getColorLevel(color) {\n\t\t    return this.getLevel(color.r) + '_' + this.getLevel(color.g) + '_' + this.getLevel(color.b) + '_' + this.getLevel(color.a)\n\t\t  },\n\t\t\n\t\t  // 色深降级\n\t\t  getLevel(value) {\n\t\t    return Math.round(value / LEVEL)\n\t\t  },\n\t\t```\n\t- 把出现次数最多的averageColor区块，作为采样区块，再获取一遍averageColor，即是最终主色调\n\t\t```javascript\n\t\t  // 根据色块颜色，获取\n\t\t  getMostColor(colorData) {\n\t\t    let rst = null, len = 0;\n\t\t    for (let key in colorData) {\n\t\t      console.log('colorData[key].length', colorData[key].length)\n\t\t      console.log('colorData[key].length', colorData[key])\n\t\t      console.log('colorData[key].length', key)\n\t\t      colorData[key].length > len && (\n\t\t        rst = colorData[key],\n\t\t        len = colorData[key].length\n\t\t      )\n\t\t    }\n\t\t    return rst;\n\t\t  },\n\t\t```\n\t- 运行截图\n\t\t- ![区块获取主色调](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2ViYzI3MmNkNzU2NjNhODUxYmM2MWQ0MDE4OWJjZGI3NzQ5NDUucG5n?x-oss-process=image/format,png)\n\t\t- 颜色可信度提高了很多\n## 拓展实践-医学灰色影像\n- 核心：将**三通道转成单通道**即可\n\t```javascript\n\tlet greyImageData = that.greyTheImage(imageData)\n    wx.canvasPutImageData({\n      canvasId: 'myCanvas',\n      x: 150,\n      y: 0,\n      width: 150,\n      height: 100,\n      data: greyImageData,\n      success (res) {\n        console.log('canvasPutImageData it worked!')\n      }\n    })\n\n  greyTheImage(imageData) {\n      // imageData有4个通道rgba\n      for (let i = 0; i < imageData.length; i += 4) {\n        let sum_rgb = 0\n        // 但我们只需要rgb三通道，a-alpha通道无用\n        for (let j = 0; j < 3; j += 1) {\n          sum_rgb = sum_rgb + imageData[i + j]\n        }\n        let grey = Math.round(sum_rgb / 3)\n        imageData[i] = grey\n        imageData[i + 1] = grey\n        imageData[i + 2] = grey\n      }\n      return imageData\n  },\n\t```\n- 运行截图\n![医学灰色影像](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmNWJhNzk2OTJjOWEwOTA2MDNlMzkxMzBlMDRiZTY4MTAwNzcwLnBuZw?x-oss-process=image/format,png)\n\n## 格式化rgba输出\n- 像这样![格式化rgba输出](https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxNDVhYzM4YzQ1MjFkNDgzNGNkZGQ5NTNmNjQ1MWQ3NTI0NTkucG5n?x-oss-process=image/format,png)\n\t```javascript\n\t  // 对最终颜色的字符串格式化\n\t  /**\n\t   * result:{\n\t   *   hex:'#ffffff',            十六位值\n\t   *   hexa:'#ffffff00',         十六位值带alpha值\n\t   *   rgb:'rgb(0,0,0)',         RGB值\n\t   *   rgba:'rgba(0,0,0,0)'      RGB值带alpha值\n\t   * }\n\t   */\n\t\n\t  colorStrFormat(color) {\n\t    const rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + (color.a / 255).toFixed(4).replace(/\\.*0+$/, '') + ')';\n\t    const rgb = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n\t    const hex = '#' + this.Num2Hex(color.r) + this.Num2Hex(color.g) + this.Num2Hex(color.b);\n\t    const hexa = hex + this.Num2Hex(color.a);\n\t    return {\n\t      rgba: rgba,\n\t      rgb: rgb,\n\t      hex: hex,\n\t      hexa: hexa\n\t    }\n\t  },\n\t\n\t  Num2Hex(num) {\n\t    const hex = num.toString(16) + '';\n\t    if (hex.length < 2) {\n\t      return '0' + hex;\n\t    } else {\n\t      return hex;\n\t    }\n\t  },\n\t```\n## 参考文献\n- [phg1024 JavaScript图像处理(6) - 减色算法(Color Reduction)](https://blog.csdn.net/u012843346/article/details/16839649)\n- [获取图片主色调的插件](https://github.com/whoiam2007s/ImgMainColor)\n- 其实也可以利用 [CSS新特性去改变背景颜色](https://blog.csdn.net/nanhupatar/article/details/82793637)，比如高斯模糊等来达到业务需求\n## 写在后面\n- 周六听了一天 John Lennon 歌曲【这也是我拖更的原因😶 羡慕他和 Yoko 那段伊甸园般的爱情，他对 Yoko 的痴爱，他和母亲的两次分别感同身受，Beatles在一起做音乐的欢乐，他对 Sean 的宠溺父爱，但他的人生却在一次枪杀后戛然而止，心痛 心痛 🌧\n- 祝大家多多发财\n---\n","slug":"微信小程序-获取图片主色调","published":1,"updated":"2020-05-26T02:30:42.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x6002o1wp3hr10fp00","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆</li>\n<li>记录一下，自己碰到的问题以及思考</li>\n<li><a href=\"https://github.com/Ele-Peng/miniprogram-main-color\" target=\"_blank\" rel=\"noopener\">miniprogram-main-color 完整代码 点击一下</a> 欢迎大家去star😘</li>\n</ul>\n<hr>\n<h2 id=\"开发准备\"><a href=\"#开发准备\" class=\"headerlink\" title=\"开发准备\"></a>开发准备</h2><ul>\n<li>理一下思路<ol>\n<li>将网络图片绘制进canvas</li>\n<li>通过canvas的getImageData获取图片的像素数据<ul>\n<li><a href=\"https://blog.csdn.net/Elle_Peng/article/details/105030971\" target=\"_blank\" rel=\"noopener\">canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践</a></li>\n</ul>\n</li>\n<li>分析目前主要用于获取图片主色调的算法，并实践</li>\n<li>得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15<a id=\"more\"></a>\n<ul>\n<li>嗯，祝我成功<h2 id=\"颜色空间基础知识背景-减色算法\"><a href=\"#颜色空间基础知识背景-减色算法\" class=\"headerlink\" title=\"颜色空间基础知识背景+减色算法\"></a>颜色空间基础知识背景+减色算法</h2></li>\n<li><a href=\"http://www.360doc.com/content/17/0417/19/41797635_646363886.shtml\" target=\"_blank\" rel=\"noopener\">颜色空间 RGB CMY HSV HSL LAB</a></li>\n<li>图片颜色量化算法</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>比较常见的应用就是用于提取图片的主色调用于上色配色,当然也可以用于图像分割</li>\n<li>主流算法<ul>\n<li>两个大方向</li>\n<li><strong>在颜色空间合理地选取采样点来构造颜色表，使得减色后的图像和原图尽可能地接近</strong><ul>\n<li>直接量化<ul>\n<li>对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代</li>\n</ul>\n</li>\n<li>统计量化<ul>\n<li>核心：调整直方图使得累积分布曲线呈线性，从而使图像像素点的亮度值尽可能均匀地分布</li>\n<li>利用原图的直方图来引导采样点的选取，使得每个采样点可以大致覆盖相同数量的像素点</li>\n<li>对每个颜色通道建立直方图，然后根据这些直方图对各个颜色通道单独采样，在像素值分布多的区域进行密集采样，别的区域稀疏采样，再利用这些采样点来组合成最终的颜色表，原图中的每个像素点用颜色表中最接近的颜色替换掉</li>\n</ul>\n</li>\n<li>颜色空间分割(Median-Cut)<ul>\n<li>核心：在颜色空间建立一棵二叉树，通过不断地细化这棵树来近似得到一个颜色三维直方图，然后再根据这棵树来分配采样点</li>\n<li>基于图像颜色样本分布的自适应方法，不论图像中颜色样本的分布如何，总是可以生成一个和颜色样本分布匹配良好的颜色表：在颜色样本分布密集的区域内采样点分布也相对密集，其他区域则分配了较少的采样点。且相同数目的颜色样本总是用同样数量的采样点来代表，所以颜色样本分布密集的区域，采样点的数量自然就会多，反之则相应的比较少</li>\n<li>最重要、应用最广泛的减色算法之一</li>\n</ul>\n</li>\n<li>k均值聚类(k-Means clustering)<ul>\n<li>核心：将像素按颜色的相似程度归类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>从一个初始的颜色表出发，通过不断修改颜色表来改善减色效果</strong><ul>\n<li>神经网络方法(ANN)<ul>\n<li>颜色表通过神经元来编码，通过缓慢的调节神经元的颜色值以保证整个神经网络逐步收敛于最小误差状态（即通过神经网络产生的图像和原图之间误差最小）<h2 id=\"直接量化实践\"><a href=\"#直接量化实践\" class=\"headerlink\" title=\"直接量化实践\"></a>直接量化实践</h2><ul>\n<li>首先我们可以来看一看getImageData后的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzljZjVjMjQzMDI0NmE0YjE0YzFlYmMzMjYwZDkwYTgwNTQzMDIucG5n?x-oss-process=image/format,png\" alt=\"getImageData数据\"></li>\n<li>可以简单看作是外层循环为rgba的打平了二维数组<ul>\n<li>如果按满足需求做，只要一个主色调的话，可以把整个getImageData获得的数据，进行各个通道的平均值求值，再拼接，像这样<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUniqueColor(imageData) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_r = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_g = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_b = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_a = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imageData.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       res_r += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       res_g += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">       res_b += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">       res_a += imageData[i]</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   res_r = <span class=\"built_in\">Math</span>.round(res_r / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_g =  <span class=\"built_in\">Math</span>.round(res_g / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_b =  <span class=\"built_in\">Math</span>.round(res_b / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_a =  <span class=\"built_in\">Math</span>.round(res_a / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_r'</span>, res_r)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_g'</span>, res_g)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_b'</span>, res_b)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_a'</span>, res_a)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzc4NzFiOTVmYzA4NWQ3NGQwNDc4OWY0ZWI5Yzc0YThmNzQ5OTYucG5n?x-oss-process=image/format,png\" alt=\"暴力法求主色调\"></li>\n<li>无相关点越多，误差越大👎<ul>\n<li>我们可以“对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代”<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> COLOR_SIZE = <span class=\"number\">40</span> <span class=\"comment\">// 单位色块的大小（像素个数，默认40）。以单位色块的平均像素值为作为统计单位</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> LEVEL = <span class=\"number\">32</span> <span class=\"comment\">// 色深，颜色分区参数（0-255），总256，2^8，即8bit，4个通道（rgba），即默认色深4*8bit，32bit</span></span><br><span class=\"line\"><span class=\"comment\">// 分区块，可以拓展性的求主要色板，用来做palette</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> mapData = that.getLevelData(imageData);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> colors = that.getMostColor(mapData);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!colors) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> color = that.getAverageColor(colors)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'color'</span>, color)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>将getImageData数据分成特定大小的区块，分别算出各个区块的averageColor，再利用map特性，将averageColor作key，count各个averageColor个数  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取每段的颜色数据</span></span><br><span class=\"line\"><span class=\"comment\">// 根据像素数据，按单位色块进行切割</span></span><br><span class=\"line\">getLevelData(imageData) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = imageData.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mapData = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i += COLOR_SIZE * <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blockColor = <span class=\"keyword\">this</span>.getBlockColor(imageData, i); <span class=\"comment\">// 该区块平均rgba [&#123;r,g,b,a&#125;]数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取各个区块的平均rgba数据，将各个通道的颜色进行LEVEL色深降级</span></span><br><span class=\"line\">    <span class=\"comment\">// 根据r_g_b_a 建立map索引</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"keyword\">this</span>.getColorLevel(blockColor);</span><br><span class=\"line\">    !mapData[key] &amp;&amp; (mapData[key] = []);</span><br><span class=\"line\">    mapData[key].push(blockColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mapData;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 获取单位块的全部色值</span></span><br><span class=\"line\"><span class=\"comment\">// 并根据全部色值，计算平均色值</span></span><br><span class=\"line\"><span class=\"comment\">// 处理最后边界值，小于COLOR_SIZE</span></span><br><span class=\"line\">getBlockColor(imageData, start) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = [],</span><br><span class=\"line\">    count = COLOR_SIZE,</span><br><span class=\"line\">    len = COLOR_SIZE * <span class=\"number\">4</span>;</span><br><span class=\"line\">  imageData.length &lt;= start + len &amp;&amp; (count = <span class=\"built_in\">Math</span>.floor((imageData.length - start - <span class=\"number\">1</span>) / <span class=\"number\">4</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    data.push(&#123;</span><br><span class=\"line\">      r: imageData[start + i + <span class=\"number\">0</span>],</span><br><span class=\"line\">      g: imageData[start + i + <span class=\"number\">1</span>],</span><br><span class=\"line\">      b: imageData[start + i + <span class=\"number\">2</span>],</span><br><span class=\"line\">      a: imageData[start + i + <span class=\"number\">3</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAverageColor(data);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 取出各个通道的平均值，即为改色块的平均色值</span></span><br><span class=\"line\">getAverageColor(colorArr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = colorArr.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sr = <span class=\"number\">0</span>, sg = <span class=\"number\">0</span>, sb = <span class=\"number\">0</span>, sa = <span class=\"number\">0</span>;</span><br><span class=\"line\">  colorArr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    sr += item.r;</span><br><span class=\"line\">    sg += item.g;</span><br><span class=\"line\">    sb += item.b;</span><br><span class=\"line\">    sa += item.a;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    r: <span class=\"built_in\">Math</span>.round(sr / len),</span><br><span class=\"line\">    g: <span class=\"built_in\">Math</span>.round(sg / len),</span><br><span class=\"line\">    b: <span class=\"built_in\">Math</span>.round(sb / len),</span><br><span class=\"line\">    a: <span class=\"built_in\">Math</span>.round(sa / len)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">getColorLevel(color) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getLevel(color.r) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.g) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.b) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.a)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 色深降级</span></span><br><span class=\"line\">getLevel(value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(value / LEVEL)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>把出现次数最多的averageColor区块，作为采样区块，再获取一遍averageColor，即是最终主色调  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据色块颜色，获取</span></span><br><span class=\"line\">getMostColor(colorData) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst = <span class=\"literal\">null</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> colorData) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, colorData[key].length)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, colorData[key])</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, key)</span><br><span class=\"line\">    colorData[key].length &gt; len &amp;&amp; (</span><br><span class=\"line\">      rst = colorData[key],</span><br><span class=\"line\">      len = colorData[key].length</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rst;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2ViYzI3MmNkNzU2NjNhODUxYmM2MWQ0MDE4OWJjZGI3NzQ5NDUucG5n?x-oss-process=image/format,png\" alt=\"区块获取主色调\"></li>\n<li>颜色可信度提高了很多<h2 id=\"拓展实践-医学灰色影像\"><a href=\"#拓展实践-医学灰色影像\" class=\"headerlink\" title=\"拓展实践-医学灰色影像\"></a>拓展实践-医学灰色影像</h2><ul>\n<li>核心：将<strong>三通道转成单通道</strong>即可<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> greyImageData = that.greyTheImage(imageData)</span><br><span class=\"line\">   wx.canvasPutImageData(&#123;</span><br><span class=\"line\">     canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">     x: <span class=\"number\">150</span>,</span><br><span class=\"line\">     y: <span class=\"number\">0</span>,</span><br><span class=\"line\">     width: <span class=\"number\">150</span>,</span><br><span class=\"line\">     height: <span class=\"number\">100</span>,</span><br><span class=\"line\">     data: greyImageData,</span><br><span class=\"line\">     success (res) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'canvasPutImageData it worked!'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> greyTheImage(imageData) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// imageData有4个通道rgba</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imageData.length; i += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> sum_rgb = <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"comment\">// 但我们只需要rgb三通道，a-alpha通道无用</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         sum_rgb = sum_rgb + imageData[i + j]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> grey = <span class=\"built_in\">Math</span>.round(sum_rgb / <span class=\"number\">3</span>)</span><br><span class=\"line\">       imageData[i] = grey</span><br><span class=\"line\">       imageData[i + <span class=\"number\">1</span>] = grey</span><br><span class=\"line\">       imageData[i + <span class=\"number\">2</span>] = grey</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> imageData</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n<li>运行截图<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmNWJhNzk2OTJjOWEwOTA2MDNlMzkxMzBlMDRiZTY4MTAwNzcwLnBuZw?x-oss-process=image/format,png\" alt=\"医学灰色影像\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"格式化rgba输出\"><a href=\"#格式化rgba输出\" class=\"headerlink\" title=\"格式化rgba输出\"></a>格式化rgba输出</h2><ul>\n<li>像这样<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxNDVhYzM4YzQ1MjFkNDgzNGNkZGQ5NTNmNjQ1MWQ3NTI0NTkucG5n?x-oss-process=image/format,png\" alt=\"格式化rgba输出\">  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对最终颜色的字符串格式化</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result:&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   hex:'#ffffff',            十六位值</span></span><br><span class=\"line\"><span class=\"comment\"> *   hexa:'#ffffff00',         十六位值带alpha值</span></span><br><span class=\"line\"><span class=\"comment\"> *   rgb:'rgb(0,0,0)',         RGB值</span></span><br><span class=\"line\"><span class=\"comment\"> *   rgba:'rgba(0,0,0,0)'      RGB值带alpha值</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">colorStrFormat(color) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rgba = <span class=\"string\">'rgba('</span> + color.r + <span class=\"string\">','</span> + color.g + <span class=\"string\">','</span> + color.b + <span class=\"string\">','</span> + (color.a / <span class=\"number\">255</span>).toFixed(<span class=\"number\">4</span>).replace(<span class=\"regexp\">/\\.*0+$/</span>, <span class=\"string\">''</span>) + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rgb = <span class=\"string\">'rgb('</span> + color.r + <span class=\"string\">','</span> + color.g + <span class=\"string\">','</span> + color.b + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hex = <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.Num2Hex(color.r) + <span class=\"keyword\">this</span>.Num2Hex(color.g) + <span class=\"keyword\">this</span>.Num2Hex(color.b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexa = hex + <span class=\"keyword\">this</span>.Num2Hex(color.a);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    rgba: rgba,</span><br><span class=\"line\">    rgb: rgb,</span><br><span class=\"line\">    hex: hex,</span><br><span class=\"line\">    hexa: hexa</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">Num2Hex(num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hex = num.toString(<span class=\"number\">16</span>) + <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hex.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> + hex;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2></li>\n<li><a href=\"https://blog.csdn.net/u012843346/article/details/16839649\" target=\"_blank\" rel=\"noopener\">phg1024 JavaScript图像处理(6) - 减色算法(Color Reduction)</a></li>\n<li><a href=\"https://github.com/whoiam2007s/ImgMainColor\" target=\"_blank\" rel=\"noopener\">获取图片主色调的插件</a></li>\n<li>其实也可以利用 <a href=\"https://blog.csdn.net/nanhupatar/article/details/82793637\" target=\"_blank\" rel=\"noopener\">CSS新特性去改变背景颜色</a>，比如高斯模糊等来达到业务需求<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n<li>周六听了一天 John Lennon 歌曲【这也是我拖更的原因😶 羡慕他和 Yoko 那段伊甸园般的爱情，他对 Yoko 的痴爱，他和母亲的两次分别感同身受，Beatles在一起做音乐的欢乐，他对 Sean 的宠溺父爱，但他的人生却在一次枪杀后戛然而止，心痛 心痛 🌧</li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>是的我要开始做：根据图片的主色调来改变一下页面背景颜色了🙆</li>\n<li>记录一下，自己碰到的问题以及思考</li>\n<li><a href=\"https://github.com/Ele-Peng/miniprogram-main-color\" target=\"_blank\" rel=\"noopener\">miniprogram-main-color 完整代码 点击一下</a> 欢迎大家去star😘</li>\n</ul>\n<hr>\n<h2 id=\"开发准备\"><a href=\"#开发准备\" class=\"headerlink\" title=\"开发准备\"></a>开发准备</h2><ul>\n<li>理一下思路<ol>\n<li>将网络图片绘制进canvas</li>\n<li>通过canvas的getImageData获取图片的像素数据<ul>\n<li><a href=\"https://blog.csdn.net/Elle_Peng/article/details/105030971\" target=\"_blank\" rel=\"noopener\">canvas 2d 与旧版 canvas 将网络图片绘制进canvas的两种方法实践</a></li>\n</ul>\n</li>\n<li>分析目前主要用于获取图片主色调的算法，并实践</li>\n<li>得到主要色调，再将rgb转换成hsb，并对b值，进行修改，制作渐变，左侧35，右侧15","more":"<ul>\n<li>嗯，祝我成功<h2 id=\"颜色空间基础知识背景-减色算法\"><a href=\"#颜色空间基础知识背景-减色算法\" class=\"headerlink\" title=\"颜色空间基础知识背景+减色算法\"></a>颜色空间基础知识背景+减色算法</h2></li>\n<li><a href=\"http://www.360doc.com/content/17/0417/19/41797635_646363886.shtml\" target=\"_blank\" rel=\"noopener\">颜色空间 RGB CMY HSV HSL LAB</a></li>\n<li>图片颜色量化算法</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>比较常见的应用就是用于提取图片的主色调用于上色配色,当然也可以用于图像分割</li>\n<li>主流算法<ul>\n<li>两个大方向</li>\n<li><strong>在颜色空间合理地选取采样点来构造颜色表，使得减色后的图像和原图尽可能地接近</strong><ul>\n<li>直接量化<ul>\n<li>对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代</li>\n</ul>\n</li>\n<li>统计量化<ul>\n<li>核心：调整直方图使得累积分布曲线呈线性，从而使图像像素点的亮度值尽可能均匀地分布</li>\n<li>利用原图的直方图来引导采样点的选取，使得每个采样点可以大致覆盖相同数量的像素点</li>\n<li>对每个颜色通道建立直方图，然后根据这些直方图对各个颜色通道单独采样，在像素值分布多的区域进行密集采样，别的区域稀疏采样，再利用这些采样点来组合成最终的颜色表，原图中的每个像素点用颜色表中最接近的颜色替换掉</li>\n</ul>\n</li>\n<li>颜色空间分割(Median-Cut)<ul>\n<li>核心：在颜色空间建立一棵二叉树，通过不断地细化这棵树来近似得到一个颜色三维直方图，然后再根据这棵树来分配采样点</li>\n<li>基于图像颜色样本分布的自适应方法，不论图像中颜色样本的分布如何，总是可以生成一个和颜色样本分布匹配良好的颜色表：在颜色样本分布密集的区域内采样点分布也相对密集，其他区域则分配了较少的采样点。且相同数目的颜色样本总是用同样数量的采样点来代表，所以颜色样本分布密集的区域，采样点的数量自然就会多，反之则相应的比较少</li>\n<li>最重要、应用最广泛的减色算法之一</li>\n</ul>\n</li>\n<li>k均值聚类(k-Means clustering)<ul>\n<li>核心：将像素按颜色的相似程度归类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>从一个初始的颜色表出发，通过不断修改颜色表来改善减色效果</strong><ul>\n<li>神经网络方法(ANN)<ul>\n<li>颜色表通过神经元来编码，通过缓慢的调节神经元的颜色值以保证整个神经网络逐步收敛于最小误差状态（即通过神经网络产生的图像和原图之间误差最小）<h2 id=\"直接量化实践\"><a href=\"#直接量化实践\" class=\"headerlink\" title=\"直接量化实践\"></a>直接量化实践</h2><ul>\n<li>首先我们可以来看一看getImageData后的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzljZjVjMjQzMDI0NmE0YjE0YzFlYmMzMjYwZDkwYTgwNTQzMDIucG5n?x-oss-process=image/format,png\" alt=\"getImageData数据\"></li>\n<li>可以简单看作是外层循环为rgba的打平了二维数组<ul>\n<li>如果按满足需求做，只要一个主色调的话，可以把整个getImageData获得的数据，进行各个通道的平均值求值，再拼接，像这样<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUniqueColor(imageData) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_r = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_g = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_b = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> res_a = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imageData.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       res_r += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       res_g += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">       res_b += imageData[i]</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">       res_a += imageData[i]</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   res_r = <span class=\"built_in\">Math</span>.round(res_r / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_g =  <span class=\"built_in\">Math</span>.round(res_g / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_b =  <span class=\"built_in\">Math</span>.round(res_b / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   res_a =  <span class=\"built_in\">Math</span>.round(res_a / (imageData.length / <span class=\"number\">4</span>))</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_r'</span>, res_r)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_g'</span>, res_g)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_b'</span>, res_b)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'res_a'</span>, res_a)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzc4NzFiOTVmYzA4NWQ3NGQwNDc4OWY0ZWI5Yzc0YThmNzQ5OTYucG5n?x-oss-process=image/format,png\" alt=\"暴力法求主色调\"></li>\n<li>无相关点越多，误差越大👎<ul>\n<li>我们可以“对每个颜色通道单独重新采样，将每个通道的色阶从256减少到某个指定的数字。这样得到一个新的小的多的颜色空间，而原图像中的每一个像素将被用在新的颜色空间中的最近邻取代”<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> COLOR_SIZE = <span class=\"number\">40</span> <span class=\"comment\">// 单位色块的大小（像素个数，默认40）。以单位色块的平均像素值为作为统计单位</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> LEVEL = <span class=\"number\">32</span> <span class=\"comment\">// 色深，颜色分区参数（0-255），总256，2^8，即8bit，4个通道（rgba），即默认色深4*8bit，32bit</span></span><br><span class=\"line\"><span class=\"comment\">// 分区块，可以拓展性的求主要色板，用来做palette</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> mapData = that.getLevelData(imageData);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> colors = that.getMostColor(mapData);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!colors) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> color = that.getAverageColor(colors)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'color'</span>, color)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>将getImageData数据分成特定大小的区块，分别算出各个区块的averageColor，再利用map特性，将averageColor作key，count各个averageColor个数  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取每段的颜色数据</span></span><br><span class=\"line\"><span class=\"comment\">// 根据像素数据，按单位色块进行切割</span></span><br><span class=\"line\">getLevelData(imageData) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = imageData.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mapData = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i += COLOR_SIZE * <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blockColor = <span class=\"keyword\">this</span>.getBlockColor(imageData, i); <span class=\"comment\">// 该区块平均rgba [&#123;r,g,b,a&#125;]数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取各个区块的平均rgba数据，将各个通道的颜色进行LEVEL色深降级</span></span><br><span class=\"line\">    <span class=\"comment\">// 根据r_g_b_a 建立map索引</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"keyword\">this</span>.getColorLevel(blockColor);</span><br><span class=\"line\">    !mapData[key] &amp;&amp; (mapData[key] = []);</span><br><span class=\"line\">    mapData[key].push(blockColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mapData;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 获取单位块的全部色值</span></span><br><span class=\"line\"><span class=\"comment\">// 并根据全部色值，计算平均色值</span></span><br><span class=\"line\"><span class=\"comment\">// 处理最后边界值，小于COLOR_SIZE</span></span><br><span class=\"line\">getBlockColor(imageData, start) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = [],</span><br><span class=\"line\">    count = COLOR_SIZE,</span><br><span class=\"line\">    len = COLOR_SIZE * <span class=\"number\">4</span>;</span><br><span class=\"line\">  imageData.length &lt;= start + len &amp;&amp; (count = <span class=\"built_in\">Math</span>.floor((imageData.length - start - <span class=\"number\">1</span>) / <span class=\"number\">4</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    data.push(&#123;</span><br><span class=\"line\">      r: imageData[start + i + <span class=\"number\">0</span>],</span><br><span class=\"line\">      g: imageData[start + i + <span class=\"number\">1</span>],</span><br><span class=\"line\">      b: imageData[start + i + <span class=\"number\">2</span>],</span><br><span class=\"line\">      a: imageData[start + i + <span class=\"number\">3</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAverageColor(data);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 取出各个通道的平均值，即为改色块的平均色值</span></span><br><span class=\"line\">getAverageColor(colorArr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = colorArr.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sr = <span class=\"number\">0</span>, sg = <span class=\"number\">0</span>, sb = <span class=\"number\">0</span>, sa = <span class=\"number\">0</span>;</span><br><span class=\"line\">  colorArr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    sr += item.r;</span><br><span class=\"line\">    sg += item.g;</span><br><span class=\"line\">    sb += item.b;</span><br><span class=\"line\">    sa += item.a;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    r: <span class=\"built_in\">Math</span>.round(sr / len),</span><br><span class=\"line\">    g: <span class=\"built_in\">Math</span>.round(sg / len),</span><br><span class=\"line\">    b: <span class=\"built_in\">Math</span>.round(sb / len),</span><br><span class=\"line\">    a: <span class=\"built_in\">Math</span>.round(sa / len)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">getColorLevel(color) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getLevel(color.r) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.g) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.b) + <span class=\"string\">'_'</span> + <span class=\"keyword\">this</span>.getLevel(color.a)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">// 色深降级</span></span><br><span class=\"line\">getLevel(value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.round(value / LEVEL)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>把出现次数最多的averageColor区块，作为采样区块，再获取一遍averageColor，即是最终主色调  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据色块颜色，获取</span></span><br><span class=\"line\">getMostColor(colorData) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst = <span class=\"literal\">null</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> colorData) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, colorData[key].length)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, colorData[key])</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'colorData[key].length'</span>, key)</span><br><span class=\"line\">    colorData[key].length &gt; len &amp;&amp; (</span><br><span class=\"line\">      rst = colorData[key],</span><br><span class=\"line\">      len = colorData[key].length</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rst;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>运行截图<ul>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2ViYzI3MmNkNzU2NjNhODUxYmM2MWQ0MDE4OWJjZGI3NzQ5NDUucG5n?x-oss-process=image/format,png\" alt=\"区块获取主色调\"></li>\n<li>颜色可信度提高了很多<h2 id=\"拓展实践-医学灰色影像\"><a href=\"#拓展实践-医学灰色影像\" class=\"headerlink\" title=\"拓展实践-医学灰色影像\"></a>拓展实践-医学灰色影像</h2><ul>\n<li>核心：将<strong>三通道转成单通道</strong>即可<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> greyImageData = that.greyTheImage(imageData)</span><br><span class=\"line\">   wx.canvasPutImageData(&#123;</span><br><span class=\"line\">     canvasId: <span class=\"string\">'myCanvas'</span>,</span><br><span class=\"line\">     x: <span class=\"number\">150</span>,</span><br><span class=\"line\">     y: <span class=\"number\">0</span>,</span><br><span class=\"line\">     width: <span class=\"number\">150</span>,</span><br><span class=\"line\">     height: <span class=\"number\">100</span>,</span><br><span class=\"line\">     data: greyImageData,</span><br><span class=\"line\">     success (res) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'canvasPutImageData it worked!'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> greyTheImage(imageData) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// imageData有4个通道rgba</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imageData.length; i += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> sum_rgb = <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"comment\">// 但我们只需要rgb三通道，a-alpha通道无用</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         sum_rgb = sum_rgb + imageData[i + j]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> grey = <span class=\"built_in\">Math</span>.round(sum_rgb / <span class=\"number\">3</span>)</span><br><span class=\"line\">       imageData[i] = grey</span><br><span class=\"line\">       imageData[i + <span class=\"number\">1</span>] = grey</span><br><span class=\"line\">       imageData[i + <span class=\"number\">2</span>] = grey</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> imageData</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n<li>运行截图<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlLzhmNWJhNzk2OTJjOWEwOTA2MDNlMzkxMzBlMDRiZTY4MTAwNzcwLnBuZw?x-oss-process=image/format,png\" alt=\"医学灰色影像\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"格式化rgba输出\"><a href=\"#格式化rgba输出\" class=\"headerlink\" title=\"格式化rgba输出\"></a>格式化rgba输出</h2><ul>\n<li>像这样<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3AwLm1laXR1YW4ubmV0L215dmlkZW9kaXN0cmlidXRlL2YxNDVhYzM4YzQ1MjFkNDgzNGNkZGQ5NTNmNjQ1MWQ3NTI0NTkucG5n?x-oss-process=image/format,png\" alt=\"格式化rgba输出\">  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对最终颜色的字符串格式化</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result:&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   hex:'#ffffff',            十六位值</span></span><br><span class=\"line\"><span class=\"comment\"> *   hexa:'#ffffff00',         十六位值带alpha值</span></span><br><span class=\"line\"><span class=\"comment\"> *   rgb:'rgb(0,0,0)',         RGB值</span></span><br><span class=\"line\"><span class=\"comment\"> *   rgba:'rgba(0,0,0,0)'      RGB值带alpha值</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">colorStrFormat(color) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rgba = <span class=\"string\">'rgba('</span> + color.r + <span class=\"string\">','</span> + color.g + <span class=\"string\">','</span> + color.b + <span class=\"string\">','</span> + (color.a / <span class=\"number\">255</span>).toFixed(<span class=\"number\">4</span>).replace(<span class=\"regexp\">/\\.*0+$/</span>, <span class=\"string\">''</span>) + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rgb = <span class=\"string\">'rgb('</span> + color.r + <span class=\"string\">','</span> + color.g + <span class=\"string\">','</span> + color.b + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hex = <span class=\"string\">'#'</span> + <span class=\"keyword\">this</span>.Num2Hex(color.r) + <span class=\"keyword\">this</span>.Num2Hex(color.g) + <span class=\"keyword\">this</span>.Num2Hex(color.b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexa = hex + <span class=\"keyword\">this</span>.Num2Hex(color.a);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    rgba: rgba,</span><br><span class=\"line\">    rgb: rgb,</span><br><span class=\"line\">    hex: hex,</span><br><span class=\"line\">    hexa: hexa</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">Num2Hex(num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hex = num.toString(<span class=\"number\">16</span>) + <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hex.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> + hex;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2></li>\n<li><a href=\"https://blog.csdn.net/u012843346/article/details/16839649\" target=\"_blank\" rel=\"noopener\">phg1024 JavaScript图像处理(6) - 减色算法(Color Reduction)</a></li>\n<li><a href=\"https://github.com/whoiam2007s/ImgMainColor\" target=\"_blank\" rel=\"noopener\">获取图片主色调的插件</a></li>\n<li>其实也可以利用 <a href=\"https://blog.csdn.net/nanhupatar/article/details/82793637\" target=\"_blank\" rel=\"noopener\">CSS新特性去改变背景颜色</a>，比如高斯模糊等来达到业务需求<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2></li>\n<li>周六听了一天 John Lennon 歌曲【这也是我拖更的原因😶 羡慕他和 Yoko 那段伊甸园般的爱情，他对 Yoko 的痴爱，他和母亲的两次分别感同身受，Beatles在一起做音乐的欢乐，他对 Sean 的宠溺父爱，但他的人生却在一次枪杀后戛然而止，心痛 心痛 🌧</li>\n<li>祝大家多多发财</li>\n</ul>\n<hr>"},{"title":"基于KMP的FSM处理未知 pattern","date":"2020-05-16T07:10:28.000Z","description":["基于KMP的FSM pattern"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 准备整一下 “基于KMP的FSM处理 pattern” 啦，祝我成功 🙋\n- 这里呢~ 准备分为三步去实现\n\t- FSM 处理字符串\n\t- KMP 算法概述\n\t- 基于 KMP 的 FSM 处理 pattern 的实现\n\n<!-- more -->\n\n## 实践记录\n\n### FSM 处理字符串\n#### FSM 概念\n- 每一个状态都是一个机器\n\t- 在每一个机器里，我们可以做计算、存储、输出\n\t- 所有的这些机器接受的输入是一致的\n\t- 状态机的每一个机器本身没有状态，如果我们用函数来表示的话，它应该是纯函数（无副作用）\n- 每一个机器知道下一个状态\n\t- 每个机器都有确定的下一个状态（Moore）\n\t- 每个机器根据输入决定下一个状态（Mealy）\n\n#### 在一个字符串中，找到字符串 abcdef\n- 不使用 FSM ，在一个字符串中，找到字符串 abcdef找到字符串 abcdef\n\n\t```javascript\n\t  function match(string) {\n\t    let foundA = false\n\t    let foundB = false\n\t    let foundC = false\n\t    let foundD = false\n\t    let foundE = false\n\t    for (let char of string) {\n\t      if (char == 'a')\n\t        foundA = true\n\t      else if (foundA && char == 'b')\n\t        foundB = true\n\t      else if (foundB && char == 'c')\n\t        foundC = true\n\t      else if (foundC && char == 'd')\n\t        foundD = true\n\t      else if (foundD && char == 'e')\n\t        foundE = true\n\t      else if (foundD && char == 'f')\n\t        return true\n\t      else {\n\t        let foundA = false\n\t        let foundB = false\n\t        let foundC = false\n\t        let foundD = false\n\t        let foundE = false\n\t      }\n\t    }\n\t    return false\n\t  }\n\t  console.log(match(\"I aabcdefghm grood.\"))\n\t  console.log(match(\"I aacdefghm grood.\"))\n\t```\n\t- 运行结果\n\t\t- ![第一版运行结果](http://p0.meituan.net/myvideodistribute/40a9e9395d783093ae5e9af1bc2d081c58822.png)\n\t- 缺点：\n\t\t1. 不可扩展代码较多\n\t\t2. if else 多次判断\n\n- 使用 FSM ，在一个字符串中，找到字符串 abcdef \n\n\t```javascript\n\t  function match(string) {\n\t    let state = start\n\t    for (let char of string) {\n\t      state = state(char)\n\t    }\n\t    return state === end\n\t  }\n\t  function start(char) {\n\t    if (char === 'a')\n\t      return findA\n\t    else\n\t      return start\n\t  }\n\t  function end(char) {\n\t    return end\n\t  }\n\t  function findA(char) {\n\t    if (char === 'b')\n\t      return findB\n\t    else\n\t      return start(char)\n\t  }\n\t  function findB(char) {\n\t    if (char === 'c')\n\t      return findC\n\t    else\n\t      return start(char)\n\t  }\n\t  function findC(char) {\n\t    if (char === 'd')\n\t      return findD\n\t    else\n\t      return start(char)\n\t  }\n\t  function findD(char) {\n\t    if (char === 'e')\n\t      return findE\n\t    else\n\t      return start(char)\n\t  }\n\t  function findE(char) {\n\t    if (char === 'f')\n\t      return end\n\t    else\n\t      return start\n\t  }\n\t  console.log(match(\"I aabcdefghm grood.\"))\n\t  console.log(match(\"I aacdefghm grood.\"))\n\t```\n\t- 运行结果\n\t\t- ![FSM 处理字符串 abcdef](http://p0.meituan.net/myvideodistribute/74431b7630e0a9f8b3aeb65907987b9a80908.png)\n\n### JS 中的有限状态机\n\n```javascript\n// 每个函数是一个状态\nfunction state(input) { // 函数参数就是输入\n  // 在函数中，可以自由地编写代码，处理每个状态的逻辑\n  return next;\n}\n\n/** 以下是调用 **/\nwhile(input) {\n  // 获取输入\n  state = state(input) // 把状态机的返回值作为下一个状态\n}\n```\n\n#### 使用 FSM ，在一个字符串中，找到字符串 abcabx\n\n```javascript\n\n  function match(string) {\n    let state = start\n    for (let char of string) {\n      state = state(char)\n    }\n    return state === end\n  }\n  function start(char) {\n    if (char === 'a')\n      return findA\n    else\n      return start\n  }\n  function end(char) {\n    return end\n  }\n  function findA(char) {\n    if (char === 'b')\n      return findB\n    else\n      return start(char)\n  }\n  function findB(char) {\n    if (char === 'c')\n      return findC\n    else\n      return start(char)\n  }\n  function findC(char) {\n    if (char === 'a')\n      return findA2\n    else\n      return start(char)\n  }\n  function findA2(char) {\n    if (char === 'b')\n      return findB2\n    else\n      return start(char)\n  }\n  function findB2(char) {\n    if (char === 'x')\n      return end\n    else\n      return findB(char)\n  }\n  match(\"I aabcabcabx grood.\")\n```\n- 运行结果\n\t- ![FSM 找到 abcabx](http://p1.meituan.net/myvideodistribute/c09493a569d2d4e21d1600ebd9fcb84589625.png)\n\n#### 使用 FSM ，在一个字符串中，找到字符串 ababx\n\n```javascript\n  function match(string) {\n    let state = start\n    for (let char of string) {\n      state = state(char)\n    }\n    return state === end\n  }\n  function start(char) {\n    if (char === 'a')\n      return findA1\n    else\n      return start\n  }\n  function end(char) {\n    return end\n  }\n  function findA1(char) {\n    if (char === 'b')\n      return findB1\n    else\n      return start(char)\n  }\n  function findB1(char) {\n    if (char === 'a')\n      return findA2\n    else\n      return start(char)\n  }\n  function findA2(char) {\n    if (char === 'b')\n      return findB2\n    else\n      return start(char)\n  }\n  function findB2(char) {\n    if (char === 'a')\n      return findA3\n    else\n      return start(char)\n  }\n  function findA3(char) {\n    if (char === 'b')\n      return findB3\n    else\n      return start(char)\n  }\n  function findB3(char) {\n    if (char === 'x')\n      return end\n    else\n      return findB2(char)\n  }\n  console.log(match(\"I aababababx grood.\"))\n  console.log(match(\"I aabababababx grood.\"))\n  console.log(match(\"I aababaeababx grood.\"))\n  console.log(match(\"I aabababaabx grood.\"))\n```\n- 运行结果\n\t- ![abababx](http://p0.meituan.net/myvideodistribute/6c000a617a3f594e24bf99c52d4d0848101059.png)\n\n【那我们该如何利用 FSM 处理未知 pattern 呢？🤔\n\n【字符串匹配问题就是在一个文本字符串T中搜索某个模式字符串P的所有出现位置。\n\n### KMP 算法概述\n#### KMP 最长公共前后缀长度\n- 假如 pattern 为 ABABCABAA\n\t- 前缀依次为 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA\n\t- 后缀依次为 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA\n- 那么它的最长公共前后缀长度为多少呢？\n\t- A --> 0\n\t\t- 无前缀\n\t\t- 无后缀\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- AB --> 0\n\t\t- 前缀 A\n\t\t- 后缀 B\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- ABA --> 1\n\t\t- 前缀 A AB\n\t\t- 后缀 A BA \n\t\t- 最长公共前后缀：A，len = 1\n\t- ABAB --> 2\n\t\t- 前缀 A AB ABA\n\t\t- 后缀 B AB BAB \n\t\t- 最长公共前后缀：AB，len = 2\n\t- ABABC --> 0\n\t\t- 前缀 A AB ABA ABAB\n\t\t- 后缀 C BC ABC BABC\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- ABABCA --> 1\n\t\t- 前缀 A AB ABA ABAB ABABC\n\t\t- 后缀 A CA BCA ABCA BABCA\n\t\t- 最长公共前后缀：A，len = 1\n\t- ABABCAB --> 2\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA\n\t\t- 后缀 B AB CAB BCAB ABCAB BACAB\n\t\t- 最长公共前后缀：AB，len = 2\n\t- ABABCABA --> 3\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA ABABCAB\n\t\t- 后缀 A BA ABA CABA BCABA ABCABA BABCABA\n\t\t- 最长公共前后缀：ABA，len = 3\n\t- ABABCABAA --> 1\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA\n\t\t- 后缀 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA\n\t\t- 最长公共前后缀：A，len = 1\n- 因此我们可以构建出，最长公共前后缀长度为\n\t- [0, 0, 1, 2, 0, 1, 2, 3, 1] 对应 pattern 字符串数组\n\t- [A, B, A, B, C, A, B, A, A]\n\t- [0, 1, 2, 3, 4, 5, 6, 7, 8]\n- 那么根据\n\t- A --> len = 0, i = 0\n\t- AB --> len = 0, i = 1\n\t- <u>A</u>B<u>A</u> --> len = 1, i = 2, pattern[i] = A, pattern[上一个len] = A\n\t- <u>AB</u><u>AB</u> --> len = 2, i = 3, pattern[i] = B, pattern[上一个len] = B\n\t- ABABC --> len = 0, i = 4\n\t- <u>A</u>BABC<u>A</u> --> len = 1, i = 5, pattern[i] = A, pattern[上一个len] = A\n\t- <u>AB</u>ABC<u>AB</u> --> len = 2, i = 6, pattern[i] = B, pattern[上一个len] = B\n\t- <u>ABA</u>BC<u>ABA</u> --> len = 3, i = 7, pattern[i] = A, pattern[上一个len] = A\n\t- ABABCABAA --> len = 1, i = 8\n\t- 我们可以观察得到\n\t\t\n\t\t```javascript\n\t\tif (pattern[i] === pattern[len]) {\n\t        len ++;\n\t        prefix[i] = len;\n\t        i ++;\n\t    }\n\t\t```\n\t- 除此之外的情况呢？比如最后的 ABABCABAA --> len = 1, i = 8\n\t\t- [0, 1, 2, 3, 4, 5, 6, 7, 8] 字符串数组下标索引\n\t\t- [A, B, A, B, C, A, B, A, A] 字符串数组\n\t\t- [0, 0, 1, 2, 0, 1, 2, 3, ?] prefixTable\n\t\t\t- 我们可以发现，前一个字符 A 对应的 prefix 为 3，对应的pattern[3]为 B（prefix[len - 1] === B），B的前一个字符 A 对应的 prefix 为 1（len = prefix[len - 1] --> 0），pattern[1] 为 A，再执行上层代码 prefix[8] === len[0]\n\t\n\t\n- KMP 最长公共前后缀长度实现\n\n\t```javascript\n\tfunction prefixTable(pattern, prefix, n) {\n\t    prefix[0] = 0; // prefix 初始\n\t    let len = 0; // 最长公共前后缀长度\n\t    let i = 1;\n\t    while(i < n) {\n\t      if (pattern[i] === pattern[len]) {\n\t        len ++;\n\t        prefix[i] = len;\n\t        i ++;\n\t      } else {\n\t        if (len > 0) {\n\t          len = prefix[len - 1]\n\t        }\n\t        else {\n\t          prefix[i] = len\n\t          i ++\n\t        }\n\t      }\n\t      console.log(prefix)\n\t    }\n\t  }\n\t```\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/354d6d33c10aa23f150c26a68a09f19084870.png)\n- 再添一层处理，因为前缀是不不会包括自己本身的，所以我们需要整体后移一位，并且，空出来的第一项置为 -1\n\n\t```javascript\n\tfunction movePrefixTable(prefix, n) {\n\t    for (let i = n - 1; i > 0; i --) {\n\t      prefix[i] = prefix[i - 1]\n\t    }\n\t    prefix[0] = -1\n\t}\n\t```\n\t\n#### KMP 处理 pattern\n\n```javascript\n  function prefixTable(pattern, prefix, n) {\n    prefix[0] = 0; // prefix 初始\n    let len = 0; // 最长公共前后缀长度\n    let i = 1;\n    while(i < n) {\n      if (pattern[i] === pattern[len]) {\n        len ++;\n        prefix[i] = len;\n        i ++;\n      } else {\n        if (len > 0) {\n          len = prefix[len - 1]\n        }\n        else {\n          prefix[i] = len\n          i ++\n        }\n      }\n      console.log(prefix)\n    }\n  }\n\n  function movePrefixTable(prefix, n) {\n    for (let i = n - 1; i > 0; i --) {\n      prefix[i] = prefix[i - 1]\n    }\n    prefix[0] = -1\n  }\n\n  function kmpSearch(text, pattern) {\n    const patternArray = pattern.split(\"\")\n    let patternLen = patternArray.length\n    const textArray = text.split(\"\")\n    let textLen = textArray.length\n\n    let prefixArray = new Array(patternLen)\n    prefixTable(patternArray, prefixArray, patternLen)\n    movePrefixTable(prefixArray, patternLen)\n\n    // console.log('prefixTemp', prefixTemp)\n    console.log('prefixArray', prefixArray)\n\n    // textArray len m\n    // pattern len n\n\n    let i = 0, j = 0;\n    while(i < textLen) {\n      if (j === patternLen - 1 && textArray[i] === patternArray[j]) {\n        console.log(\"Found pattern at \", i - j)\n        j = prefixArray[j]\n      }\n      if (textArray[i] === patternArray[j]) {\n        i ++;\n        j ++;\n      } else {\n        j = prefixArray[j]\n        if (j === -1) {\n          i ++;\n          j ++;\n        }\n      }\n    }\n  }\n\n  kmpSearch(\"ABABABABCABAAB\", \"ABABCABAA\")\n```\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/f4273ce6b530673651ce3a9f513c730760549.png)\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/214a8fcf81cda92716e44270f816392663018.png)\n\n### 基于 KMP 的 FSM 处理 pattern\n\n```javascript\n\n\n  let textArray = [] // 未知字符串\n  let text = \"\"\n  let textLen = 0 // 未知字符串长度\n  let patternArray = [] // pattern 字符串\n  let pattern = \"\"\n  let patternLen // 未知 pattern 长度\n  let prefixArray = null // KMP prefix table\n  let len = 0 // 最长公共前后缀长度\n\n\n  function initState() {\n    patternArray = pattern.split(\"\")\n    patternLen = patternArray.length\n    textArray = text.split(\"\")\n    textLen = textArray.length\n    prefixArray = new Array(patternLen)\n    prefixArray[0] = 0\n    let len = 0\n    return patteranStart\n  }\n\n\n  function patteranStart(i) {\n    if (patternArray[i] === patternArray[len]) {\n      len++;\n      prefixArray[i] = len;\n      return { needAdd: true };\n    } else {\n      if (len > 0) {\n        len = prefixArray[len - 1]\n        return { needAdd: false }\n      }\n      else {\n        prefixArray[i] = len\n        return { needAdd: true }\n      }\n    }\n    if (i ===  patternLen) {\n      return movePrefixTable\n    }\n  }\n\n\n  function movePrefixTable() {\n    for (let i = patternLen - 1; i > 0; i--) {\n      prefixArray[i] = prefixArray[i - 1]\n    }\n    prefixArray[0] = -1\n    return KMPSearch\n  }\n\n\n  function KMPSearch(i, j) {\n    if (j === patternLen - 1 && textArray[i] === patternArray[j]) {\n      j = prefixArray[j]\n      return { iNeedAdd: false, jNeedAdd: false, isMatched: true }\n    }\n    if (textArray[i] === patternArray[j]) {\n      return { iNeedAdd: true, jNeedAdd: true, isMatched: false }\n    } else {\n      j = prefixArray[j]\n      if (j === -1) {\n        return { iNeedAdd: true, jNeedAdd: true, isMatched: false }\n      }\n    }\n    return { iNeedAdd: true, jNeedAdd: false, isMatched: false }\n  }\n  \n  const STATUS_MAP = {\n    \"init\": initState,\n    \"prefixtable\": patteranStart,\n    \"movePrefixTable\": movePrefixTable,\n    \"KMPSearch\": KMPSearch\n  }\n\n  function match(_text, _pattern) {\n    text = _text\n    pattern = _pattern\n\n    let patternState = initState\n    let STATUS_MAP_KEYS = Object.keys(STATUS_MAP)\n\n    for (let status = 0; status < STATUS_MAP_KEYS.length; status++) {\n      patternState = STATUS_MAP[STATUS_MAP_KEYS[status]]\n      if (STATUS_MAP_KEYS[status] === \"init\") {\n\n        patternState()\n\n      } else if (STATUS_MAP_KEYS[status] === \"prefixtable\") {\n\n        let res = { len: 0, needAdd: true }\n        for (let i = 1; i <= patternLen; res.needAdd && i++) {\n          res = patternState(i)\n        }\n\n      } else if (STATUS_MAP_KEYS[status] === \"movePrefixTable\") {\n\n        patternState()\n\n      } else if (STATUS_MAP_KEYS[status] === \"KMPSearch\") {\n\n        let kmpSearchRes = { iNeedAdd: false, jNeedAdd: false, isMatched: false }\n        for (let i = 0, j = 0; i < textLen;) {\n          kmpSearchRes = patternState(i, j)\n          if (kmpSearchRes.isMatched) {\n            console.log(\"First Found pattern at \", i - j)\n            return kmpSearchRes.isMatched\n          }\n          if (kmpSearchRes.iNeedAdd)\n            i++\n          if (kmpSearchRes.jNeedAdd)\n            j++\n        }\n        return kmpSearchRes.isMatched\n\n      }\n    }\n  }\n\n  match(\"ABABABABCABAAB\", \"ABABCABAA\")\n```\n\n- 运行结果\n\t- ![基于 KMP 的 FSM 处理 pattern 运行结果](http://p0.meituan.net/myvideodistribute/7079d40d337c97ae742c21e0f7a2f87320359.png)\n\n\t\n## 参考\n- [KMP 算法视频讲解](https://www.bilibili.com/video/BV1Px411z7Yo)\n- [KMP-最长公共前后缀长度](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)\n\n\n\n## 写在后面\n- 感谢在 KMP 算法折腾时，提供帮助的 田神大大【 🤫 等我有他联系方式了，我悄悄同步给你们\n- 学而不思则罔\n- 祝大家多多发财","source":"_posts/基于KMP的FSM处理字符串.md","raw":"---\ntitle: 基于KMP的FSM处理未知 pattern\ndate: 2020-05-16 15:10:28\ntags: \n- 算法\ncategories:\n- 算法\ndescription:\n- 基于KMP的FSM pattern\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- 准备整一下 “基于KMP的FSM处理 pattern” 啦，祝我成功 🙋\n- 这里呢~ 准备分为三步去实现\n\t- FSM 处理字符串\n\t- KMP 算法概述\n\t- 基于 KMP 的 FSM 处理 pattern 的实现\n\n<!-- more -->\n\n## 实践记录\n\n### FSM 处理字符串\n#### FSM 概念\n- 每一个状态都是一个机器\n\t- 在每一个机器里，我们可以做计算、存储、输出\n\t- 所有的这些机器接受的输入是一致的\n\t- 状态机的每一个机器本身没有状态，如果我们用函数来表示的话，它应该是纯函数（无副作用）\n- 每一个机器知道下一个状态\n\t- 每个机器都有确定的下一个状态（Moore）\n\t- 每个机器根据输入决定下一个状态（Mealy）\n\n#### 在一个字符串中，找到字符串 abcdef\n- 不使用 FSM ，在一个字符串中，找到字符串 abcdef找到字符串 abcdef\n\n\t```javascript\n\t  function match(string) {\n\t    let foundA = false\n\t    let foundB = false\n\t    let foundC = false\n\t    let foundD = false\n\t    let foundE = false\n\t    for (let char of string) {\n\t      if (char == 'a')\n\t        foundA = true\n\t      else if (foundA && char == 'b')\n\t        foundB = true\n\t      else if (foundB && char == 'c')\n\t        foundC = true\n\t      else if (foundC && char == 'd')\n\t        foundD = true\n\t      else if (foundD && char == 'e')\n\t        foundE = true\n\t      else if (foundD && char == 'f')\n\t        return true\n\t      else {\n\t        let foundA = false\n\t        let foundB = false\n\t        let foundC = false\n\t        let foundD = false\n\t        let foundE = false\n\t      }\n\t    }\n\t    return false\n\t  }\n\t  console.log(match(\"I aabcdefghm grood.\"))\n\t  console.log(match(\"I aacdefghm grood.\"))\n\t```\n\t- 运行结果\n\t\t- ![第一版运行结果](http://p0.meituan.net/myvideodistribute/40a9e9395d783093ae5e9af1bc2d081c58822.png)\n\t- 缺点：\n\t\t1. 不可扩展代码较多\n\t\t2. if else 多次判断\n\n- 使用 FSM ，在一个字符串中，找到字符串 abcdef \n\n\t```javascript\n\t  function match(string) {\n\t    let state = start\n\t    for (let char of string) {\n\t      state = state(char)\n\t    }\n\t    return state === end\n\t  }\n\t  function start(char) {\n\t    if (char === 'a')\n\t      return findA\n\t    else\n\t      return start\n\t  }\n\t  function end(char) {\n\t    return end\n\t  }\n\t  function findA(char) {\n\t    if (char === 'b')\n\t      return findB\n\t    else\n\t      return start(char)\n\t  }\n\t  function findB(char) {\n\t    if (char === 'c')\n\t      return findC\n\t    else\n\t      return start(char)\n\t  }\n\t  function findC(char) {\n\t    if (char === 'd')\n\t      return findD\n\t    else\n\t      return start(char)\n\t  }\n\t  function findD(char) {\n\t    if (char === 'e')\n\t      return findE\n\t    else\n\t      return start(char)\n\t  }\n\t  function findE(char) {\n\t    if (char === 'f')\n\t      return end\n\t    else\n\t      return start\n\t  }\n\t  console.log(match(\"I aabcdefghm grood.\"))\n\t  console.log(match(\"I aacdefghm grood.\"))\n\t```\n\t- 运行结果\n\t\t- ![FSM 处理字符串 abcdef](http://p0.meituan.net/myvideodistribute/74431b7630e0a9f8b3aeb65907987b9a80908.png)\n\n### JS 中的有限状态机\n\n```javascript\n// 每个函数是一个状态\nfunction state(input) { // 函数参数就是输入\n  // 在函数中，可以自由地编写代码，处理每个状态的逻辑\n  return next;\n}\n\n/** 以下是调用 **/\nwhile(input) {\n  // 获取输入\n  state = state(input) // 把状态机的返回值作为下一个状态\n}\n```\n\n#### 使用 FSM ，在一个字符串中，找到字符串 abcabx\n\n```javascript\n\n  function match(string) {\n    let state = start\n    for (let char of string) {\n      state = state(char)\n    }\n    return state === end\n  }\n  function start(char) {\n    if (char === 'a')\n      return findA\n    else\n      return start\n  }\n  function end(char) {\n    return end\n  }\n  function findA(char) {\n    if (char === 'b')\n      return findB\n    else\n      return start(char)\n  }\n  function findB(char) {\n    if (char === 'c')\n      return findC\n    else\n      return start(char)\n  }\n  function findC(char) {\n    if (char === 'a')\n      return findA2\n    else\n      return start(char)\n  }\n  function findA2(char) {\n    if (char === 'b')\n      return findB2\n    else\n      return start(char)\n  }\n  function findB2(char) {\n    if (char === 'x')\n      return end\n    else\n      return findB(char)\n  }\n  match(\"I aabcabcabx grood.\")\n```\n- 运行结果\n\t- ![FSM 找到 abcabx](http://p1.meituan.net/myvideodistribute/c09493a569d2d4e21d1600ebd9fcb84589625.png)\n\n#### 使用 FSM ，在一个字符串中，找到字符串 ababx\n\n```javascript\n  function match(string) {\n    let state = start\n    for (let char of string) {\n      state = state(char)\n    }\n    return state === end\n  }\n  function start(char) {\n    if (char === 'a')\n      return findA1\n    else\n      return start\n  }\n  function end(char) {\n    return end\n  }\n  function findA1(char) {\n    if (char === 'b')\n      return findB1\n    else\n      return start(char)\n  }\n  function findB1(char) {\n    if (char === 'a')\n      return findA2\n    else\n      return start(char)\n  }\n  function findA2(char) {\n    if (char === 'b')\n      return findB2\n    else\n      return start(char)\n  }\n  function findB2(char) {\n    if (char === 'a')\n      return findA3\n    else\n      return start(char)\n  }\n  function findA3(char) {\n    if (char === 'b')\n      return findB3\n    else\n      return start(char)\n  }\n  function findB3(char) {\n    if (char === 'x')\n      return end\n    else\n      return findB2(char)\n  }\n  console.log(match(\"I aababababx grood.\"))\n  console.log(match(\"I aabababababx grood.\"))\n  console.log(match(\"I aababaeababx grood.\"))\n  console.log(match(\"I aabababaabx grood.\"))\n```\n- 运行结果\n\t- ![abababx](http://p0.meituan.net/myvideodistribute/6c000a617a3f594e24bf99c52d4d0848101059.png)\n\n【那我们该如何利用 FSM 处理未知 pattern 呢？🤔\n\n【字符串匹配问题就是在一个文本字符串T中搜索某个模式字符串P的所有出现位置。\n\n### KMP 算法概述\n#### KMP 最长公共前后缀长度\n- 假如 pattern 为 ABABCABAA\n\t- 前缀依次为 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA\n\t- 后缀依次为 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA\n- 那么它的最长公共前后缀长度为多少呢？\n\t- A --> 0\n\t\t- 无前缀\n\t\t- 无后缀\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- AB --> 0\n\t\t- 前缀 A\n\t\t- 后缀 B\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- ABA --> 1\n\t\t- 前缀 A AB\n\t\t- 后缀 A BA \n\t\t- 最长公共前后缀：A，len = 1\n\t- ABAB --> 2\n\t\t- 前缀 A AB ABA\n\t\t- 后缀 B AB BAB \n\t\t- 最长公共前后缀：AB，len = 2\n\t- ABABC --> 0\n\t\t- 前缀 A AB ABA ABAB\n\t\t- 后缀 C BC ABC BABC\n\t\t- 最长公共前后缀：\"\"，len = 0\n\t- ABABCA --> 1\n\t\t- 前缀 A AB ABA ABAB ABABC\n\t\t- 后缀 A CA BCA ABCA BABCA\n\t\t- 最长公共前后缀：A，len = 1\n\t- ABABCAB --> 2\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA\n\t\t- 后缀 B AB CAB BCAB ABCAB BACAB\n\t\t- 最长公共前后缀：AB，len = 2\n\t- ABABCABA --> 3\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA ABABCAB\n\t\t- 后缀 A BA ABA CABA BCABA ABCABA BABCABA\n\t\t- 最长公共前后缀：ABA，len = 3\n\t- ABABCABAA --> 1\n\t\t- 前缀 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA\n\t\t- 后缀 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA\n\t\t- 最长公共前后缀：A，len = 1\n- 因此我们可以构建出，最长公共前后缀长度为\n\t- [0, 0, 1, 2, 0, 1, 2, 3, 1] 对应 pattern 字符串数组\n\t- [A, B, A, B, C, A, B, A, A]\n\t- [0, 1, 2, 3, 4, 5, 6, 7, 8]\n- 那么根据\n\t- A --> len = 0, i = 0\n\t- AB --> len = 0, i = 1\n\t- <u>A</u>B<u>A</u> --> len = 1, i = 2, pattern[i] = A, pattern[上一个len] = A\n\t- <u>AB</u><u>AB</u> --> len = 2, i = 3, pattern[i] = B, pattern[上一个len] = B\n\t- ABABC --> len = 0, i = 4\n\t- <u>A</u>BABC<u>A</u> --> len = 1, i = 5, pattern[i] = A, pattern[上一个len] = A\n\t- <u>AB</u>ABC<u>AB</u> --> len = 2, i = 6, pattern[i] = B, pattern[上一个len] = B\n\t- <u>ABA</u>BC<u>ABA</u> --> len = 3, i = 7, pattern[i] = A, pattern[上一个len] = A\n\t- ABABCABAA --> len = 1, i = 8\n\t- 我们可以观察得到\n\t\t\n\t\t```javascript\n\t\tif (pattern[i] === pattern[len]) {\n\t        len ++;\n\t        prefix[i] = len;\n\t        i ++;\n\t    }\n\t\t```\n\t- 除此之外的情况呢？比如最后的 ABABCABAA --> len = 1, i = 8\n\t\t- [0, 1, 2, 3, 4, 5, 6, 7, 8] 字符串数组下标索引\n\t\t- [A, B, A, B, C, A, B, A, A] 字符串数组\n\t\t- [0, 0, 1, 2, 0, 1, 2, 3, ?] prefixTable\n\t\t\t- 我们可以发现，前一个字符 A 对应的 prefix 为 3，对应的pattern[3]为 B（prefix[len - 1] === B），B的前一个字符 A 对应的 prefix 为 1（len = prefix[len - 1] --> 0），pattern[1] 为 A，再执行上层代码 prefix[8] === len[0]\n\t\n\t\n- KMP 最长公共前后缀长度实现\n\n\t```javascript\n\tfunction prefixTable(pattern, prefix, n) {\n\t    prefix[0] = 0; // prefix 初始\n\t    let len = 0; // 最长公共前后缀长度\n\t    let i = 1;\n\t    while(i < n) {\n\t      if (pattern[i] === pattern[len]) {\n\t        len ++;\n\t        prefix[i] = len;\n\t        i ++;\n\t      } else {\n\t        if (len > 0) {\n\t          len = prefix[len - 1]\n\t        }\n\t        else {\n\t          prefix[i] = len\n\t          i ++\n\t        }\n\t      }\n\t      console.log(prefix)\n\t    }\n\t  }\n\t```\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/354d6d33c10aa23f150c26a68a09f19084870.png)\n- 再添一层处理，因为前缀是不不会包括自己本身的，所以我们需要整体后移一位，并且，空出来的第一项置为 -1\n\n\t```javascript\n\tfunction movePrefixTable(prefix, n) {\n\t    for (let i = n - 1; i > 0; i --) {\n\t      prefix[i] = prefix[i - 1]\n\t    }\n\t    prefix[0] = -1\n\t}\n\t```\n\t\n#### KMP 处理 pattern\n\n```javascript\n  function prefixTable(pattern, prefix, n) {\n    prefix[0] = 0; // prefix 初始\n    let len = 0; // 最长公共前后缀长度\n    let i = 1;\n    while(i < n) {\n      if (pattern[i] === pattern[len]) {\n        len ++;\n        prefix[i] = len;\n        i ++;\n      } else {\n        if (len > 0) {\n          len = prefix[len - 1]\n        }\n        else {\n          prefix[i] = len\n          i ++\n        }\n      }\n      console.log(prefix)\n    }\n  }\n\n  function movePrefixTable(prefix, n) {\n    for (let i = n - 1; i > 0; i --) {\n      prefix[i] = prefix[i - 1]\n    }\n    prefix[0] = -1\n  }\n\n  function kmpSearch(text, pattern) {\n    const patternArray = pattern.split(\"\")\n    let patternLen = patternArray.length\n    const textArray = text.split(\"\")\n    let textLen = textArray.length\n\n    let prefixArray = new Array(patternLen)\n    prefixTable(patternArray, prefixArray, patternLen)\n    movePrefixTable(prefixArray, patternLen)\n\n    // console.log('prefixTemp', prefixTemp)\n    console.log('prefixArray', prefixArray)\n\n    // textArray len m\n    // pattern len n\n\n    let i = 0, j = 0;\n    while(i < textLen) {\n      if (j === patternLen - 1 && textArray[i] === patternArray[j]) {\n        console.log(\"Found pattern at \", i - j)\n        j = prefixArray[j]\n      }\n      if (textArray[i] === patternArray[j]) {\n        i ++;\n        j ++;\n      } else {\n        j = prefixArray[j]\n        if (j === -1) {\n          i ++;\n          j ++;\n        }\n      }\n    }\n  }\n\n  kmpSearch(\"ABABABABCABAAB\", \"ABABCABAA\")\n```\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/f4273ce6b530673651ce3a9f513c730760549.png)\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/214a8fcf81cda92716e44270f816392663018.png)\n\n### 基于 KMP 的 FSM 处理 pattern\n\n```javascript\n\n\n  let textArray = [] // 未知字符串\n  let text = \"\"\n  let textLen = 0 // 未知字符串长度\n  let patternArray = [] // pattern 字符串\n  let pattern = \"\"\n  let patternLen // 未知 pattern 长度\n  let prefixArray = null // KMP prefix table\n  let len = 0 // 最长公共前后缀长度\n\n\n  function initState() {\n    patternArray = pattern.split(\"\")\n    patternLen = patternArray.length\n    textArray = text.split(\"\")\n    textLen = textArray.length\n    prefixArray = new Array(patternLen)\n    prefixArray[0] = 0\n    let len = 0\n    return patteranStart\n  }\n\n\n  function patteranStart(i) {\n    if (patternArray[i] === patternArray[len]) {\n      len++;\n      prefixArray[i] = len;\n      return { needAdd: true };\n    } else {\n      if (len > 0) {\n        len = prefixArray[len - 1]\n        return { needAdd: false }\n      }\n      else {\n        prefixArray[i] = len\n        return { needAdd: true }\n      }\n    }\n    if (i ===  patternLen) {\n      return movePrefixTable\n    }\n  }\n\n\n  function movePrefixTable() {\n    for (let i = patternLen - 1; i > 0; i--) {\n      prefixArray[i] = prefixArray[i - 1]\n    }\n    prefixArray[0] = -1\n    return KMPSearch\n  }\n\n\n  function KMPSearch(i, j) {\n    if (j === patternLen - 1 && textArray[i] === patternArray[j]) {\n      j = prefixArray[j]\n      return { iNeedAdd: false, jNeedAdd: false, isMatched: true }\n    }\n    if (textArray[i] === patternArray[j]) {\n      return { iNeedAdd: true, jNeedAdd: true, isMatched: false }\n    } else {\n      j = prefixArray[j]\n      if (j === -1) {\n        return { iNeedAdd: true, jNeedAdd: true, isMatched: false }\n      }\n    }\n    return { iNeedAdd: true, jNeedAdd: false, isMatched: false }\n  }\n  \n  const STATUS_MAP = {\n    \"init\": initState,\n    \"prefixtable\": patteranStart,\n    \"movePrefixTable\": movePrefixTable,\n    \"KMPSearch\": KMPSearch\n  }\n\n  function match(_text, _pattern) {\n    text = _text\n    pattern = _pattern\n\n    let patternState = initState\n    let STATUS_MAP_KEYS = Object.keys(STATUS_MAP)\n\n    for (let status = 0; status < STATUS_MAP_KEYS.length; status++) {\n      patternState = STATUS_MAP[STATUS_MAP_KEYS[status]]\n      if (STATUS_MAP_KEYS[status] === \"init\") {\n\n        patternState()\n\n      } else if (STATUS_MAP_KEYS[status] === \"prefixtable\") {\n\n        let res = { len: 0, needAdd: true }\n        for (let i = 1; i <= patternLen; res.needAdd && i++) {\n          res = patternState(i)\n        }\n\n      } else if (STATUS_MAP_KEYS[status] === \"movePrefixTable\") {\n\n        patternState()\n\n      } else if (STATUS_MAP_KEYS[status] === \"KMPSearch\") {\n\n        let kmpSearchRes = { iNeedAdd: false, jNeedAdd: false, isMatched: false }\n        for (let i = 0, j = 0; i < textLen;) {\n          kmpSearchRes = patternState(i, j)\n          if (kmpSearchRes.isMatched) {\n            console.log(\"First Found pattern at \", i - j)\n            return kmpSearchRes.isMatched\n          }\n          if (kmpSearchRes.iNeedAdd)\n            i++\n          if (kmpSearchRes.jNeedAdd)\n            j++\n        }\n        return kmpSearchRes.isMatched\n\n      }\n    }\n  }\n\n  match(\"ABABABABCABAAB\", \"ABABCABAA\")\n```\n\n- 运行结果\n\t- ![基于 KMP 的 FSM 处理 pattern 运行结果](http://p0.meituan.net/myvideodistribute/7079d40d337c97ae742c21e0f7a2f87320359.png)\n\n\t\n## 参考\n- [KMP 算法视频讲解](https://www.bilibili.com/video/BV1Px411z7Yo)\n- [KMP-最长公共前后缀长度](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)\n\n\n\n## 写在后面\n- 感谢在 KMP 算法折腾时，提供帮助的 田神大大【 🤫 等我有他联系方式了，我悄悄同步给你们\n- 学而不思则罔\n- 祝大家多多发财","slug":"基于KMP的FSM处理字符串","published":1,"updated":"2020-05-24T11:47:01.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1x7002r1wp3h9trex04","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>准备整一下 “基于KMP的FSM处理 pattern” 啦，祝我成功 🙋</li>\n<li>这里呢~ 准备分为三步去实现<ul>\n<li>FSM 处理字符串</li>\n<li>KMP 算法概述</li>\n<li>基于 KMP 的 FSM 处理 pattern 的实现</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"FSM-处理字符串\"><a href=\"#FSM-处理字符串\" class=\"headerlink\" title=\"FSM 处理字符串\"></a>FSM 处理字符串</h3><h4 id=\"FSM-概念\"><a href=\"#FSM-概念\" class=\"headerlink\" title=\"FSM 概念\"></a>FSM 概念</h4><ul>\n<li>每一个状态都是一个机器<ul>\n<li>在每一个机器里，我们可以做计算、存储、输出</li>\n<li>所有的这些机器接受的输入是一致的</li>\n<li>状态机的每一个机器本身没有状态，如果我们用函数来表示的话，它应该是纯函数（无副作用）</li>\n</ul>\n</li>\n<li>每一个机器知道下一个状态<ul>\n<li>每个机器都有确定的下一个状态（Moore）</li>\n<li>每个机器根据输入决定下一个状态（Mealy）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"在一个字符串中，找到字符串-abcdef\"><a href=\"#在一个字符串中，找到字符串-abcdef\" class=\"headerlink\" title=\"在一个字符串中，找到字符串 abcdef\"></a>在一个字符串中，找到字符串 abcdef</h4><ul>\n<li><p>不使用 FSM ，在一个字符串中，找到字符串 abcdef找到字符串 abcdef</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundA = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundB = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundC = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundD = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundE = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char == <span class=\"string\">'a'</span>)</span><br><span class=\"line\">      foundA = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundA &amp;&amp; char == <span class=\"string\">'b'</span>)</span><br><span class=\"line\">      foundB = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundB &amp;&amp; char == <span class=\"string\">'c'</span>)</span><br><span class=\"line\">      foundC = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundC &amp;&amp; char == <span class=\"string\">'d'</span>)</span><br><span class=\"line\">      foundD = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundD &amp;&amp; char == <span class=\"string\">'e'</span>)</span><br><span class=\"line\">      foundE = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundD &amp;&amp; char == <span class=\"string\">'f'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundA = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundB = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundC = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundD = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundE = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabcdefghm grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aacdefghm grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/40a9e9395d783093ae5e9af1bc2d081c58822.png\" alt=\"第一版运行结果\"></li>\n</ul>\n</li>\n<li>缺点：<ol>\n<li>不可扩展代码较多</li>\n<li>if else 多次判断</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>使用 FSM ，在一个字符串中，找到字符串 abcdef </p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findC</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findC</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'d'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findD</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findD</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'e'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findE</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findE</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'f'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabcdefghm grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aacdefghm grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/74431b7630e0a9f8b3aeb65907987b9a80908.png\" alt=\"FSM 处理字符串 abcdef\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JS-中的有限状态机\"><a href=\"#JS-中的有限状态机\" class=\"headerlink\" title=\"JS 中的有限状态机\"></a>JS 中的有限状态机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每个函数是一个状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">state</span>(<span class=\"params\">input</span>) </span>&#123; <span class=\"comment\">// 函数参数就是输入</span></span><br><span class=\"line\">  <span class=\"comment\">// 在函数中，可以自由地编写代码，处理每个状态的逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 以下是调用 **/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(input) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取输入</span></span><br><span class=\"line\">  state = state(input) <span class=\"comment\">// 把状态机的返回值作为下一个状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-FSM-，在一个字符串中，找到字符串-abcabx\"><a href=\"#使用-FSM-，在一个字符串中，找到字符串-abcabx\" class=\"headerlink\" title=\"使用 FSM ，在一个字符串中，找到字符串 abcabx\"></a>使用 FSM ，在一个字符串中，找到字符串 abcabx</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findC</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findC</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'x'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">match(<span class=\"string\">\"I aabcabcabx grood.\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/c09493a569d2d4e21d1600ebd9fcb84589625.png\" alt=\"FSM 找到 abcabx\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用-FSM-，在一个字符串中，找到字符串-ababx\"><a href=\"#使用-FSM-，在一个字符串中，找到字符串-ababx\" class=\"headerlink\" title=\"使用 FSM ，在一个字符串中，找到字符串 ababx\"></a>使用 FSM ，在一个字符串中，找到字符串 ababx</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA1</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB1</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA3</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA3</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB3</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB3</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'x'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aababababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabababababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aababaeababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabababaabx grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6c000a617a3f594e24bf99c52d4d0848101059.png\" alt=\"abababx\"></li>\n</ul>\n</li>\n</ul>\n<p>【那我们该如何利用 FSM 处理未知 pattern 呢？🤔</p>\n<p>【字符串匹配问题就是在一个文本字符串T中搜索某个模式字符串P的所有出现位置。</p>\n<h3 id=\"KMP-算法概述\"><a href=\"#KMP-算法概述\" class=\"headerlink\" title=\"KMP 算法概述\"></a>KMP 算法概述</h3><h4 id=\"KMP-最长公共前后缀长度\"><a href=\"#KMP-最长公共前后缀长度\" class=\"headerlink\" title=\"KMP 最长公共前后缀长度\"></a>KMP 最长公共前后缀长度</h4><ul>\n<li><p>假如 pattern 为 ABABCABAA</p>\n<ul>\n<li>前缀依次为 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA</li>\n<li>后缀依次为 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA</li>\n</ul>\n</li>\n<li><p>那么它的最长公共前后缀长度为多少呢？</p>\n<ul>\n<li>A –&gt; 0<ul>\n<li>无前缀</li>\n<li>无后缀</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>AB –&gt; 0<ul>\n<li>前缀 A</li>\n<li>后缀 B</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>ABA –&gt; 1<ul>\n<li>前缀 A AB</li>\n<li>后缀 A BA </li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n<li>ABAB –&gt; 2<ul>\n<li>前缀 A AB ABA</li>\n<li>后缀 B AB BAB </li>\n<li>最长公共前后缀：AB，len = 2</li>\n</ul>\n</li>\n<li>ABABC –&gt; 0<ul>\n<li>前缀 A AB ABA ABAB</li>\n<li>后缀 C BC ABC BABC</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>ABABCA –&gt; 1<ul>\n<li>前缀 A AB ABA ABAB ABABC</li>\n<li>后缀 A CA BCA ABCA BABCA</li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n<li>ABABCAB –&gt; 2<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA</li>\n<li>后缀 B AB CAB BCAB ABCAB BACAB</li>\n<li>最长公共前后缀：AB，len = 2</li>\n</ul>\n</li>\n<li>ABABCABA –&gt; 3<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA ABABCAB</li>\n<li>后缀 A BA ABA CABA BCABA ABCABA BABCABA</li>\n<li>最长公共前后缀：ABA，len = 3</li>\n</ul>\n</li>\n<li>ABABCABAA –&gt; 1<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA</li>\n<li>后缀 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA</li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>因此我们可以构建出，最长公共前后缀长度为</p>\n<ul>\n<li>[0, 0, 1, 2, 0, 1, 2, 3, 1] 对应 pattern 字符串数组</li>\n<li>[A, B, A, B, C, A, B, A, A]</li>\n<li>[0, 1, 2, 3, 4, 5, 6, 7, 8]</li>\n</ul>\n</li>\n<li><p>那么根据</p>\n<ul>\n<li><p>A –&gt; len = 0, i = 0</p>\n</li>\n<li><p>AB –&gt; len = 0, i = 1</p>\n</li>\n<li><p><u>A</u>B<u>A</u> –&gt; len = 1, i = 2, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p><u>AB</u><u>AB</u> –&gt; len = 2, i = 3, pattern[i] = B, pattern[上一个len] = B</p>\n</li>\n<li><p>ABABC –&gt; len = 0, i = 4</p>\n</li>\n<li><p><u>A</u>BABC<u>A</u> –&gt; len = 1, i = 5, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p><u>AB</u>ABC<u>AB</u> –&gt; len = 2, i = 6, pattern[i] = B, pattern[上一个len] = B</p>\n</li>\n<li><p><u>ABA</u>BC<u>ABA</u> –&gt; len = 3, i = 7, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p>ABABCABAA –&gt; len = 1, i = 8</p>\n</li>\n<li><p>我们可以观察得到</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">       len ++;</span><br><span class=\"line\">       prefix[i] = len;</span><br><span class=\"line\">       i ++;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>除此之外的情况呢？比如最后的 ABABCABAA –&gt; len = 1, i = 8</p>\n<ul>\n<li>[0, 1, 2, 3, 4, 5, 6, 7, 8] 字符串数组下标索引</li>\n<li>[A, B, A, B, C, A, B, A, A] 字符串数组</li>\n<li>[0, 0, 1, 2, 0, 1, 2, 3, ?] prefixTable<ul>\n<li>我们可以发现，前一个字符 A 对应的 prefix 为 3，对应的pattern[3]为 B（prefix[len - 1] === B），B的前一个字符 A 对应的 prefix 为 1（len = prefix[len - 1] –&gt; 0），pattern[1] 为 A，再执行上层代码 prefix[8] === len[0]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>KMP 最长公共前后缀长度实现</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixTable</span>(<span class=\"params\">pattern, prefix, n</span>) </span>&#123;</span><br><span class=\"line\">    prefix[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// prefix 初始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>; <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">        len ++;</span><br><span class=\"line\">        prefix[i] = len;</span><br><span class=\"line\">        i ++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          len = prefix[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          prefix[i] = len</span><br><span class=\"line\">          i ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(prefix)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/354d6d33c10aa23f150c26a68a09f19084870.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n<li><p>再添一层处理，因为前缀是不不会包括自己本身的，所以我们需要整体后移一位，并且，空出来的第一项置为 -1</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\">prefix, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">      prefix[i] = prefix[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prefix[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"KMP-处理-pattern\"><a href=\"#KMP-处理-pattern\" class=\"headerlink\" title=\"KMP 处理 pattern\"></a>KMP 处理 pattern</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixTable</span>(<span class=\"params\">pattern, prefix, n</span>) </span>&#123;</span><br><span class=\"line\">  prefix[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// prefix 初始</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>; <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">      len ++;</span><br><span class=\"line\">      prefix[i] = len;</span><br><span class=\"line\">      i ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        len = prefix[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prefix[i] = len</span><br><span class=\"line\">        i ++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(prefix)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\">prefix, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    prefix[i] = prefix[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prefix[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kmpSearch</span>(<span class=\"params\">text, pattern</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> patternArray = pattern.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> patternLen = patternArray.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textArray = text.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> textLen = textArray.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prefixArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(patternLen)</span><br><span class=\"line\">  prefixTable(patternArray, prefixArray, patternLen)</span><br><span class=\"line\">  movePrefixTable(prefixArray, patternLen)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log('prefixTemp', prefixTemp)</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'prefixArray'</span>, prefixArray)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// textArray len m</span></span><br><span class=\"line\">  <span class=\"comment\">// pattern len n</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; textLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === patternLen - <span class=\"number\">1</span> &amp;&amp; textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Found pattern at \"</span>, i - j)</span><br><span class=\"line\">      j = prefixArray[j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">      i ++;</span><br><span class=\"line\">      j ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j = prefixArray[j]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        i ++;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">kmpSearch(<span class=\"string\">\"ABABABABCABAAB\"</span>, <span class=\"string\">\"ABABCABAA\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f4273ce6b530673651ce3a9f513c730760549.png\" alt=\"运行结果\"></li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/214a8fcf81cda92716e44270f816392663018.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于-KMP-的-FSM-处理-pattern\"><a href=\"#基于-KMP-的-FSM-处理-pattern\" class=\"headerlink\" title=\"基于 KMP 的 FSM 处理 pattern\"></a>基于 KMP 的 FSM 处理 pattern</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> textArray = [] <span class=\"comment\">// 未知字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> textLen = <span class=\"number\">0</span> <span class=\"comment\">// 未知字符串长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patternArray = [] <span class=\"comment\">// pattern 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patternLen <span class=\"comment\">// 未知 pattern 长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> prefixArray = <span class=\"literal\">null</span> <span class=\"comment\">// KMP prefix table</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> len = <span class=\"number\">0</span> <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  patternArray = pattern.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  patternLen = patternArray.length</span><br><span class=\"line\">  textArray = text.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  textLen = textArray.length</span><br><span class=\"line\">  prefixArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(patternLen)</span><br><span class=\"line\">  prefixArray[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> patteranStart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patteranStart</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patternArray[i] === patternArray[len]) &#123;</span><br><span class=\"line\">    len++;</span><br><span class=\"line\">    prefixArray[i] = len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      len = prefixArray[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      prefixArray[i] = len</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i ===  patternLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> movePrefixTable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = patternLen - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    prefixArray[i] = prefixArray[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prefixArray[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> KMPSearch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">KMPSearch</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j === patternLen - <span class=\"number\">1</span> &amp;&amp; textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">    j = prefixArray[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    j = prefixArray[j]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> STATUS_MAP = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"init\"</span>: initState,</span><br><span class=\"line\">  <span class=\"string\">\"prefixtable\"</span>: patteranStart,</span><br><span class=\"line\">  <span class=\"string\">\"movePrefixTable\"</span>: movePrefixTable,</span><br><span class=\"line\">  <span class=\"string\">\"KMPSearch\"</span>: KMPSearch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">_text, _pattern</span>) </span>&#123;</span><br><span class=\"line\">  text = _text</span><br><span class=\"line\">  pattern = _pattern</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> patternState = initState</span><br><span class=\"line\">  <span class=\"keyword\">let</span> STATUS_MAP_KEYS = <span class=\"built_in\">Object</span>.keys(STATUS_MAP)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> status = <span class=\"number\">0</span>; status &lt; STATUS_MAP_KEYS.length; status++) &#123;</span><br><span class=\"line\">    patternState = STATUS_MAP[STATUS_MAP_KEYS[status]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"init\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      patternState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"prefixtable\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = &#123; <span class=\"attr\">len</span>: <span class=\"number\">0</span>, <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= patternLen; res.needAdd &amp;&amp; i++) &#123;</span><br><span class=\"line\">        res = patternState(i)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"movePrefixTable\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      patternState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"KMPSearch\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> kmpSearchRes = &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; textLen;) &#123;</span><br><span class=\"line\">        kmpSearchRes = patternState(i, j)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.isMatched) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"First Found pattern at \"</span>, i - j)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> kmpSearchRes.isMatched</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.iNeedAdd)</span><br><span class=\"line\">          i++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.jNeedAdd)</span><br><span class=\"line\">          j++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> kmpSearchRes.isMatched</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">match(<span class=\"string\">\"ABABABABCABAAB\"</span>, <span class=\"string\">\"ABABCABAA\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7079d40d337c97ae742c21e0f7a2f87320359.png\" alt=\"基于 KMP 的 FSM 处理 pattern 运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Px411z7Yo\" target=\"_blank\" rel=\"noopener\">KMP 算法视频讲解</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">KMP-最长公共前后缀长度</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>感谢在 KMP 算法折腾时，提供帮助的 田神大大【 🤫 等我有他联系方式了，我悄悄同步给你们</li>\n<li>学而不思则罔</li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>准备整一下 “基于KMP的FSM处理 pattern” 啦，祝我成功 🙋</li>\n<li>这里呢~ 准备分为三步去实现<ul>\n<li>FSM 处理字符串</li>\n<li>KMP 算法概述</li>\n<li>基于 KMP 的 FSM 处理 pattern 的实现</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"FSM-处理字符串\"><a href=\"#FSM-处理字符串\" class=\"headerlink\" title=\"FSM 处理字符串\"></a>FSM 处理字符串</h3><h4 id=\"FSM-概念\"><a href=\"#FSM-概念\" class=\"headerlink\" title=\"FSM 概念\"></a>FSM 概念</h4><ul>\n<li>每一个状态都是一个机器<ul>\n<li>在每一个机器里，我们可以做计算、存储、输出</li>\n<li>所有的这些机器接受的输入是一致的</li>\n<li>状态机的每一个机器本身没有状态，如果我们用函数来表示的话，它应该是纯函数（无副作用）</li>\n</ul>\n</li>\n<li>每一个机器知道下一个状态<ul>\n<li>每个机器都有确定的下一个状态（Moore）</li>\n<li>每个机器根据输入决定下一个状态（Mealy）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"在一个字符串中，找到字符串-abcdef\"><a href=\"#在一个字符串中，找到字符串-abcdef\" class=\"headerlink\" title=\"在一个字符串中，找到字符串 abcdef\"></a>在一个字符串中，找到字符串 abcdef</h4><ul>\n<li><p>不使用 FSM ，在一个字符串中，找到字符串 abcdef找到字符串 abcdef</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundA = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundB = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundC = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundD = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> foundE = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char == <span class=\"string\">'a'</span>)</span><br><span class=\"line\">      foundA = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundA &amp;&amp; char == <span class=\"string\">'b'</span>)</span><br><span class=\"line\">      foundB = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundB &amp;&amp; char == <span class=\"string\">'c'</span>)</span><br><span class=\"line\">      foundC = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundC &amp;&amp; char == <span class=\"string\">'d'</span>)</span><br><span class=\"line\">      foundD = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundD &amp;&amp; char == <span class=\"string\">'e'</span>)</span><br><span class=\"line\">      foundE = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foundD &amp;&amp; char == <span class=\"string\">'f'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundA = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundB = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundC = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundD = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> foundE = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabcdefghm grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aacdefghm grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/40a9e9395d783093ae5e9af1bc2d081c58822.png\" alt=\"第一版运行结果\"></li>\n</ul>\n</li>\n<li>缺点：<ol>\n<li>不可扩展代码较多</li>\n<li>if else 多次判断</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>使用 FSM ，在一个字符串中，找到字符串 abcdef </p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findC</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findC</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'d'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findD</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findD</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'e'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findE</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findE</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'f'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabcdefghm grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aacdefghm grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/74431b7630e0a9f8b3aeb65907987b9a80908.png\" alt=\"FSM 处理字符串 abcdef\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JS-中的有限状态机\"><a href=\"#JS-中的有限状态机\" class=\"headerlink\" title=\"JS 中的有限状态机\"></a>JS 中的有限状态机</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每个函数是一个状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">state</span>(<span class=\"params\">input</span>) </span>&#123; <span class=\"comment\">// 函数参数就是输入</span></span><br><span class=\"line\">  <span class=\"comment\">// 在函数中，可以自由地编写代码，处理每个状态的逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 以下是调用 **/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(input) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取输入</span></span><br><span class=\"line\">  state = state(input) <span class=\"comment\">// 把状态机的返回值作为下一个状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-FSM-，在一个字符串中，找到字符串-abcabx\"><a href=\"#使用-FSM-，在一个字符串中，找到字符串-abcabx\" class=\"headerlink\" title=\"使用 FSM ，在一个字符串中，找到字符串 abcabx\"></a>使用 FSM ，在一个字符串中，找到字符串 abcabx</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findC</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findC</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'x'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">match(<span class=\"string\">\"I aabcabcabx grood.\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/c09493a569d2d4e21d1600ebd9fcb84589625.png\" alt=\"FSM 找到 abcabx\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用-FSM-，在一个字符串中，找到字符串-ababx\"><a href=\"#使用-FSM-，在一个字符串中，找到字符串-ababx\" class=\"headerlink\" title=\"使用 FSM ，在一个字符串中，找到字符串 ababx\"></a>使用 FSM ，在一个字符串中，找到字符串 ababx</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = start</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> string) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state === end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA1</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB1</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB2</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findA3</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findA3</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB3</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findB3</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">'x'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> findB2(char)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aababababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabababababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aababaeababx grood.\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(match(<span class=\"string\">\"I aabababaabx grood.\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6c000a617a3f594e24bf99c52d4d0848101059.png\" alt=\"abababx\"></li>\n</ul>\n</li>\n</ul>\n<p>【那我们该如何利用 FSM 处理未知 pattern 呢？🤔</p>\n<p>【字符串匹配问题就是在一个文本字符串T中搜索某个模式字符串P的所有出现位置。</p>\n<h3 id=\"KMP-算法概述\"><a href=\"#KMP-算法概述\" class=\"headerlink\" title=\"KMP 算法概述\"></a>KMP 算法概述</h3><h4 id=\"KMP-最长公共前后缀长度\"><a href=\"#KMP-最长公共前后缀长度\" class=\"headerlink\" title=\"KMP 最长公共前后缀长度\"></a>KMP 最长公共前后缀长度</h4><ul>\n<li><p>假如 pattern 为 ABABCABAA</p>\n<ul>\n<li>前缀依次为 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA</li>\n<li>后缀依次为 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA</li>\n</ul>\n</li>\n<li><p>那么它的最长公共前后缀长度为多少呢？</p>\n<ul>\n<li>A –&gt; 0<ul>\n<li>无前缀</li>\n<li>无后缀</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>AB –&gt; 0<ul>\n<li>前缀 A</li>\n<li>后缀 B</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>ABA –&gt; 1<ul>\n<li>前缀 A AB</li>\n<li>后缀 A BA </li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n<li>ABAB –&gt; 2<ul>\n<li>前缀 A AB ABA</li>\n<li>后缀 B AB BAB </li>\n<li>最长公共前后缀：AB，len = 2</li>\n</ul>\n</li>\n<li>ABABC –&gt; 0<ul>\n<li>前缀 A AB ABA ABAB</li>\n<li>后缀 C BC ABC BABC</li>\n<li>最长公共前后缀：””，len = 0</li>\n</ul>\n</li>\n<li>ABABCA –&gt; 1<ul>\n<li>前缀 A AB ABA ABAB ABABC</li>\n<li>后缀 A CA BCA ABCA BABCA</li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n<li>ABABCAB –&gt; 2<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA</li>\n<li>后缀 B AB CAB BCAB ABCAB BACAB</li>\n<li>最长公共前后缀：AB，len = 2</li>\n</ul>\n</li>\n<li>ABABCABA –&gt; 3<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA ABABCAB</li>\n<li>后缀 A BA ABA CABA BCABA ABCABA BABCABA</li>\n<li>最长公共前后缀：ABA，len = 3</li>\n</ul>\n</li>\n<li>ABABCABAA –&gt; 1<ul>\n<li>前缀 A AB ABA ABAB ABABC ABABCA ABABCAB ABABCABA</li>\n<li>后缀 A AA BAA ABAA CABAA BCABAA ABCABAA BABCABAA</li>\n<li>最长公共前后缀：A，len = 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>因此我们可以构建出，最长公共前后缀长度为</p>\n<ul>\n<li>[0, 0, 1, 2, 0, 1, 2, 3, 1] 对应 pattern 字符串数组</li>\n<li>[A, B, A, B, C, A, B, A, A]</li>\n<li>[0, 1, 2, 3, 4, 5, 6, 7, 8]</li>\n</ul>\n</li>\n<li><p>那么根据</p>\n<ul>\n<li><p>A –&gt; len = 0, i = 0</p>\n</li>\n<li><p>AB –&gt; len = 0, i = 1</p>\n</li>\n<li><p><u>A</u>B<u>A</u> –&gt; len = 1, i = 2, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p><u>AB</u><u>AB</u> –&gt; len = 2, i = 3, pattern[i] = B, pattern[上一个len] = B</p>\n</li>\n<li><p>ABABC –&gt; len = 0, i = 4</p>\n</li>\n<li><p><u>A</u>BABC<u>A</u> –&gt; len = 1, i = 5, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p><u>AB</u>ABC<u>AB</u> –&gt; len = 2, i = 6, pattern[i] = B, pattern[上一个len] = B</p>\n</li>\n<li><p><u>ABA</u>BC<u>ABA</u> –&gt; len = 3, i = 7, pattern[i] = A, pattern[上一个len] = A</p>\n</li>\n<li><p>ABABCABAA –&gt; len = 1, i = 8</p>\n</li>\n<li><p>我们可以观察得到</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">       len ++;</span><br><span class=\"line\">       prefix[i] = len;</span><br><span class=\"line\">       i ++;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>除此之外的情况呢？比如最后的 ABABCABAA –&gt; len = 1, i = 8</p>\n<ul>\n<li>[0, 1, 2, 3, 4, 5, 6, 7, 8] 字符串数组下标索引</li>\n<li>[A, B, A, B, C, A, B, A, A] 字符串数组</li>\n<li>[0, 0, 1, 2, 0, 1, 2, 3, ?] prefixTable<ul>\n<li>我们可以发现，前一个字符 A 对应的 prefix 为 3，对应的pattern[3]为 B（prefix[len - 1] === B），B的前一个字符 A 对应的 prefix 为 1（len = prefix[len - 1] –&gt; 0），pattern[1] 为 A，再执行上层代码 prefix[8] === len[0]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>KMP 最长公共前后缀长度实现</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixTable</span>(<span class=\"params\">pattern, prefix, n</span>) </span>&#123;</span><br><span class=\"line\">    prefix[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// prefix 初始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>; <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">        len ++;</span><br><span class=\"line\">        prefix[i] = len;</span><br><span class=\"line\">        i ++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          len = prefix[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          prefix[i] = len</span><br><span class=\"line\">          i ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(prefix)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/354d6d33c10aa23f150c26a68a09f19084870.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n<li><p>再添一层处理，因为前缀是不不会包括自己本身的，所以我们需要整体后移一位，并且，空出来的第一项置为 -1</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\">prefix, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">      prefix[i] = prefix[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prefix[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"KMP-处理-pattern\"><a href=\"#KMP-处理-pattern\" class=\"headerlink\" title=\"KMP 处理 pattern\"></a>KMP 处理 pattern</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixTable</span>(<span class=\"params\">pattern, prefix, n</span>) </span>&#123;</span><br><span class=\"line\">  prefix[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// prefix 初始</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>; <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pattern[i] === pattern[len]) &#123;</span><br><span class=\"line\">      len ++;</span><br><span class=\"line\">      prefix[i] = len;</span><br><span class=\"line\">      i ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        len = prefix[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prefix[i] = len</span><br><span class=\"line\">        i ++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(prefix)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\">prefix, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    prefix[i] = prefix[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prefix[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kmpSearch</span>(<span class=\"params\">text, pattern</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> patternArray = pattern.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> patternLen = patternArray.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textArray = text.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> textLen = textArray.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prefixArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(patternLen)</span><br><span class=\"line\">  prefixTable(patternArray, prefixArray, patternLen)</span><br><span class=\"line\">  movePrefixTable(prefixArray, patternLen)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log('prefixTemp', prefixTemp)</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'prefixArray'</span>, prefixArray)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// textArray len m</span></span><br><span class=\"line\">  <span class=\"comment\">// pattern len n</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; textLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === patternLen - <span class=\"number\">1</span> &amp;&amp; textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Found pattern at \"</span>, i - j)</span><br><span class=\"line\">      j = prefixArray[j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">      i ++;</span><br><span class=\"line\">      j ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j = prefixArray[j]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        i ++;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">kmpSearch(<span class=\"string\">\"ABABABABCABAAB\"</span>, <span class=\"string\">\"ABABCABAA\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f4273ce6b530673651ce3a9f513c730760549.png\" alt=\"运行结果\"></li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/214a8fcf81cda92716e44270f816392663018.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于-KMP-的-FSM-处理-pattern\"><a href=\"#基于-KMP-的-FSM-处理-pattern\" class=\"headerlink\" title=\"基于 KMP 的 FSM 处理 pattern\"></a>基于 KMP 的 FSM 处理 pattern</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> textArray = [] <span class=\"comment\">// 未知字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> textLen = <span class=\"number\">0</span> <span class=\"comment\">// 未知字符串长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patternArray = [] <span class=\"comment\">// pattern 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patternLen <span class=\"comment\">// 未知 pattern 长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> prefixArray = <span class=\"literal\">null</span> <span class=\"comment\">// KMP prefix table</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> len = <span class=\"number\">0</span> <span class=\"comment\">// 最长公共前后缀长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  patternArray = pattern.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  patternLen = patternArray.length</span><br><span class=\"line\">  textArray = text.split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  textLen = textArray.length</span><br><span class=\"line\">  prefixArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(patternLen)</span><br><span class=\"line\">  prefixArray[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> patteranStart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patteranStart</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patternArray[i] === patternArray[len]) &#123;</span><br><span class=\"line\">    len++;</span><br><span class=\"line\">    prefixArray[i] = len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      len = prefixArray[len - <span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      prefixArray[i] = len</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i ===  patternLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> movePrefixTable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">movePrefixTable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = patternLen - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    prefixArray[i] = prefixArray[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prefixArray[<span class=\"number\">0</span>] = <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> KMPSearch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">KMPSearch</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j === patternLen - <span class=\"number\">1</span> &amp;&amp; textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">    j = prefixArray[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (textArray[i] === patternArray[j]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    j = prefixArray[j]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">true</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> STATUS_MAP = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"init\"</span>: initState,</span><br><span class=\"line\">  <span class=\"string\">\"prefixtable\"</span>: patteranStart,</span><br><span class=\"line\">  <span class=\"string\">\"movePrefixTable\"</span>: movePrefixTable,</span><br><span class=\"line\">  <span class=\"string\">\"KMPSearch\"</span>: KMPSearch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">_text, _pattern</span>) </span>&#123;</span><br><span class=\"line\">  text = _text</span><br><span class=\"line\">  pattern = _pattern</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> patternState = initState</span><br><span class=\"line\">  <span class=\"keyword\">let</span> STATUS_MAP_KEYS = <span class=\"built_in\">Object</span>.keys(STATUS_MAP)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> status = <span class=\"number\">0</span>; status &lt; STATUS_MAP_KEYS.length; status++) &#123;</span><br><span class=\"line\">    patternState = STATUS_MAP[STATUS_MAP_KEYS[status]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"init\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      patternState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"prefixtable\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = &#123; <span class=\"attr\">len</span>: <span class=\"number\">0</span>, <span class=\"attr\">needAdd</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= patternLen; res.needAdd &amp;&amp; i++) &#123;</span><br><span class=\"line\">        res = patternState(i)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"movePrefixTable\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      patternState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (STATUS_MAP_KEYS[status] === <span class=\"string\">\"KMPSearch\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> kmpSearchRes = &#123; <span class=\"attr\">iNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">jNeedAdd</span>: <span class=\"literal\">false</span>, <span class=\"attr\">isMatched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; textLen;) &#123;</span><br><span class=\"line\">        kmpSearchRes = patternState(i, j)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.isMatched) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"First Found pattern at \"</span>, i - j)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> kmpSearchRes.isMatched</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.iNeedAdd)</span><br><span class=\"line\">          i++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kmpSearchRes.jNeedAdd)</span><br><span class=\"line\">          j++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> kmpSearchRes.isMatched</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">match(<span class=\"string\">\"ABABABABCABAAB\"</span>, <span class=\"string\">\"ABABCABAA\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7079d40d337c97ae742c21e0f7a2f87320359.png\" alt=\"基于 KMP 的 FSM 处理 pattern 运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Px411z7Yo\" target=\"_blank\" rel=\"noopener\">KMP 算法视频讲解</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">KMP-最长公共前后缀长度</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>感谢在 KMP 算法折腾时，提供帮助的 田神大大【 🤫 等我有他联系方式了，我悄悄同步给你们</li>\n<li>学而不思则罔</li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Javascript-运行机制（二）","date":"2020-05-02T14:10:38.000Z","description":["Javascript -- Expression"],"_content":"\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 嗯，发现 运行机制 的面试题是真的多。。😓\n- 那这就是，最末篇吧\n- 加油 Elle 🤦‍♀️\n- 五一倒计时 2 天\n\n<!-- more -->\n\n## 实践记录\n\n### async / await \n\n5.1 题目一\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nasync1();\nconsole.log('start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- 执行同步代码\n\t- async1();\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- 等待执行 async2 结果\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- console.log('start')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 \n\t- console.log(\"async1 end\");\n\n\t\n- 结论\n\t- 在这里，可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」\n\n- 等同于\n\t\n\t```javascript\n\tasync function async1() {\n\t  console.log(\"async1 start\");\n\t  // 原来代码\n\t  // await async2();\n\t  // console.log(\"async1 end\");\n\t  \n\t  // 转换后代码\n\t  new Promise(resolve => {\n\t    console.log(\"async2\")\n\t    resolve()\n\t  }).then(res => console.log(\"async1 end\"))\n\t}\n\tasync function async2() {\n\t  console.log(\"async2\");\n\t}\n\tasync1();\n\tconsole.log(\"start\")\n\n\t```\n\n\n- 运行结果\n\t- ![题目一运行结果](http://p1.meituan.net/myvideodistribute/f08b1b409f667c37f2a9dae1bf0b491e36782.png)\n\n5.2 题目二\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nconsole.log(\"start\")\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1();\n\t\t- 执行同步代码\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- setTimeout ... 入队宏任务队列\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- console.log(\"start\")\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务队列\n\t\t- console.log(\"async1 end\");\n\t- 第一个宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer')\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/ef5bbc4448d8cf8a4e6e7eb3d481257d43632.png)\n\n\t\n5.3 题目三\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n  setTimeout(() => {\n    console.log('timer1')\n  }, 0)\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nsetTimeout(() => {\n  console.log('timer3')\n}, 0)\nconsole.log(\"start\")\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1();\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- setTimeout ... 入队宏任务队列\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t\t- setTimeout ... 入队微任务队列\n\t- setTimeout ... 入队宏任务队列\n\t- console.log(\"start\")\n\t- 当前宏任务中的同步代码已经执行完成，开始执行微任务\n\t- console.log(\"async1 end\");\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer2');\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer3')\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer1')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/40ff5c3620b6ef956afd99a895080cee58816.png)\n\n\n5.4 题目四\n\n```javascript\nasync function fn () {\n  // return await 1234\n  // 等同于\n  return 123\n}\nfn().then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- fn()\n\t\t- return 123\n\t- console.log(res) res --> 123\n\n- 运行结果\n\t- ![题目四运行结果](http://p1.meituan.net/myvideodistribute/01d7e322293346a15fd0c97cb6167dee21159.png)\n\n5.5 **题目五**\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- new Promise ... 等待执行\n\t\t\t- console.log('promise1')\n\t\t\t- 由于 promise 并没有 resolved、rejected，所以一直处在 pending 状态，所以 会一直 await ，await 后的内容也包括 async1 后面的 then，都不会执行\n\t- console.log('srcipt end')\n\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/6da017ef5e2bef76433a90be0f7804c343869.png)\n\n5.6 题目六\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise1 resolve')\n  }).then(res => console.log(res))\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- await new Promise ... 等待 promise 执行\n\t\t\t- console.log('promise1')\n\t\t\t- 其中 promise 状态变为 resolved，将其状态保存起来\n\t\t\t- new Promise then ... 加入微任务队列\n\t\t- console.log('async1 success'); 入队微任务队列\n\t\t- return 'async1 end'\n\t- async1().then ... 入队微任务队列\n\t- console.log('srcipt end')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务队列\n\t- .then(res => console.log(res))\n\t\t- res --> promise1 resolve\n\t- console.log('async1 success'); \n\t- res => console.log(res) res --> 'async1 end'\n\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/478ab1a6c972bd17dab664ba479c1c2859767.png)\n\n\n5.7 题目七\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise resolve')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => {\n  console.log(res)\n})\nnew Promise(resolve => {\n  console.log('promise2')\n  setTimeout(() => {\n    console.log('timer')\n  })\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- await new Promise ...\n\t\t\t- console.log('promise1')\n\t\t\t- 其中 promise 状态变为 resolve，将其保存起来\n\t\t- console.log('async1 success'); 入队微任务队列\n\t\t- return 'async1 end'\n\t- async1().then ... 入队微任务队列\n\t- new Promise，执行该构造函数代码\n\t\t- console.log('promise2')\n\t\t- setTimeout ... 加入宏任务队列\n\t- 当前宏任务中的同步代码执行完，开始执行微任务\n\t- console.log('async1 success');\n\t- console.log(res) res --> 'async1 end'\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer')\n\n- 运行结果\n\t- ![题目七运行结果](http://p0.meituan.net/myvideodistribute/59c38ec9bef1877e27b64b056fd9258663945.png)\n\n5.8 题目八\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2\");\n}\n\nconsole.log(\"script start\");\n\nsetTimeout(function() {\n  console.log(\"setTimeout\");\n}, 0);\n\nasync1();\n\nnew Promise(function(resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function() {\n  console.log(\"promise2\");\n});\nconsole.log('script end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log(\"script start\");\n\t- setTimeout ... 入队宏任务队列\n\t- async1()\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- new promise，执行该构造函数\n\t\t- console.log(\"promise1\");\n\t\t- 其中 promise 状态改变为 resolve，将其保存\n\t- new promise then ... 入队微任务队列\n\t- console.log('script end')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- console.log(\"async1 end\");\n\t- new Promise then ... \n\t\t- console.log(\"promise2\");\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t\t- console.log(\"setTimeout\");\n\n- 运行结果\n\t- ![题目八运行结果](http://p0.meituan.net/myvideodistribute/05bcc26014cb3a56f1da38df3e28141974246.png)\n\n5.9 题目九\n\n```javascript\nasync function testSometing() {\n  console.log(\"执行testSometing\");\n  return \"testSometing\";\n}\n\nasync function testAsync() {\n  console.log(\"执行testAsync\");\n  return Promise.resolve(\"hello async\");\n}\n\nasync function test() {\n  console.log(\"test start...\");\n  const v1 = await testSometing();\n  console.log(v1);\n  const v2 = await testAsync();\n  console.log(v2);\n  console.log(v1, v2);\n}\n\ntest();\n\nvar promise = new Promise(resolve => {\n  console.log(\"promise start...\");\n  resolve(\"promise\");\n});\npromise.then(val => console.log(val));\n\nconsole.log(\"test end...\");\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- test()\n\t\t- console.log(\"test start...\");\n\t\t- await testSometing()\n\t\t\t- console.log(\"执行testSometing\");\n\t\t\t- \"testSometing\";\n\t\t\t- const v1 = \"testSometing\";\n\t\t- console.log(\"testSometing\"); 入队微任务队列\n\t\t- await testAsync() 入队微任务队列\n\t\t- console.log(v2); 入队微任务队列\n\t\t- console.log(v1, v2); 入队微任务队列\n\t\t- new Promise, 执行该构造函数代码\n\t\t\t- console.log(\"promise start...\");\n\t\t\t- 其 promise 状态变为 resolve,将其保存\n\t\t- promise.then ... 入队微任务队列\n\t\t- console.log(\"test end...\");\n\t\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t\t\t- console.log(\"testSometing\"); v1 --> \"testSometing\"\n\t\t\t- await testAsync() \n\t\t\t\t- console.log(\"执行testAsync\");\n\t\t\t\t- return Promise.resolve(\"hello async\");\n\t\t\t\t- Promise.resolve(\"hello async\") ... 入队微任务队列\n\t\t\t- console.log(v2); ... 重新入队微任务队列\n\t\t\t- console.log(v1, v2); 重新入队微任务队列\n\t\t\t- promise.then ... \n\t\t\t\t- console.log(val) val --> promise\n\t\t\t- Promise.resolve(\"hello async\") return \"hello async\"\n\t\t\t- v2 = \"hello async\"\n\t\t\t- console.log(v2);\n\t\t\t- console.log(\"hello async\");\n\t\t\t- console.log(v1, v2);\n\t\t\t\t- console.log(\"执行testAsync\", \"hello async\");\n\n\n\n- 运行结果\n\t- ![题目九运行结果](http://p0.meituan.net/myvideodistribute/09e8b0ae4cadad1f803049e6545d73f091754.png)\n\n\t\n\n### async 处理错误\n6.1 **题目一**\n\n```javascript\nasync function async1 () {\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n}\nasync function async2 () {\n  return new Promise((resolve, reject) => {\n    console.log('async2')\n    reject('error')\n  })\n}\nasync1().then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1()\n\t\t- await async2();\n\t\t\t- new Promise，执行该构造函数\n\t\t\t\t- console.log('async2')\n\t\t\t\t- reject('error') promise 状态变为 reject,将其保存起来，并向上抛\n\t\t\t\t- Promise {<rejected>: \"error\"}\n\n- 运行结果\n\t- ![题目一运行结果](http://p1.meituan.net/myvideodistribute/b3955dc674cf405c9a60de9062b525c736256.png)\n\n\t\n6.2 题目二\n\n```javascript\nasync function async1 () {\n  try {\n    await Promise.reject('error!!!')\n  } catch(e) {\n    console.log(e)\n  }\n  console.log('async1');\n  return Promise.resolve('async1 success')\n}\nasync1().then(res => console.log(res))\nconsole.log('script start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1()\n\t\t- Promise.reject('error!!!')\n\t\t\t- promise 状态变为 reject，将其状态保存起来，向上抛错\n\t\t- catch 错误 入队微任务队列\n\t\t- console.log('async1'); 入队微任务队列\n\t\t- return Promise.resolve('async1 success')\n\t- async1().then ... 入队微任务队列\n\t- console.log('script start')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- console.log(e) e --> 'error!!!'\n\t- console.log('async1');\n\t- console.log(res) res --> 'async1 success'\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/fc960e772e0fbca1fdf8640c8774999640316.png)\n\n\n### 综合题\n\n7.1 题目一\n\n```javascript\nconst first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- first()\n\t\t- return 一个 promise 对象。先执行 new Promise，该构造函数代码\n\t\t- console.log(3);\n\t\t- resolve(2)\n\t\t\t- 该 promise 状态变为 resolved，保存起来\n\t\t- p new Promise, 执行该构造函数代码\n\t\t\t-  console.log(7);\n\t\t\t-  setTimeout ... 入队宏任务队列\n\t\t\t-  resolve(1);\n\t\t\t-  该 promise 状态变为 resolve ,保存起来\n\t\t- p.then ... 入队微任务队列\n\t- first().then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(4);\n\t- 该宏任务中的同步代码都执行完成，开始执行微任务队列\n\t- p.then\n\t- console.log(arg) arg --> 1\n\t- p.then 入队微任务队列\n\t- console.log(arg) arg --> 2\n\t- 当前宏任务中的代码都执行完成，开始执行下一个宏任务\n\t- setTimeout ...\n\t\t- console.log(5);\n\t\t- resolve(6); promise p 的状态已经改变，无法再进行更改，所以该行代码，无效\n\t\t- console.log(p) p --> 1\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/de321f1169135bf57ef98b6dd3346ada56428.png)\n\n\n7.2 题目二\n\n```javascript\nconst async1 = async () => {\n  console.log('async1');\n  setTimeout(() => {\n    console.log('timer1')\n  }, 2000)\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 end')\n  return 'async1 success'\n} \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => {\n  console.log('timer2')\n}, 1000)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('script start');\n\t- async1()\n\t\t- console.log('async1');\n\t\t- setTimeout ... 2000入队宏任务队列\n\t\t- await new Promise\n\t\t\t- 执行该构造函数代码\n\t\t\t\t- console.log('promise1')\n\t\t- 由于该 promise 没有被 resolve、reject，一直处在 pending，因此 后面的\n\t\t\t- console.log('async1 end') 入队微任务队列\n\t\t\t- return 'async1 success'\n\t\t\t- 均不执行\n\t- async1().then ... 入队微任务队列\n\t- console.log('script end');\n\t- Promise.resolve(1)\n\t\t- 该 promie 状态变为1，保存起来\n\t- Promise.resolve(1).then ... 入队微任务队列\n\t- setTimeout ... 1000入队宏任务队列\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- Promise.resolve(1).then ... \n\t\t- 由于 .then(2) .then(Promise.resolve(3)) .catch(4) 一个是数字，一个是对象，会发生值透传现象\n\t\t- console.log(res) res --> 1\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- setTimeout ... 1000\n\t\t- console.log('timer2')\n\t- setTimeout ... 2000\n\t\t- - console.log('timer1')\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/18d87ace8b51f98e4e30f55c17d0c4ff93076.png)\n\n7.3 题目三\n\n```javascript\nconst p1 = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve('resolve3');\n    console.log('timer1')\n  }, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n}).then(res => {\n  console.log(res)\n  setTimeout(() => {\n    console.log(p1)\n  }, 1000)\n}).finally(res => {\n  console.log('finally', res)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- new Promise，执行该构造函数代码\n\t\t- setTimeout ... 入队宏任务队列\n\t\t- resolve('resovle1');\n\t\t- promise 状态变为 resolve1，并保存起来\n\t- Promise.then ...\n\t\t- console.log(res) res --> 'resovle1'\n\t\t- setTimeout ... 入队宏任务队列\n\t- Promise.finally ...\n\t\t- console.log('finally', res) res --> undefined\n\t- 当前宏任务中的代码全部执行完成，开始执行下一个宏任务\n\t- resolve('resolve3'); promise 状态一旦改变，无法更改\n\t- console.log('timer1')\n\t- 当前宏任务中的代码全部执行完成，开始执行下一个宏任务\n\t- console.log(p1) p1 --> .finally的返回值 --> undefined\n\n- 结论\n\t- **finally 不管 Promise 的状态是 resolved 还是 rejected 都会执行，且它的回调函数是接收不到 Promise 的结果的**，所以 finally() 中的 res 是一个迷惑项\n\t\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/7be692142d758f1d65ad549a1b106f4146102.png)\n\n\t\n## 参考文献\n- [题目来源](https://juejin.im/post/5e58c618e51d4526ed66b5cf)\n\t\t\t\t\n\t\t\t\t\n## 写在后面\n\t\t\t\t\n- 祝大家多多发财","source":"_posts/Javascrtip-运行机制（二）.md","raw":"---\ntitle: Javascript-运行机制（二）\ndate: 2020-05-02 22:10:38\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Expression\n---\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 嗯，发现 运行机制 的面试题是真的多。。😓\n- 那这就是，最末篇吧\n- 加油 Elle 🤦‍♀️\n- 五一倒计时 2 天\n\n<!-- more -->\n\n## 实践记录\n\n### async / await \n\n5.1 题目一\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nasync1();\nconsole.log('start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- 执行同步代码\n\t- async1();\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- 等待执行 async2 结果\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- console.log('start')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 \n\t- console.log(\"async1 end\");\n\n\t\n- 结论\n\t- 在这里，可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」\n\n- 等同于\n\t\n\t```javascript\n\tasync function async1() {\n\t  console.log(\"async1 start\");\n\t  // 原来代码\n\t  // await async2();\n\t  // console.log(\"async1 end\");\n\t  \n\t  // 转换后代码\n\t  new Promise(resolve => {\n\t    console.log(\"async2\")\n\t    resolve()\n\t  }).then(res => console.log(\"async1 end\"))\n\t}\n\tasync function async2() {\n\t  console.log(\"async2\");\n\t}\n\tasync1();\n\tconsole.log(\"start\")\n\n\t```\n\n\n- 运行结果\n\t- ![题目一运行结果](http://p1.meituan.net/myvideodistribute/f08b1b409f667c37f2a9dae1bf0b491e36782.png)\n\n5.2 题目二\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nconsole.log(\"start\")\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1();\n\t\t- 执行同步代码\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- setTimeout ... 入队宏任务队列\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- console.log(\"start\")\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务队列\n\t\t- console.log(\"async1 end\");\n\t- 第一个宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer')\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/ef5bbc4448d8cf8a4e6e7eb3d481257d43632.png)\n\n\t\n5.3 题目三\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n  setTimeout(() => {\n    console.log('timer1')\n  }, 0)\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nsetTimeout(() => {\n  console.log('timer3')\n}, 0)\nconsole.log(\"start\")\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1();\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- setTimeout ... 入队宏任务队列\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t\t- setTimeout ... 入队微任务队列\n\t- setTimeout ... 入队宏任务队列\n\t- console.log(\"start\")\n\t- 当前宏任务中的同步代码已经执行完成，开始执行微任务\n\t- console.log(\"async1 end\");\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer2');\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer3')\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer1')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/40ff5c3620b6ef956afd99a895080cee58816.png)\n\n\n5.4 题目四\n\n```javascript\nasync function fn () {\n  // return await 1234\n  // 等同于\n  return 123\n}\nfn().then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- fn()\n\t\t- return 123\n\t- console.log(res) res --> 123\n\n- 运行结果\n\t- ![题目四运行结果](http://p1.meituan.net/myvideodistribute/01d7e322293346a15fd0c97cb6167dee21159.png)\n\n5.5 **题目五**\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- new Promise ... 等待执行\n\t\t\t- console.log('promise1')\n\t\t\t- 由于 promise 并没有 resolved、rejected，所以一直处在 pending 状态，所以 会一直 await ，await 后的内容也包括 async1 后面的 then，都不会执行\n\t- console.log('srcipt end')\n\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/6da017ef5e2bef76433a90be0f7804c343869.png)\n\n5.6 题目六\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise1 resolve')\n  }).then(res => console.log(res))\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- await new Promise ... 等待 promise 执行\n\t\t\t- console.log('promise1')\n\t\t\t- 其中 promise 状态变为 resolved，将其状态保存起来\n\t\t\t- new Promise then ... 加入微任务队列\n\t\t- console.log('async1 success'); 入队微任务队列\n\t\t- return 'async1 end'\n\t- async1().then ... 入队微任务队列\n\t- console.log('srcipt end')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务队列\n\t- .then(res => console.log(res))\n\t\t- res --> promise1 resolve\n\t- console.log('async1 success'); \n\t- res => console.log(res) res --> 'async1 end'\n\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/478ab1a6c972bd17dab664ba479c1c2859767.png)\n\n\n5.7 题目七\n\n```javascript\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise resolve')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => {\n  console.log(res)\n})\nnew Promise(resolve => {\n  console.log('promise2')\n  setTimeout(() => {\n    console.log('timer')\n  })\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('srcipt start')\n\t- async1()\n\t\t- console.log('async1 start');\n\t\t- await new Promise ...\n\t\t\t- console.log('promise1')\n\t\t\t- 其中 promise 状态变为 resolve，将其保存起来\n\t\t- console.log('async1 success'); 入队微任务队列\n\t\t- return 'async1 end'\n\t- async1().then ... 入队微任务队列\n\t- new Promise，执行该构造函数代码\n\t\t- console.log('promise2')\n\t\t- setTimeout ... 加入宏任务队列\n\t- 当前宏任务中的同步代码执行完，开始执行微任务\n\t- console.log('async1 success');\n\t- console.log(res) res --> 'async1 end'\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- console.log('timer')\n\n- 运行结果\n\t- ![题目七运行结果](http://p0.meituan.net/myvideodistribute/59c38ec9bef1877e27b64b056fd9258663945.png)\n\n5.8 题目八\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2\");\n}\n\nconsole.log(\"script start\");\n\nsetTimeout(function() {\n  console.log(\"setTimeout\");\n}, 0);\n\nasync1();\n\nnew Promise(function(resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function() {\n  console.log(\"promise2\");\n});\nconsole.log('script end')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log(\"script start\");\n\t- setTimeout ... 入队宏任务队列\n\t- async1()\n\t\t- console.log(\"async1 start\");\n\t\t- await async2();\n\t\t\t- console.log(\"async2\");\n\t\t- console.log(\"async1 end\"); 入队微任务队列\n\t- new promise，执行该构造函数\n\t\t- console.log(\"promise1\");\n\t\t- 其中 promise 状态改变为 resolve，将其保存\n\t- new promise then ... 入队微任务队列\n\t- console.log('script end')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- console.log(\"async1 end\");\n\t- new Promise then ... \n\t\t- console.log(\"promise2\");\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t\t- console.log(\"setTimeout\");\n\n- 运行结果\n\t- ![题目八运行结果](http://p0.meituan.net/myvideodistribute/05bcc26014cb3a56f1da38df3e28141974246.png)\n\n5.9 题目九\n\n```javascript\nasync function testSometing() {\n  console.log(\"执行testSometing\");\n  return \"testSometing\";\n}\n\nasync function testAsync() {\n  console.log(\"执行testAsync\");\n  return Promise.resolve(\"hello async\");\n}\n\nasync function test() {\n  console.log(\"test start...\");\n  const v1 = await testSometing();\n  console.log(v1);\n  const v2 = await testAsync();\n  console.log(v2);\n  console.log(v1, v2);\n}\n\ntest();\n\nvar promise = new Promise(resolve => {\n  console.log(\"promise start...\");\n  resolve(\"promise\");\n});\npromise.then(val => console.log(val));\n\nconsole.log(\"test end...\");\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- test()\n\t\t- console.log(\"test start...\");\n\t\t- await testSometing()\n\t\t\t- console.log(\"执行testSometing\");\n\t\t\t- \"testSometing\";\n\t\t\t- const v1 = \"testSometing\";\n\t\t- console.log(\"testSometing\"); 入队微任务队列\n\t\t- await testAsync() 入队微任务队列\n\t\t- console.log(v2); 入队微任务队列\n\t\t- console.log(v1, v2); 入队微任务队列\n\t\t- new Promise, 执行该构造函数代码\n\t\t\t- console.log(\"promise start...\");\n\t\t\t- 其 promise 状态变为 resolve,将其保存\n\t\t- promise.then ... 入队微任务队列\n\t\t- console.log(\"test end...\");\n\t\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t\t\t- console.log(\"testSometing\"); v1 --> \"testSometing\"\n\t\t\t- await testAsync() \n\t\t\t\t- console.log(\"执行testAsync\");\n\t\t\t\t- return Promise.resolve(\"hello async\");\n\t\t\t\t- Promise.resolve(\"hello async\") ... 入队微任务队列\n\t\t\t- console.log(v2); ... 重新入队微任务队列\n\t\t\t- console.log(v1, v2); 重新入队微任务队列\n\t\t\t- promise.then ... \n\t\t\t\t- console.log(val) val --> promise\n\t\t\t- Promise.resolve(\"hello async\") return \"hello async\"\n\t\t\t- v2 = \"hello async\"\n\t\t\t- console.log(v2);\n\t\t\t- console.log(\"hello async\");\n\t\t\t- console.log(v1, v2);\n\t\t\t\t- console.log(\"执行testAsync\", \"hello async\");\n\n\n\n- 运行结果\n\t- ![题目九运行结果](http://p0.meituan.net/myvideodistribute/09e8b0ae4cadad1f803049e6545d73f091754.png)\n\n\t\n\n### async 处理错误\n6.1 **题目一**\n\n```javascript\nasync function async1 () {\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n}\nasync function async2 () {\n  return new Promise((resolve, reject) => {\n    console.log('async2')\n    reject('error')\n  })\n}\nasync1().then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1()\n\t\t- await async2();\n\t\t\t- new Promise，执行该构造函数\n\t\t\t\t- console.log('async2')\n\t\t\t\t- reject('error') promise 状态变为 reject,将其保存起来，并向上抛\n\t\t\t\t- Promise {<rejected>: \"error\"}\n\n- 运行结果\n\t- ![题目一运行结果](http://p1.meituan.net/myvideodistribute/b3955dc674cf405c9a60de9062b525c736256.png)\n\n\t\n6.2 题目二\n\n```javascript\nasync function async1 () {\n  try {\n    await Promise.reject('error!!!')\n  } catch(e) {\n    console.log(e)\n  }\n  console.log('async1');\n  return Promise.resolve('async1 success')\n}\nasync1().then(res => console.log(res))\nconsole.log('script start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- async1()\n\t\t- Promise.reject('error!!!')\n\t\t\t- promise 状态变为 reject，将其状态保存起来，向上抛错\n\t\t- catch 错误 入队微任务队列\n\t\t- console.log('async1'); 入队微任务队列\n\t\t- return Promise.resolve('async1 success')\n\t- async1().then ... 入队微任务队列\n\t- console.log('script start')\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- console.log(e) e --> 'error!!!'\n\t- console.log('async1');\n\t- console.log(res) res --> 'async1 success'\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/fc960e772e0fbca1fdf8640c8774999640316.png)\n\n\n### 综合题\n\n7.1 题目一\n\n```javascript\nconst first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- first()\n\t\t- return 一个 promise 对象。先执行 new Promise，该构造函数代码\n\t\t- console.log(3);\n\t\t- resolve(2)\n\t\t\t- 该 promise 状态变为 resolved，保存起来\n\t\t- p new Promise, 执行该构造函数代码\n\t\t\t-  console.log(7);\n\t\t\t-  setTimeout ... 入队宏任务队列\n\t\t\t-  resolve(1);\n\t\t\t-  该 promise 状态变为 resolve ,保存起来\n\t\t- p.then ... 入队微任务队列\n\t- first().then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(4);\n\t- 该宏任务中的同步代码都执行完成，开始执行微任务队列\n\t- p.then\n\t- console.log(arg) arg --> 1\n\t- p.then 入队微任务队列\n\t- console.log(arg) arg --> 2\n\t- 当前宏任务中的代码都执行完成，开始执行下一个宏任务\n\t- setTimeout ...\n\t\t- console.log(5);\n\t\t- resolve(6); promise p 的状态已经改变，无法再进行更改，所以该行代码，无效\n\t\t- console.log(p) p --> 1\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/de321f1169135bf57ef98b6dd3346ada56428.png)\n\n\n7.2 题目二\n\n```javascript\nconst async1 = async () => {\n  console.log('async1');\n  setTimeout(() => {\n    console.log('timer1')\n  }, 2000)\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 end')\n  return 'async1 success'\n} \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => {\n  console.log('timer2')\n}, 1000)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- console.log('script start');\n\t- async1()\n\t\t- console.log('async1');\n\t\t- setTimeout ... 2000入队宏任务队列\n\t\t- await new Promise\n\t\t\t- 执行该构造函数代码\n\t\t\t\t- console.log('promise1')\n\t\t- 由于该 promise 没有被 resolve、reject，一直处在 pending，因此 后面的\n\t\t\t- console.log('async1 end') 入队微任务队列\n\t\t\t- return 'async1 success'\n\t\t\t- 均不执行\n\t- async1().then ... 入队微任务队列\n\t- console.log('script end');\n\t- Promise.resolve(1)\n\t\t- 该 promie 状态变为1，保存起来\n\t- Promise.resolve(1).then ... 入队微任务队列\n\t- setTimeout ... 1000入队宏任务队列\n\t- 当前宏任务中的同步代码执行完成，开始执行微任务\n\t- Promise.resolve(1).then ... \n\t\t- 由于 .then(2) .then(Promise.resolve(3)) .catch(4) 一个是数字，一个是对象，会发生值透传现象\n\t\t- console.log(res) res --> 1\n\t- 当前宏任务执行完成，开始执行下一个宏任务\n\t- setTimeout ... 1000\n\t\t- console.log('timer2')\n\t- setTimeout ... 2000\n\t\t- - console.log('timer1')\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/18d87ace8b51f98e4e30f55c17d0c4ff93076.png)\n\n7.3 题目三\n\n```javascript\nconst p1 = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve('resolve3');\n    console.log('timer1')\n  }, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n}).then(res => {\n  console.log(res)\n  setTimeout(() => {\n    console.log(p1)\n  }, 1000)\n}).finally(res => {\n  console.log('finally', res)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- new Promise，执行该构造函数代码\n\t\t- setTimeout ... 入队宏任务队列\n\t\t- resolve('resovle1');\n\t\t- promise 状态变为 resolve1，并保存起来\n\t- Promise.then ...\n\t\t- console.log(res) res --> 'resovle1'\n\t\t- setTimeout ... 入队宏任务队列\n\t- Promise.finally ...\n\t\t- console.log('finally', res) res --> undefined\n\t- 当前宏任务中的代码全部执行完成，开始执行下一个宏任务\n\t- resolve('resolve3'); promise 状态一旦改变，无法更改\n\t- console.log('timer1')\n\t- 当前宏任务中的代码全部执行完成，开始执行下一个宏任务\n\t- console.log(p1) p1 --> .finally的返回值 --> undefined\n\n- 结论\n\t- **finally 不管 Promise 的状态是 resolved 还是 rejected 都会执行，且它的回调函数是接收不到 Promise 的结果的**，所以 finally() 中的 res 是一个迷惑项\n\t\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/7be692142d758f1d65ad549a1b106f4146102.png)\n\n\t\n## 参考文献\n- [题目来源](https://juejin.im/post/5e58c618e51d4526ed66b5cf)\n\t\t\t\t\n\t\t\t\t\n## 写在后面\n\t\t\t\t\n- 祝大家多多发财","slug":"Javascrtip-运行机制（二）","published":1,"updated":"2020-05-03T14:34:13.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xc00301wp3h583904e","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>嗯，发现 运行机制 的面试题是真的多。。😓</li>\n<li>那这就是，最末篇吧</li>\n<li>加油 Elle 🤦‍♀️</li>\n<li>五一倒计时 2 天</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async / await\"></a>async / await</h3><p>5.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>执行同步代码</li>\n<li>async1();<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>等待执行 async2 结果</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(‘start’)</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 </li>\n<li>console.log(“async1 end”);</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>结论</p>\n<ul>\n<li>在这里，可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」</li>\n</ul>\n</li>\n<li><p>等同于</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 原来代码</span></span><br><span class=\"line\">  <span class=\"comment\">// await async2();</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(\"async1 end\");</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 转换后代码</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f08b1b409f667c37f2a9dae1bf0b491e36782.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1();<ul>\n<li>执行同步代码</li>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(“start”)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务队列<ul>\n<li>console.log(“async1 end”);</li>\n</ul>\n</li>\n<li>第一个宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ef5bbc4448d8cf8a4e6e7eb3d481257d43632.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer3'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1();<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n<li>setTimeout … 入队微任务队列</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“start”)</li>\n<li>当前宏任务中的同步代码已经执行完成，开始执行微任务</li>\n<li>console.log(“async1 end”);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer2’);</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer3’)</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer1’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/40ff5c3620b6ef956afd99a895080cee58816.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return await 1234</span></span><br><span class=\"line\">  <span class=\"comment\">// 等同于</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>fn()<ul>\n<li>return 123</li>\n</ul>\n</li>\n<li>console.log(res) res –&gt; 123</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/01d7e322293346a15fd0c97cb6167dee21159.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.5 <strong>题目五</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>new Promise … 等待执行<ul>\n<li>console.log(‘promise1’)</li>\n<li>由于 promise 并没有 resolved、rejected，所以一直处在 pending 状态，所以 会一直 await ，await 后的内容也包括 async1 后面的 then，都不会执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>console.log(‘srcipt end’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6da017ef5e2bef76433a90be0f7804c343869.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'promise1 resolve'</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>await new Promise … 等待 promise 执行<ul>\n<li>console.log(‘promise1’)</li>\n<li>其中 promise 状态变为 resolved，将其状态保存起来</li>\n<li>new Promise then … 加入微任务队列</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); 入队微任务队列</li>\n<li>return ‘async1 end’</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘srcipt end’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务队列</li>\n<li>.then(res =&gt; console.log(res))<ul>\n<li>res –&gt; promise1 resolve</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); </li>\n<li>res =&gt; console.log(res) res –&gt; ‘async1 end’</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/478ab1a6c972bd17dab664ba479c1c2859767.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.7 题目七</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'promise resolve'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>await new Promise …<ul>\n<li>console.log(‘promise1’)</li>\n<li>其中 promise 状态变为 resolve，将其保存起来</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); 入队微任务队列</li>\n<li>return ‘async1 end’</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>new Promise，执行该构造函数代码<ul>\n<li>console.log(‘promise2’)</li>\n<li>setTimeout … 加入宏任务队列</li>\n</ul>\n</li>\n<li>当前宏任务中的同步代码执行完，开始执行微任务</li>\n<li>console.log(‘async1 success’);</li>\n<li>console.log(res) res –&gt; ‘async1 end’</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/59c38ec9bef1877e27b64b056fd9258663945.png\" alt=\"题目七运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.8 题目八</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"script start\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"setTimeout\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>);</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(“script start”);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>async1()<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>new promise，执行该构造函数<ul>\n<li>console.log(“promise1”);</li>\n<li>其中 promise 状态改变为 resolve，将其保存</li>\n</ul>\n</li>\n<li>new promise then … 入队微任务队列</li>\n<li>console.log(‘script end’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>console.log(“async1 end”);</li>\n<li>new Promise then … <ul>\n<li>console.log(“promise2”);</li>\n</ul>\n</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务<ul>\n<li>console.log(“setTimeout”);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/05bcc26014cb3a56f1da38df3e28141974246.png\" alt=\"题目八运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.9 题目九</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testSometing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行testSometing\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"testSometing\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行testAsync\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"hello async\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test start...\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> testSometing();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v1, v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise start...\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"promise\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"test end...\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>test()<ul>\n<li>console.log(“test start…”);</li>\n<li>await testSometing()<ul>\n<li>console.log(“执行testSometing”);</li>\n<li>“testSometing”;</li>\n<li>const v1 = “testSometing”;</li>\n</ul>\n</li>\n<li>console.log(“testSometing”); 入队微任务队列</li>\n<li>await testAsync() 入队微任务队列</li>\n<li>console.log(v2); 入队微任务队列</li>\n<li>console.log(v1, v2); 入队微任务队列</li>\n<li>new Promise, 执行该构造函数代码<ul>\n<li>console.log(“promise start…”);</li>\n<li>其 promise 状态变为 resolve,将其保存</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>console.log(“test end…”);</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务<ul>\n<li>console.log(“testSometing”); v1 –&gt; “testSometing”</li>\n<li>await testAsync() <ul>\n<li>console.log(“执行testAsync”);</li>\n<li>return Promise.resolve(“hello async”);</li>\n<li>Promise.resolve(“hello async”) … 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(v2); … 重新入队微任务队列</li>\n<li>console.log(v1, v2); 重新入队微任务队列</li>\n<li>promise.then … <ul>\n<li>console.log(val) val –&gt; promise</li>\n</ul>\n</li>\n<li>Promise.resolve(“hello async”) return “hello async”</li>\n<li>v2 = “hello async”</li>\n<li>console.log(v2);</li>\n<li>console.log(“hello async”);</li>\n<li>console.log(v1, v2);<ul>\n<li>console.log(“执行testAsync”, “hello async”);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/09e8b0ae4cadad1f803049e6545d73f091754.png\" alt=\"题目九运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"async-处理错误\"><a href=\"#async-处理错误\" class=\"headerlink\" title=\"async 处理错误\"></a>async 处理错误</h3><p>6.1 <strong>题目一</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 success'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async2'</span>)</span><br><span class=\"line\">    reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1()<ul>\n<li>await async2();<ul>\n<li>new Promise，执行该构造函数<ul>\n<li>console.log(‘async2’)</li>\n<li>reject(‘error’) promise 状态变为 reject,将其保存起来，并向上抛</li>\n<li>Promise {<rejected>: “error”}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/b3955dc674cf405c9a60de9062b525c736256.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>6.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'async1 success'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1()<ul>\n<li>Promise.reject(‘error!!!’)<ul>\n<li>promise 状态变为 reject，将其状态保存起来，向上抛错</li>\n</ul>\n</li>\n<li>catch 错误 入队微任务队列</li>\n<li>console.log(‘async1’); 入队微任务队列</li>\n<li>return Promise.resolve(‘async1 success’)</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘script start’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>console.log(e) e –&gt; ‘error!!!’</li>\n<li>console.log(‘async1’);</li>\n<li>console.log(res) res –&gt; ‘async1 success’</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/fc960e772e0fbca1fdf8640c8774999640316.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"综合题\"><a href=\"#综合题\" class=\"headerlink\" title=\"综合题\"></a>综合题</h3><p>7.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">            resolve(<span class=\"number\">6</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    p.then(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">first().then(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>first()<ul>\n<li>return 一个 promise 对象。先执行 new Promise，该构造函数代码</li>\n<li>console.log(3);</li>\n<li>resolve(2)<ul>\n<li>该 promise 状态变为 resolved，保存起来</li>\n</ul>\n</li>\n<li>p new Promise, 执行该构造函数代码<ul>\n<li>console.log(7);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>resolve(1);</li>\n<li>该 promise 状态变为 resolve ,保存起来</li>\n</ul>\n</li>\n<li>p.then … 入队微任务队列</li>\n</ul>\n</li>\n<li>first().then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>该宏任务中的同步代码都执行完成，开始执行微任务队列</li>\n<li>p.then</li>\n<li>console.log(arg) arg –&gt; 1</li>\n<li>p.then 入队微任务队列</li>\n<li>console.log(arg) arg –&gt; 2</li>\n<li>当前宏任务中的代码都执行完成，开始执行下一个宏任务</li>\n<li>setTimeout …<ul>\n<li>console.log(5);</li>\n<li>resolve(6); promise p 的状态已经改变，无法再进行更改，所以该行代码，无效</li>\n<li>console.log(p) p –&gt; 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/de321f1169135bf57ef98b6dd3346ada56428.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>7.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> async1 = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 end'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 success'</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .catch(<span class=\"number\">4</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘script start’);</li>\n<li>async1()<ul>\n<li>console.log(‘async1’);</li>\n<li>setTimeout … 2000入队宏任务队列</li>\n<li>await new Promise<ul>\n<li>执行该构造函数代码<ul>\n<li>console.log(‘promise1’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>由于该 promise 没有被 resolve、reject，一直处在 pending，因此 后面的<ul>\n<li>console.log(‘async1 end’) 入队微任务队列</li>\n<li>return ‘async1 success’</li>\n<li>均不执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘script end’);</li>\n<li>Promise.resolve(1)<ul>\n<li>该 promie 状态变为1，保存起来</li>\n</ul>\n</li>\n<li>Promise.resolve(1).then … 入队微任务队列</li>\n<li>setTimeout … 1000入队宏任务队列</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>Promise.resolve(1).then … <ul>\n<li>由于 .then(2) .then(Promise.resolve(3)) .catch(4) 一个是数字，一个是对象，会发生值透传现象</li>\n<li>console.log(res) res –&gt; 1</li>\n</ul>\n</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>setTimeout … 1000<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li>setTimeout … 2000<ul>\n<li><ul>\n<li>console.log(‘timer1’)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/18d87ace8b51f98e4e30f55c17d0c4ff93076.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>7.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'resolve3'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  resolve(<span class=\"string\">'resovle1'</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'resolve2'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).finally(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>, res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>new Promise，执行该构造函数代码<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>resolve(‘resovle1’);</li>\n<li>promise 状态变为 resolve1，并保存起来</li>\n</ul>\n</li>\n<li>Promise.then …<ul>\n<li>console.log(res) res –&gt; ‘resovle1’</li>\n<li>setTimeout … 入队宏任务队列</li>\n</ul>\n</li>\n<li>Promise.finally …<ul>\n<li>console.log(‘finally’, res) res –&gt; undefined</li>\n</ul>\n</li>\n<li>当前宏任务中的代码全部执行完成，开始执行下一个宏任务</li>\n<li>resolve(‘resolve3’); promise 状态一旦改变，无法更改</li>\n<li>console.log(‘timer1’)</li>\n<li>当前宏任务中的代码全部执行完成，开始执行下一个宏任务</li>\n<li>console.log(p1) p1 –&gt; .finally的返回值 –&gt; undefined</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>finally 不管 Promise 的状态是 resolved 还是 rejected 都会执行，且它的回调函数是接收不到 Promise 的结果的</strong>，所以 finally() 中的 res 是一个迷惑项</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7be692142d758f1d65ad549a1b106f4146102.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://juejin.im/post/5e58c618e51d4526ed66b5cf\" target=\"_blank\" rel=\"noopener\">题目来源</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>嗯，发现 运行机制 的面试题是真的多。。😓</li>\n<li>那这就是，最末篇吧</li>\n<li>加油 Elle 🤦‍♀️</li>\n<li>五一倒计时 2 天</li>\n</ul>","more":"<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async / await\"></a>async / await</h3><p>5.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>执行同步代码</li>\n<li>async1();<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>等待执行 async2 结果</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(‘start’)</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 </li>\n<li>console.log(“async1 end”);</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>结论</p>\n<ul>\n<li>在这里，可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」</li>\n</ul>\n</li>\n<li><p>等同于</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 原来代码</span></span><br><span class=\"line\">  <span class=\"comment\">// await async2();</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(\"async1 end\");</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 转换后代码</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f08b1b409f667c37f2a9dae1bf0b491e36782.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1();<ul>\n<li>执行同步代码</li>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(“start”)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务队列<ul>\n<li>console.log(“async1 end”);</li>\n</ul>\n</li>\n<li>第一个宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ef5bbc4448d8cf8a4e6e7eb3d481257d43632.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1();</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer3'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1();<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n<li>setTimeout … 入队微任务队列</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(“start”)</li>\n<li>当前宏任务中的同步代码已经执行完成，开始执行微任务</li>\n<li>console.log(“async1 end”);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer2’);</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer3’)</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer1’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/40ff5c3620b6ef956afd99a895080cee58816.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return await 1234</span></span><br><span class=\"line\">  <span class=\"comment\">// 等同于</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>fn()<ul>\n<li>return 123</li>\n</ul>\n</li>\n<li>console.log(res) res –&gt; 123</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/01d7e322293346a15fd0c97cb6167dee21159.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.5 <strong>题目五</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>new Promise … 等待执行<ul>\n<li>console.log(‘promise1’)</li>\n<li>由于 promise 并没有 resolved、rejected，所以一直处在 pending 状态，所以 会一直 await ，await 后的内容也包括 async1 后面的 then，都不会执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>console.log(‘srcipt end’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6da017ef5e2bef76433a90be0f7804c343869.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'promise1 resolve'</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>await new Promise … 等待 promise 执行<ul>\n<li>console.log(‘promise1’)</li>\n<li>其中 promise 状态变为 resolved，将其状态保存起来</li>\n<li>new Promise then … 加入微任务队列</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); 入队微任务队列</li>\n<li>return ‘async1 end’</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘srcipt end’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务队列</li>\n<li>.then(res =&gt; console.log(res))<ul>\n<li>res –&gt; promise1 resolve</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); </li>\n<li>res =&gt; console.log(res) res –&gt; ‘async1 end’</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/478ab1a6c972bd17dab664ba479c1c2859767.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.7 题目七</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'promise resolve'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 success'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 end'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'srcipt start'</span>)</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘srcipt start’)</li>\n<li>async1()<ul>\n<li>console.log(‘async1 start’);</li>\n<li>await new Promise …<ul>\n<li>console.log(‘promise1’)</li>\n<li>其中 promise 状态变为 resolve，将其保存起来</li>\n</ul>\n</li>\n<li>console.log(‘async1 success’); 入队微任务队列</li>\n<li>return ‘async1 end’</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>new Promise，执行该构造函数代码<ul>\n<li>console.log(‘promise2’)</li>\n<li>setTimeout … 加入宏任务队列</li>\n</ul>\n</li>\n<li>当前宏任务中的同步代码执行完，开始执行微任务</li>\n<li>console.log(‘async1 success’);</li>\n<li>console.log(res) res –&gt; ‘async1 end’</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>console.log(‘timer’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/59c38ec9bef1877e27b64b056fd9258663945.png\" alt=\"题目七运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.8 题目八</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"script start\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"setTimeout\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>);</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(“script start”);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>async1()<ul>\n<li>console.log(“async1 start”);</li>\n<li>await async2();<ul>\n<li>console.log(“async2”);</li>\n</ul>\n</li>\n<li>console.log(“async1 end”); 入队微任务队列</li>\n</ul>\n</li>\n<li>new promise，执行该构造函数<ul>\n<li>console.log(“promise1”);</li>\n<li>其中 promise 状态改变为 resolve，将其保存</li>\n</ul>\n</li>\n<li>new promise then … 入队微任务队列</li>\n<li>console.log(‘script end’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>console.log(“async1 end”);</li>\n<li>new Promise then … <ul>\n<li>console.log(“promise2”);</li>\n</ul>\n</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务<ul>\n<li>console.log(“setTimeout”);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/05bcc26014cb3a56f1da38df3e28141974246.png\" alt=\"题目八运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>5.9 题目九</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testSometing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行testSometing\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"testSometing\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行testAsync\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"hello async\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test start...\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v1 = <span class=\"keyword\">await</span> testSometing();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v2 = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v1, v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise start...\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"promise\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"test end...\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分析<ul>\n<li>代码从上至下开始执行</li>\n<li>test()<ul>\n<li>console.log(“test start…”);</li>\n<li>await testSometing()<ul>\n<li>console.log(“执行testSometing”);</li>\n<li>“testSometing”;</li>\n<li>const v1 = “testSometing”;</li>\n</ul>\n</li>\n<li>console.log(“testSometing”); 入队微任务队列</li>\n<li>await testAsync() 入队微任务队列</li>\n<li>console.log(v2); 入队微任务队列</li>\n<li>console.log(v1, v2); 入队微任务队列</li>\n<li>new Promise, 执行该构造函数代码<ul>\n<li>console.log(“promise start…”);</li>\n<li>其 promise 状态变为 resolve,将其保存</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>console.log(“test end…”);</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务<ul>\n<li>console.log(“testSometing”); v1 –&gt; “testSometing”</li>\n<li>await testAsync() <ul>\n<li>console.log(“执行testAsync”);</li>\n<li>return Promise.resolve(“hello async”);</li>\n<li>Promise.resolve(“hello async”) … 入队微任务队列</li>\n</ul>\n</li>\n<li>console.log(v2); … 重新入队微任务队列</li>\n<li>console.log(v1, v2); 重新入队微任务队列</li>\n<li>promise.then … <ul>\n<li>console.log(val) val –&gt; promise</li>\n</ul>\n</li>\n<li>Promise.resolve(“hello async”) return “hello async”</li>\n<li>v2 = “hello async”</li>\n<li>console.log(v2);</li>\n<li>console.log(“hello async”);</li>\n<li>console.log(v1, v2);<ul>\n<li>console.log(“执行testAsync”, “hello async”);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/09e8b0ae4cadad1f803049e6545d73f091754.png\" alt=\"题目九运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"async-处理错误\"><a href=\"#async-处理错误\" class=\"headerlink\" title=\"async 处理错误\"></a>async 处理错误</h3><p>6.1 <strong>题目一</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 success'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async2'</span>)</span><br><span class=\"line\">    reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1()<ul>\n<li>await async2();<ul>\n<li>new Promise，执行该构造函数<ul>\n<li>console.log(‘async2’)</li>\n<li>reject(‘error’) promise 状态变为 reject,将其保存起来，并向上抛</li>\n<li>Promise {<rejected>: “error”}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/b3955dc674cf405c9a60de9062b525c736256.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>6.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'async1 success'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>async1()<ul>\n<li>Promise.reject(‘error!!!’)<ul>\n<li>promise 状态变为 reject，将其状态保存起来，向上抛错</li>\n</ul>\n</li>\n<li>catch 错误 入队微任务队列</li>\n<li>console.log(‘async1’); 入队微任务队列</li>\n<li>return Promise.resolve(‘async1 success’)</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘script start’)</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>console.log(e) e –&gt; ‘error!!!’</li>\n<li>console.log(‘async1’);</li>\n<li>console.log(res) res –&gt; ‘async1 success’</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/fc960e772e0fbca1fdf8640c8774999640316.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"综合题\"><a href=\"#综合题\" class=\"headerlink\" title=\"综合题\"></a>综合题</h3><p>7.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> first = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">            resolve(<span class=\"number\">6</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">    p.then(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">first().then(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>first()<ul>\n<li>return 一个 promise 对象。先执行 new Promise，该构造函数代码</li>\n<li>console.log(3);</li>\n<li>resolve(2)<ul>\n<li>该 promise 状态变为 resolved，保存起来</li>\n</ul>\n</li>\n<li>p new Promise, 执行该构造函数代码<ul>\n<li>console.log(7);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>resolve(1);</li>\n<li>该 promise 状态变为 resolve ,保存起来</li>\n</ul>\n</li>\n<li>p.then … 入队微任务队列</li>\n</ul>\n</li>\n<li>first().then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>该宏任务中的同步代码都执行完成，开始执行微任务队列</li>\n<li>p.then</li>\n<li>console.log(arg) arg –&gt; 1</li>\n<li>p.then 入队微任务队列</li>\n<li>console.log(arg) arg –&gt; 2</li>\n<li>当前宏任务中的代码都执行完成，开始执行下一个宏任务</li>\n<li>setTimeout …<ul>\n<li>console.log(5);</li>\n<li>resolve(6); promise p 的状态已经改变，无法再进行更改，所以该行代码，无效</li>\n<li>console.log(p) p –&gt; 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/de321f1169135bf57ef98b6dd3346ada56428.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>7.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> async1 = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1'</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 end'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'async1 success'</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\">async1().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .catch(<span class=\"number\">4</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>console.log(‘script start’);</li>\n<li>async1()<ul>\n<li>console.log(‘async1’);</li>\n<li>setTimeout … 2000入队宏任务队列</li>\n<li>await new Promise<ul>\n<li>执行该构造函数代码<ul>\n<li>console.log(‘promise1’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>由于该 promise 没有被 resolve、reject，一直处在 pending，因此 后面的<ul>\n<li>console.log(‘async1 end’) 入队微任务队列</li>\n<li>return ‘async1 success’</li>\n<li>均不执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>async1().then … 入队微任务队列</li>\n<li>console.log(‘script end’);</li>\n<li>Promise.resolve(1)<ul>\n<li>该 promie 状态变为1，保存起来</li>\n</ul>\n</li>\n<li>Promise.resolve(1).then … 入队微任务队列</li>\n<li>setTimeout … 1000入队宏任务队列</li>\n<li>当前宏任务中的同步代码执行完成，开始执行微任务</li>\n<li>Promise.resolve(1).then … <ul>\n<li>由于 .then(2) .then(Promise.resolve(3)) .catch(4) 一个是数字，一个是对象，会发生值透传现象</li>\n<li>console.log(res) res –&gt; 1</li>\n</ul>\n</li>\n<li>当前宏任务执行完成，开始执行下一个宏任务</li>\n<li>setTimeout … 1000<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li>setTimeout … 2000<ul>\n<li><ul>\n<li>console.log(‘timer1’)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/18d87ace8b51f98e4e30f55c17d0c4ff93076.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>7.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'resolve3'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  resolve(<span class=\"string\">'resovle1'</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'resolve2'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).finally(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>, res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>new Promise，执行该构造函数代码<ul>\n<li>setTimeout … 入队宏任务队列</li>\n<li>resolve(‘resovle1’);</li>\n<li>promise 状态变为 resolve1，并保存起来</li>\n</ul>\n</li>\n<li>Promise.then …<ul>\n<li>console.log(res) res –&gt; ‘resovle1’</li>\n<li>setTimeout … 入队宏任务队列</li>\n</ul>\n</li>\n<li>Promise.finally …<ul>\n<li>console.log(‘finally’, res) res –&gt; undefined</li>\n</ul>\n</li>\n<li>当前宏任务中的代码全部执行完成，开始执行下一个宏任务</li>\n<li>resolve(‘resolve3’); promise 状态一旦改变，无法更改</li>\n<li>console.log(‘timer1’)</li>\n<li>当前宏任务中的代码全部执行完成，开始执行下一个宏任务</li>\n<li>console.log(p1) p1 –&gt; .finally的返回值 –&gt; undefined</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>finally 不管 Promise 的状态是 resolved 还是 rejected 都会执行，且它的回调函数是接收不到 Promise 的结果的</strong>，所以 finally() 中的 res 是一个迷惑项</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7be692142d758f1d65ad549a1b106f4146102.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://juejin.im/post/5e58c618e51d4526ed66b5cf\" target=\"_blank\" rel=\"noopener\">题目来源</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Realm","date":"2020-05-08T01:45:15.000Z","description":["Javascript -- Realm"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n\n- Before it is evaluated, all ECMAScript code must be associated with a realm. Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.\n\n<!-- more -->\n\n- 从逻辑上讲，堆栈中的每个上下文总是与其 realm 相关联\n\t- 让我们看看单独的realm的例子，使用vm模块：\n\t\n\t\t```javascript\n\t\tconst vm = require('vm');\n\t\t\n\t\t// First realm, and its global:\n\t\tconst realm1 = vm.createContext({x: 10, console});\n\t\t\n\t\t// Second realm, and its global:\n\t\tconst realm2 = vm.createContext({x: 20, console});\n\t\t\n\t\t// Code to execute:\n\t\tconst code = `console.log(x);`;\n\t\t\n\t\tvm.runInContext(code, realm1); // 10\n\t\tvm.runInContext(code, realm2); // 20\n\t\t```\n\t- ![realm](http://p0.meituan.net/myvideodistribute/5055c18e52edec4cd447d7acfd4a8278158263.png)\n\n\n## 实践记录\n\n- JavaScript 中所有的固有对象\n\n\t```javascript\n\t\n\n    let objects = [\n      \"eval\",\n      \"isFinite\",\n      \"isNaN\",\n      \"parseFloat\",\n      \"parseInt\",\n      \"decodeURI\",\n      \"decodeURIComponent\",\n      \"encodeURI\",\n      \"encodeURIComponent\",\n      \"Array\",\n      \"Date\",\n      \"RegExp\",\n      \"Promise\",\n      \"Proxy\",\n      \"Map\",\n      \"WeakMap\",\n      \"Set\",\n      \"WeakSet\",\n      \"Function\",\n      \"Boolean\",\n      \"String\",\n      \"Number\",\n      \"Symbol\",\n      \"Object\",\n      \"Error\",\n      \"EvalError\",\n      \"RangeError\",\n      \"ReferenceError\",\n      \"SyntaxError\",\n      \"TypeError\",\n      \"URIError\",\n      \"ArrayBuffer\",\n      \"SharedArrayBuffer\",\n      \"DataView\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int8Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Uint8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8ClampedArray\",\n      \"Atomics\",\n      \"JSON\",\n      \"Math\",\n      \"Reflect\"\n    ];\n\n    const set = new Set();\n\n    const globalObject = []\n\n    for (let i of objects) {\n      globalObject.push({\n        object: this[i],\n        path: [i]\n      })\n    }\n\n    while (globalObject.length) {\n      const current = globalObject.shift()\n      console.log(current.path.join('.'))\n      if (set.has(current.object))\n        continue;\n      set.add(current.object)\n\n\n\n      let proto = Object.getPrototypeOf(current.object)\n      if (proto) {\n        globalObject.push({\n          path: current.path.concat([\"__proto__\"]),\n          object: proto\n        })\n      }\n\n      for (let p of Object.getOwnPropertyNames(current.object)) {\n        let d = Object.getOwnPropertyDescriptor(current.object, p)\n        if (d.hasOwnProperty(\"value\") && ((d.value !== null && typeof d.value === \"object\") || (typeof d.value === \"function\")) && d.value instanceof Object) {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.value\n          })\n        }\n        if (d.hasOwnProperty(\"get\") && typeof d.get === \"function\") {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.get\n          })\n        }\n        if (d.hasOwnProperty(\"set\") && typeof d.set === \"function\") {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.set\n          })\n        }\n      }\n    }\n\t```\n\t\n- 根据上述代码，进行数据结构方面的格式化\n\t\n\t```javascript\n\t\n    const objects = [\n      \"eval\",\n      \"isFinite\",\n      \"isNaN\",\n      \"parseFloat\",\n      \"parseInt\",\n      \"decodeURI\",\n      \"decodeURIComponent\",\n      \"encodeURI\",\n      \"encodeURIComponent\",\n      \"Array\",\n      \"Date\",\n      \"RegExp\",\n      \"Promise\",\n      \"Proxy\",\n      \"Map\",\n      \"WeakMap\",\n      \"Set\",\n      \"WeakSet\",\n      \"Function\",\n      \"Boolean\",\n      \"String\",\n      \"Number\",\n      \"Symbol\",\n      \"Object\",\n      \"Error\",\n      \"EvalError\",\n      \"RangeError\",\n      \"ReferenceError\",\n      \"SyntaxError\",\n      \"TypeError\",\n      \"URIError\",\n      \"ArrayBuffer\",\n      \"SharedArrayBuffer\",\n      \"DataView\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int8Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Uint8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8ClampedArray\",\n      \"Atomics\",\n      \"JSON\",\n      \"Math\",\n      \"Reflect\"\n    ];\n\n    const set = new Set();\n\n    const globalObject = {\n      id: \"Global Object\",\n      children: [\n\n      ]\n    }\n\n    for (let i of objects) {\n      globalObject.children.push({\n        children: [],\n        id: i\n      })\n    }\n\n\n    for (let i = 0; i < objects.length; i++) {\n      const current = objects[i]\n      if (set.has(objects[i]))\n        continue;\n      set.add(objects[i])\n      for (let p of Object.getOwnPropertyNames(window[objects[i]])) {\n        let d = Object.getOwnPropertyDescriptor(window[objects[i]], p)\n        if (d.hasOwnProperty(\"value\") && ((d.value !== null && typeof d.value === \"object\") || (typeof d.value === \"function\")) && d.value instanceof Object) {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.value)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n        if (d.hasOwnProperty(\"get\") && typeof d.get === \"function\") {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.get)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n        if (d.hasOwnProperty(\"set\") && typeof d.set === \"function\") {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.set)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n      }\n    }\n\t```\n\n  - 处理好的JSON数据  \n\n\t    ```javascrtipt\n\t    {\"id\":\"Global Object\",\"children\":[{\"children\":[],\"id\":\"eval\"},{\"children\":[],\"id\":\"isFinite\"},{\"children\":[],\"id\":\"isNaN\"},{\"children\":[],\"id\":\"parseFloat\"},{\"children\":[],\"id\":\"parseInt\"},{\"children\":[],\"id\":\"decodeURI\"},{\"children\":[],\"id\":\"decodeURIComponent\"},{\"children\":[],\"id\":\"encodeURI\"},{\"children\":[],\"id\":\"encodeURIComponent\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"concat\"},{\"id\":\"copyWithin\"},{\"id\":\"fill\"},{\"id\":\"find\"},{\"id\":\"findIndex\"},{\"id\":\"lastIndexOf\"},{\"id\":\"pop\"},{\"id\":\"push\"},{\"id\":\"reverse\"},{\"id\":\"shift\"},{\"id\":\"unshift\"},{\"id\":\"slice\"},{\"id\":\"sort\"},{\"id\":\"splice\"},{\"id\":\"includes\"},{\"id\":\"indexOf\"},{\"id\":\"join\"},{\"id\":\"keys\"},{\"id\":\"entries\"},{\"id\":\"values\"},{\"id\":\"forEach\"},{\"id\":\"filter\"},{\"id\":\"flat\"},{\"id\":\"flatMap\"},{\"id\":\"map\"},{\"id\":\"every\"},{\"id\":\"some\"},{\"id\":\"reduce\"},{\"id\":\"reduceRight\"},{\"id\":\"toLocaleString\"},{\"id\":\"toString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isArray\"},{\"children\":[],\"id\":\"from\"},{\"children\":[],\"id\":\"of\"}],\"id\":\"Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"toDateString\"},{\"id\":\"toTimeString\"},{\"id\":\"toISOString\"},{\"id\":\"toUTCString\"},{\"id\":\"toGMTString\"},{\"id\":\"getDate\"},{\"id\":\"setDate\"},{\"id\":\"getDay\"},{\"id\":\"getFullYear\"},{\"id\":\"setFullYear\"},{\"id\":\"getHours\"},{\"id\":\"setHours\"},{\"id\":\"getMilliseconds\"},{\"id\":\"setMilliseconds\"},{\"id\":\"getMinutes\"},{\"id\":\"setMinutes\"},{\"id\":\"getMonth\"},{\"id\":\"setMonth\"},{\"id\":\"getSeconds\"},{\"id\":\"setSeconds\"},{\"id\":\"getTime\"},{\"id\":\"setTime\"},{\"id\":\"getTimezoneOffset\"},{\"id\":\"getUTCDate\"},{\"id\":\"setUTCDate\"},{\"id\":\"getUTCDay\"},{\"id\":\"getUTCFullYear\"},{\"id\":\"setUTCFullYear\"},{\"id\":\"getUTCHours\"},{\"id\":\"setUTCHours\"},{\"id\":\"getUTCMilliseconds\"},{\"id\":\"setUTCMilliseconds\"},{\"id\":\"getUTCMinutes\"},{\"id\":\"setUTCMinutes\"},{\"id\":\"getUTCMonth\"},{\"id\":\"setUTCMonth\"},{\"id\":\"getUTCSeconds\"},{\"id\":\"setUTCSeconds\"},{\"id\":\"valueOf\"},{\"id\":\"getYear\"},{\"id\":\"setYear\"},{\"id\":\"toJSON\"},{\"id\":\"toLocaleString\"},{\"id\":\"toLocaleDateString\"},{\"id\":\"toLocaleTimeString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"now\"},{\"children\":[],\"id\":\"parse\"},{\"children\":[],\"id\":\"UTC\"}],\"id\":\"Date\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"exec\"},{\"id\":\"dotAll\"},{\"id\":\"flags\"},{\"id\":\"global\"},{\"id\":\"ignoreCase\"},{\"id\":\"multiline\"},{\"id\":\"source\"},{\"id\":\"sticky\"},{\"id\":\"unicode\"},{\"id\":\"compile\"},{\"id\":\"toString\"},{\"id\":\"test\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"input\"},{\"children\":[],\"id\":\"input\"},{\"children\":[],\"id\":\"$_\"},{\"children\":[],\"id\":\"$_\"},{\"children\":[],\"id\":\"lastMatch\"},{\"children\":[],\"id\":\"lastMatch\"},{\"children\":[],\"id\":\"$&\"},{\"children\":[],\"id\":\"$&\"},{\"children\":[],\"id\":\"lastParen\"},{\"children\":[],\"id\":\"lastParen\"},{\"children\":[],\"id\":\"$+\"},{\"children\":[],\"id\":\"$+\"},{\"children\":[],\"id\":\"leftContext\"},{\"children\":[],\"id\":\"leftContext\"},{\"children\":[],\"id\":\"$`\"},{\"children\":[],\"id\":\"$`\"},{\"children\":[],\"id\":\"rightContext\"},{\"children\":[],\"id\":\"rightContext\"},{\"children\":[],\"id\":\"$'\"},{\"children\":[],\"id\":\"$'\"},{\"children\":[],\"id\":\"$1\"},{\"children\":[],\"id\":\"$1\"},{\"children\":[],\"id\":\"$2\"},{\"children\":[],\"id\":\"$2\"},{\"children\":[],\"id\":\"$3\"},{\"children\":[],\"id\":\"$3\"},{\"children\":[],\"id\":\"$4\"},{\"children\":[],\"id\":\"$4\"},{\"children\":[],\"id\":\"$5\"},{\"children\":[],\"id\":\"$5\"},{\"children\":[],\"id\":\"$6\"},{\"children\":[],\"id\":\"$6\"},{\"children\":[],\"id\":\"$7\"},{\"children\":[],\"id\":\"$7\"},{\"children\":[],\"id\":\"$8\"},{\"children\":[],\"id\":\"$8\"},{\"children\":[],\"id\":\"$9\"},{\"children\":[],\"id\":\"$9\"}],\"id\":\"RegExp\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"then\"},{\"id\":\"catch\"},{\"id\":\"finally\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"all\"},{\"children\":[],\"id\":\"race\"},{\"children\":[],\"id\":\"resolve\"},{\"children\":[],\"id\":\"reject\"},{\"children\":[],\"id\":\"allSettled\"}],\"id\":\"Promise\"},{\"children\":[{\"children\":[],\"id\":\"revocable\"}],\"id\":\"Proxy\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"get\"},{\"id\":\"set\"},{\"id\":\"has\"},{\"id\":\"delete\"},{\"id\":\"clear\"},{\"id\":\"entries\"},{\"id\":\"forEach\"},{\"id\":\"keys\"},{\"id\":\"size\"},{\"id\":\"values\"}],\"id\":\"prototype\"}],\"id\":\"Map\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"delete\"},{\"id\":\"get\"},{\"id\":\"set\"},{\"id\":\"has\"}],\"id\":\"prototype\"}],\"id\":\"WeakMap\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"has\"},{\"id\":\"add\"},{\"id\":\"delete\"},{\"id\":\"clear\"},{\"id\":\"entries\"},{\"id\":\"forEach\"},{\"id\":\"size\"},{\"id\":\"values\"},{\"id\":\"keys\"}],\"id\":\"prototype\"}],\"id\":\"Set\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"delete\"},{\"id\":\"has\"},{\"id\":\"add\"}],\"id\":\"prototype\"}],\"id\":\"WeakSet\"},{\"children\":[{\"children\":[{\"id\":\"arguments\"},{\"id\":\"caller\"},{\"id\":\"constructor\"},{\"id\":\"apply\"},{\"id\":\"bind\"},{\"id\":\"call\"},{\"id\":\"toString\"}],\"id\":\"prototype\"}],\"id\":\"Function\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"}],\"id\":\"prototype\"}],\"id\":\"Boolean\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"anchor\"},{\"id\":\"big\"},{\"id\":\"blink\"},{\"id\":\"bold\"},{\"id\":\"charAt\"},{\"id\":\"charCodeAt\"},{\"id\":\"codePointAt\"},{\"id\":\"concat\"},{\"id\":\"endsWith\"},{\"id\":\"fontcolor\"},{\"id\":\"fontsize\"},{\"id\":\"fixed\"},{\"id\":\"includes\"},{\"id\":\"indexOf\"},{\"id\":\"italics\"},{\"id\":\"lastIndexOf\"},{\"id\":\"link\"},{\"id\":\"localeCompare\"},{\"id\":\"match\"},{\"id\":\"matchAll\"},{\"id\":\"normalize\"},{\"id\":\"padEnd\"},{\"id\":\"padStart\"},{\"id\":\"repeat\"},{\"id\":\"replace\"},{\"id\":\"search\"},{\"id\":\"slice\"},{\"id\":\"small\"},{\"id\":\"split\"},{\"id\":\"strike\"},{\"id\":\"sub\"},{\"id\":\"substr\"},{\"id\":\"substring\"},{\"id\":\"sup\"},{\"id\":\"startsWith\"},{\"id\":\"toString\"},{\"id\":\"trim\"},{\"id\":\"trimStart\"},{\"id\":\"trimLeft\"},{\"id\":\"trimEnd\"},{\"id\":\"trimRight\"},{\"id\":\"toLocaleLowerCase\"},{\"id\":\"toLocaleUpperCase\"},{\"id\":\"toLowerCase\"},{\"id\":\"toUpperCase\"},{\"id\":\"valueOf\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"fromCharCode\"},{\"children\":[],\"id\":\"fromCodePoint\"},{\"children\":[],\"id\":\"raw\"}],\"id\":\"String\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toExponential\"},{\"id\":\"toFixed\"},{\"id\":\"toPrecision\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"},{\"id\":\"toLocaleString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isFinite\"},{\"children\":[],\"id\":\"isInteger\"},{\"children\":[],\"id\":\"isNaN\"},{\"children\":[],\"id\":\"isSafeInteger\"},{\"children\":[],\"id\":\"parseFloat\"},{\"children\":[],\"id\":\"parseInt\"}],\"id\":\"Number\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"},{\"id\":\"description\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"for\"},{\"children\":[],\"id\":\"keyFor\"}],\"id\":\"Symbol\"},{\"children\":[{\"children\":[],\"id\":\"assign\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptor\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptors\"},{\"children\":[],\"id\":\"getOwnPropertyNames\"},{\"children\":[],\"id\":\"getOwnPropertySymbols\"},{\"children\":[],\"id\":\"is\"},{\"children\":[],\"id\":\"preventExtensions\"},{\"children\":[],\"id\":\"seal\"},{\"children\":[],\"id\":\"create\"},{\"children\":[],\"id\":\"defineProperties\"},{\"children\":[],\"id\":\"defineProperty\"},{\"children\":[],\"id\":\"freeze\"},{\"children\":[],\"id\":\"getPrototypeOf\"},{\"children\":[],\"id\":\"setPrototypeOf\"},{\"children\":[],\"id\":\"isExtensible\"},{\"children\":[],\"id\":\"isFrozen\"},{\"children\":[],\"id\":\"isSealed\"},{\"children\":[],\"id\":\"keys\"},{\"children\":[],\"id\":\"entries\"},{\"children\":[],\"id\":\"fromEntries\"},{\"children\":[],\"id\":\"values\"}],\"id\":\"Object\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"},{\"id\":\"toString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"captureStackTrace\"}],\"id\":\"Error\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"EvalError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"RangeError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"ReferenceError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"SyntaxError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"TypeError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"URIError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"byteLength\"},{\"id\":\"slice\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isView\"}],\"id\":\"ArrayBuffer\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"byteLength\"},{\"id\":\"slice\"}],\"id\":\"prototype\"}],\"id\":\"SharedArrayBuffer\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"buffer\"},{\"id\":\"byteLength\"},{\"id\":\"byteOffset\"},{\"id\":\"getInt8\"},{\"id\":\"setInt8\"},{\"id\":\"getUint8\"},{\"id\":\"setUint8\"},{\"id\":\"getInt16\"},{\"id\":\"setInt16\"},{\"id\":\"getUint16\"},{\"id\":\"setUint16\"},{\"id\":\"getInt32\"},{\"id\":\"setInt32\"},{\"id\":\"getUint32\"},{\"id\":\"setUint32\"},{\"id\":\"getFloat32\"},{\"id\":\"setFloat32\"},{\"id\":\"getFloat64\"},{\"id\":\"setFloat64\"},{\"id\":\"getBigInt64\"},{\"id\":\"setBigInt64\"},{\"id\":\"getBigUint64\"},{\"id\":\"setBigUint64\"}],\"id\":\"prototype\"}],\"id\":\"DataView\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Float32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Float64Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int8Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int16Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint8Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint16Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint8ClampedArray\"},{\"children\":[{\"children\":[],\"id\":\"load\"},{\"children\":[],\"id\":\"store\"},{\"children\":[],\"id\":\"add\"},{\"children\":[],\"id\":\"sub\"},{\"children\":[],\"id\":\"and\"},{\"children\":[],\"id\":\"or\"},{\"children\":[],\"id\":\"xor\"},{\"children\":[],\"id\":\"exchange\"},{\"children\":[],\"id\":\"compareExchange\"},{\"children\":[],\"id\":\"isLockFree\"},{\"children\":[],\"id\":\"wait\"},{\"children\":[],\"id\":\"wake\"},{\"children\":[],\"id\":\"notify\"}],\"id\":\"Atomics\"},{\"children\":[{\"children\":[],\"id\":\"parse\"},{\"children\":[],\"id\":\"stringify\"}],\"id\":\"JSON\"},{\"children\":[{\"children\":[],\"id\":\"abs\"},{\"children\":[],\"id\":\"acos\"},{\"children\":[],\"id\":\"acosh\"},{\"children\":[],\"id\":\"asin\"},{\"children\":[],\"id\":\"asinh\"},{\"children\":[],\"id\":\"atan\"},{\"children\":[],\"id\":\"atanh\"},{\"children\":[],\"id\":\"atan2\"},{\"children\":[],\"id\":\"ceil\"},{\"children\":[],\"id\":\"cbrt\"},{\"children\":[],\"id\":\"expm1\"},{\"children\":[],\"id\":\"clz32\"},{\"children\":[],\"id\":\"cos\"},{\"children\":[],\"id\":\"cosh\"},{\"children\":[],\"id\":\"exp\"},{\"children\":[],\"id\":\"floor\"},{\"children\":[],\"id\":\"fround\"},{\"children\":[],\"id\":\"hypot\"},{\"children\":[],\"id\":\"imul\"},{\"children\":[],\"id\":\"log\"},{\"children\":[],\"id\":\"log1p\"},{\"children\":[],\"id\":\"log2\"},{\"children\":[],\"id\":\"log10\"},{\"children\":[],\"id\":\"max\"},{\"children\":[],\"id\":\"min\"},{\"children\":[],\"id\":\"pow\"},{\"children\":[],\"id\":\"random\"},{\"children\":[],\"id\":\"round\"},{\"children\":[],\"id\":\"sign\"},{\"children\":[],\"id\":\"sin\"},{\"children\":[],\"id\":\"sinh\"},{\"children\":[],\"id\":\"sqrt\"},{\"children\":[],\"id\":\"tan\"},{\"children\":[],\"id\":\"tanh\"},{\"children\":[],\"id\":\"trunc\"}],\"id\":\"Math\"},{\"children\":[{\"children\":[],\"id\":\"defineProperty\"},{\"children\":[],\"id\":\"deleteProperty\"},{\"children\":[],\"id\":\"apply\"},{\"children\":[],\"id\":\"construct\"},{\"children\":[],\"id\":\"get\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptor\"},{\"children\":[],\"id\":\"getPrototypeOf\"},{\"children\":[],\"id\":\"has\"},{\"children\":[],\"id\":\"isExtensible\"},{\"children\":[],\"id\":\"ownKeys\"},{\"children\":[],\"id\":\"preventExtensions\"},{\"children\":[],\"id\":\"set\"},{\"children\":[],\"id\":\"setPrototypeOf\"}],\"id\":\"Reflect\"}]}\n\t    ```\n\t\n- 绘制 G6 Tree Graph\n\t- 需要在 HTML 中创建一个用于容纳 G6 绘制的图的容器，通常为 div  标签。G6 在绘制时会在该容器下追加 canvas 标签，然后将图绘制在其中。\n\t\t\n\t\t```javascript\n\t\t<div id=\"container\" />\n\t\t```\n\t- 引入 G6 的数据源为 JSON 格式的对象。即上面我们处理过的 globalObject\n\t- 创建关系图（实例化）时，至少需要为图设置容器、宽和高。\n\t\t\n\t\t```javascript\n\t\t\n\t    const width = window.devicePixelRatio * window.screen.width * 0.5; // 高清显示\n\t    const height = window.devicePixelRatio * window.screen.height;\n\t    const graph = new G6.TreeGraph({\n\t      container: 'container',\n\t      width,\n\t      height,\n\t      modes: {\n\t        default: [\n\t          {\n\t            type: 'collapse-expand',\n\t            onChange: function onChange(item, collapsed) {\n\t              const data = item.get('model').data;\n\t              data.collapsed = collapsed;\n\t              return true;\n\t            },\n\t          },\n\t          'drag-canvas',\n\t          'zoom-canvas',\n\t        ],\n\t      },\n\t      defaultNode: {\n\t        size: 26,\n\t        anchorPoints: [\n\t          [0, 0.5],\n\t          [1, 0.5],\n\t        ],\n\t        style: {\n\t          fill: '#C6E5FF',\n\t          stroke: '#5B8FF9',\n\t        },\n\t      },\n\t      defaultEdge: {\n\t        type: 'cubic-horizontal',\n\t        style: {\n\t          stroke: '#A3B1BF',\n\t        },\n\t      },\n\t      layout: {\n\t        type: 'compactBox',\n\t        direction: 'LR',\n\t        getId: function getId(d) {\n\t          return d.id;\n\t        },\n\t        getHeight: function getHeight() {\n\t          return 16;\n\t        },\n\t        getWidth: function getWidth() {\n\t          return 16;\n\t        },\n\t        getVGap: function getVGap() {\n\t          return 10;\n\t        },\n\t        getHGap: function getHGap() {\n\t          return 100;\n\t        },\n\t      },\n\t    });\n\t\t```\n\t\t\n\t- 配置数据源，渲染\n\t\t\n\t\t```javascript\n\t\tgraph.data(data);\n\t  graph.render();\n\t  graph.fitView();\n\t\t```\n\t\t\n- 运行截图\n\t- ![g6](http://p0.meituan.net/myvideodistribute/348969f29ced9ddcebac4fce71a1de42543229.png)\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/antv-g6-realm)\n- 祝大家多多发财","source":"_posts/Realm.md","raw":"---\ntitle: Realm\ndate: 2020-05-08 09:45:15\ntags:\n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Realm\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n\n- Before it is evaluated, all ECMAScript code must be associated with a realm. Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.\n\n<!-- more -->\n\n- 从逻辑上讲，堆栈中的每个上下文总是与其 realm 相关联\n\t- 让我们看看单独的realm的例子，使用vm模块：\n\t\n\t\t```javascript\n\t\tconst vm = require('vm');\n\t\t\n\t\t// First realm, and its global:\n\t\tconst realm1 = vm.createContext({x: 10, console});\n\t\t\n\t\t// Second realm, and its global:\n\t\tconst realm2 = vm.createContext({x: 20, console});\n\t\t\n\t\t// Code to execute:\n\t\tconst code = `console.log(x);`;\n\t\t\n\t\tvm.runInContext(code, realm1); // 10\n\t\tvm.runInContext(code, realm2); // 20\n\t\t```\n\t- ![realm](http://p0.meituan.net/myvideodistribute/5055c18e52edec4cd447d7acfd4a8278158263.png)\n\n\n## 实践记录\n\n- JavaScript 中所有的固有对象\n\n\t```javascript\n\t\n\n    let objects = [\n      \"eval\",\n      \"isFinite\",\n      \"isNaN\",\n      \"parseFloat\",\n      \"parseInt\",\n      \"decodeURI\",\n      \"decodeURIComponent\",\n      \"encodeURI\",\n      \"encodeURIComponent\",\n      \"Array\",\n      \"Date\",\n      \"RegExp\",\n      \"Promise\",\n      \"Proxy\",\n      \"Map\",\n      \"WeakMap\",\n      \"Set\",\n      \"WeakSet\",\n      \"Function\",\n      \"Boolean\",\n      \"String\",\n      \"Number\",\n      \"Symbol\",\n      \"Object\",\n      \"Error\",\n      \"EvalError\",\n      \"RangeError\",\n      \"ReferenceError\",\n      \"SyntaxError\",\n      \"TypeError\",\n      \"URIError\",\n      \"ArrayBuffer\",\n      \"SharedArrayBuffer\",\n      \"DataView\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int8Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Uint8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8ClampedArray\",\n      \"Atomics\",\n      \"JSON\",\n      \"Math\",\n      \"Reflect\"\n    ];\n\n    const set = new Set();\n\n    const globalObject = []\n\n    for (let i of objects) {\n      globalObject.push({\n        object: this[i],\n        path: [i]\n      })\n    }\n\n    while (globalObject.length) {\n      const current = globalObject.shift()\n      console.log(current.path.join('.'))\n      if (set.has(current.object))\n        continue;\n      set.add(current.object)\n\n\n\n      let proto = Object.getPrototypeOf(current.object)\n      if (proto) {\n        globalObject.push({\n          path: current.path.concat([\"__proto__\"]),\n          object: proto\n        })\n      }\n\n      for (let p of Object.getOwnPropertyNames(current.object)) {\n        let d = Object.getOwnPropertyDescriptor(current.object, p)\n        if (d.hasOwnProperty(\"value\") && ((d.value !== null && typeof d.value === \"object\") || (typeof d.value === \"function\")) && d.value instanceof Object) {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.value\n          })\n        }\n        if (d.hasOwnProperty(\"get\") && typeof d.get === \"function\") {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.get\n          })\n        }\n        if (d.hasOwnProperty(\"set\") && typeof d.set === \"function\") {\n          globalObject.push({\n            path: current.path.concat([p]),\n            object: d.set\n          })\n        }\n      }\n    }\n\t```\n\t\n- 根据上述代码，进行数据结构方面的格式化\n\t\n\t```javascript\n\t\n    const objects = [\n      \"eval\",\n      \"isFinite\",\n      \"isNaN\",\n      \"parseFloat\",\n      \"parseInt\",\n      \"decodeURI\",\n      \"decodeURIComponent\",\n      \"encodeURI\",\n      \"encodeURIComponent\",\n      \"Array\",\n      \"Date\",\n      \"RegExp\",\n      \"Promise\",\n      \"Proxy\",\n      \"Map\",\n      \"WeakMap\",\n      \"Set\",\n      \"WeakSet\",\n      \"Function\",\n      \"Boolean\",\n      \"String\",\n      \"Number\",\n      \"Symbol\",\n      \"Object\",\n      \"Error\",\n      \"EvalError\",\n      \"RangeError\",\n      \"ReferenceError\",\n      \"SyntaxError\",\n      \"TypeError\",\n      \"URIError\",\n      \"ArrayBuffer\",\n      \"SharedArrayBuffer\",\n      \"DataView\",\n      \"Float32Array\",\n      \"Float64Array\",\n      \"Int8Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Uint8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Uint8ClampedArray\",\n      \"Atomics\",\n      \"JSON\",\n      \"Math\",\n      \"Reflect\"\n    ];\n\n    const set = new Set();\n\n    const globalObject = {\n      id: \"Global Object\",\n      children: [\n\n      ]\n    }\n\n    for (let i of objects) {\n      globalObject.children.push({\n        children: [],\n        id: i\n      })\n    }\n\n\n    for (let i = 0; i < objects.length; i++) {\n      const current = objects[i]\n      if (set.has(objects[i]))\n        continue;\n      set.add(objects[i])\n      for (let p of Object.getOwnPropertyNames(window[objects[i]])) {\n        let d = Object.getOwnPropertyDescriptor(window[objects[i]], p)\n        if (d.hasOwnProperty(\"value\") && ((d.value !== null && typeof d.value === \"object\") || (typeof d.value === \"function\")) && d.value instanceof Object) {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.value)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n        if (d.hasOwnProperty(\"get\") && typeof d.get === \"function\") {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.get)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n        if (d.hasOwnProperty(\"set\") && typeof d.set === \"function\") {\n          let childrenThird = []\n          for (let k of Object.getOwnPropertyNames(d.set)) {\n            if (k !== 'name' && k !== 'length') {\n              childrenThird.push({ id: k })\n            }\n          }\n          globalObject[\"children\"][i].children.push({\n            children: childrenThird,\n            id: p\n          })\n        }\n      }\n    }\n\t```\n\n  - 处理好的JSON数据  \n\n\t    ```javascrtipt\n\t    {\"id\":\"Global Object\",\"children\":[{\"children\":[],\"id\":\"eval\"},{\"children\":[],\"id\":\"isFinite\"},{\"children\":[],\"id\":\"isNaN\"},{\"children\":[],\"id\":\"parseFloat\"},{\"children\":[],\"id\":\"parseInt\"},{\"children\":[],\"id\":\"decodeURI\"},{\"children\":[],\"id\":\"decodeURIComponent\"},{\"children\":[],\"id\":\"encodeURI\"},{\"children\":[],\"id\":\"encodeURIComponent\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"concat\"},{\"id\":\"copyWithin\"},{\"id\":\"fill\"},{\"id\":\"find\"},{\"id\":\"findIndex\"},{\"id\":\"lastIndexOf\"},{\"id\":\"pop\"},{\"id\":\"push\"},{\"id\":\"reverse\"},{\"id\":\"shift\"},{\"id\":\"unshift\"},{\"id\":\"slice\"},{\"id\":\"sort\"},{\"id\":\"splice\"},{\"id\":\"includes\"},{\"id\":\"indexOf\"},{\"id\":\"join\"},{\"id\":\"keys\"},{\"id\":\"entries\"},{\"id\":\"values\"},{\"id\":\"forEach\"},{\"id\":\"filter\"},{\"id\":\"flat\"},{\"id\":\"flatMap\"},{\"id\":\"map\"},{\"id\":\"every\"},{\"id\":\"some\"},{\"id\":\"reduce\"},{\"id\":\"reduceRight\"},{\"id\":\"toLocaleString\"},{\"id\":\"toString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isArray\"},{\"children\":[],\"id\":\"from\"},{\"children\":[],\"id\":\"of\"}],\"id\":\"Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"toDateString\"},{\"id\":\"toTimeString\"},{\"id\":\"toISOString\"},{\"id\":\"toUTCString\"},{\"id\":\"toGMTString\"},{\"id\":\"getDate\"},{\"id\":\"setDate\"},{\"id\":\"getDay\"},{\"id\":\"getFullYear\"},{\"id\":\"setFullYear\"},{\"id\":\"getHours\"},{\"id\":\"setHours\"},{\"id\":\"getMilliseconds\"},{\"id\":\"setMilliseconds\"},{\"id\":\"getMinutes\"},{\"id\":\"setMinutes\"},{\"id\":\"getMonth\"},{\"id\":\"setMonth\"},{\"id\":\"getSeconds\"},{\"id\":\"setSeconds\"},{\"id\":\"getTime\"},{\"id\":\"setTime\"},{\"id\":\"getTimezoneOffset\"},{\"id\":\"getUTCDate\"},{\"id\":\"setUTCDate\"},{\"id\":\"getUTCDay\"},{\"id\":\"getUTCFullYear\"},{\"id\":\"setUTCFullYear\"},{\"id\":\"getUTCHours\"},{\"id\":\"setUTCHours\"},{\"id\":\"getUTCMilliseconds\"},{\"id\":\"setUTCMilliseconds\"},{\"id\":\"getUTCMinutes\"},{\"id\":\"setUTCMinutes\"},{\"id\":\"getUTCMonth\"},{\"id\":\"setUTCMonth\"},{\"id\":\"getUTCSeconds\"},{\"id\":\"setUTCSeconds\"},{\"id\":\"valueOf\"},{\"id\":\"getYear\"},{\"id\":\"setYear\"},{\"id\":\"toJSON\"},{\"id\":\"toLocaleString\"},{\"id\":\"toLocaleDateString\"},{\"id\":\"toLocaleTimeString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"now\"},{\"children\":[],\"id\":\"parse\"},{\"children\":[],\"id\":\"UTC\"}],\"id\":\"Date\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"exec\"},{\"id\":\"dotAll\"},{\"id\":\"flags\"},{\"id\":\"global\"},{\"id\":\"ignoreCase\"},{\"id\":\"multiline\"},{\"id\":\"source\"},{\"id\":\"sticky\"},{\"id\":\"unicode\"},{\"id\":\"compile\"},{\"id\":\"toString\"},{\"id\":\"test\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"input\"},{\"children\":[],\"id\":\"input\"},{\"children\":[],\"id\":\"$_\"},{\"children\":[],\"id\":\"$_\"},{\"children\":[],\"id\":\"lastMatch\"},{\"children\":[],\"id\":\"lastMatch\"},{\"children\":[],\"id\":\"$&\"},{\"children\":[],\"id\":\"$&\"},{\"children\":[],\"id\":\"lastParen\"},{\"children\":[],\"id\":\"lastParen\"},{\"children\":[],\"id\":\"$+\"},{\"children\":[],\"id\":\"$+\"},{\"children\":[],\"id\":\"leftContext\"},{\"children\":[],\"id\":\"leftContext\"},{\"children\":[],\"id\":\"$`\"},{\"children\":[],\"id\":\"$`\"},{\"children\":[],\"id\":\"rightContext\"},{\"children\":[],\"id\":\"rightContext\"},{\"children\":[],\"id\":\"$'\"},{\"children\":[],\"id\":\"$'\"},{\"children\":[],\"id\":\"$1\"},{\"children\":[],\"id\":\"$1\"},{\"children\":[],\"id\":\"$2\"},{\"children\":[],\"id\":\"$2\"},{\"children\":[],\"id\":\"$3\"},{\"children\":[],\"id\":\"$3\"},{\"children\":[],\"id\":\"$4\"},{\"children\":[],\"id\":\"$4\"},{\"children\":[],\"id\":\"$5\"},{\"children\":[],\"id\":\"$5\"},{\"children\":[],\"id\":\"$6\"},{\"children\":[],\"id\":\"$6\"},{\"children\":[],\"id\":\"$7\"},{\"children\":[],\"id\":\"$7\"},{\"children\":[],\"id\":\"$8\"},{\"children\":[],\"id\":\"$8\"},{\"children\":[],\"id\":\"$9\"},{\"children\":[],\"id\":\"$9\"}],\"id\":\"RegExp\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"then\"},{\"id\":\"catch\"},{\"id\":\"finally\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"all\"},{\"children\":[],\"id\":\"race\"},{\"children\":[],\"id\":\"resolve\"},{\"children\":[],\"id\":\"reject\"},{\"children\":[],\"id\":\"allSettled\"}],\"id\":\"Promise\"},{\"children\":[{\"children\":[],\"id\":\"revocable\"}],\"id\":\"Proxy\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"get\"},{\"id\":\"set\"},{\"id\":\"has\"},{\"id\":\"delete\"},{\"id\":\"clear\"},{\"id\":\"entries\"},{\"id\":\"forEach\"},{\"id\":\"keys\"},{\"id\":\"size\"},{\"id\":\"values\"}],\"id\":\"prototype\"}],\"id\":\"Map\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"delete\"},{\"id\":\"get\"},{\"id\":\"set\"},{\"id\":\"has\"}],\"id\":\"prototype\"}],\"id\":\"WeakMap\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"has\"},{\"id\":\"add\"},{\"id\":\"delete\"},{\"id\":\"clear\"},{\"id\":\"entries\"},{\"id\":\"forEach\"},{\"id\":\"size\"},{\"id\":\"values\"},{\"id\":\"keys\"}],\"id\":\"prototype\"}],\"id\":\"Set\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"delete\"},{\"id\":\"has\"},{\"id\":\"add\"}],\"id\":\"prototype\"}],\"id\":\"WeakSet\"},{\"children\":[{\"children\":[{\"id\":\"arguments\"},{\"id\":\"caller\"},{\"id\":\"constructor\"},{\"id\":\"apply\"},{\"id\":\"bind\"},{\"id\":\"call\"},{\"id\":\"toString\"}],\"id\":\"prototype\"}],\"id\":\"Function\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"}],\"id\":\"prototype\"}],\"id\":\"Boolean\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"anchor\"},{\"id\":\"big\"},{\"id\":\"blink\"},{\"id\":\"bold\"},{\"id\":\"charAt\"},{\"id\":\"charCodeAt\"},{\"id\":\"codePointAt\"},{\"id\":\"concat\"},{\"id\":\"endsWith\"},{\"id\":\"fontcolor\"},{\"id\":\"fontsize\"},{\"id\":\"fixed\"},{\"id\":\"includes\"},{\"id\":\"indexOf\"},{\"id\":\"italics\"},{\"id\":\"lastIndexOf\"},{\"id\":\"link\"},{\"id\":\"localeCompare\"},{\"id\":\"match\"},{\"id\":\"matchAll\"},{\"id\":\"normalize\"},{\"id\":\"padEnd\"},{\"id\":\"padStart\"},{\"id\":\"repeat\"},{\"id\":\"replace\"},{\"id\":\"search\"},{\"id\":\"slice\"},{\"id\":\"small\"},{\"id\":\"split\"},{\"id\":\"strike\"},{\"id\":\"sub\"},{\"id\":\"substr\"},{\"id\":\"substring\"},{\"id\":\"sup\"},{\"id\":\"startsWith\"},{\"id\":\"toString\"},{\"id\":\"trim\"},{\"id\":\"trimStart\"},{\"id\":\"trimLeft\"},{\"id\":\"trimEnd\"},{\"id\":\"trimRight\"},{\"id\":\"toLocaleLowerCase\"},{\"id\":\"toLocaleUpperCase\"},{\"id\":\"toLowerCase\"},{\"id\":\"toUpperCase\"},{\"id\":\"valueOf\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"fromCharCode\"},{\"children\":[],\"id\":\"fromCodePoint\"},{\"children\":[],\"id\":\"raw\"}],\"id\":\"String\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toExponential\"},{\"id\":\"toFixed\"},{\"id\":\"toPrecision\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"},{\"id\":\"toLocaleString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isFinite\"},{\"children\":[],\"id\":\"isInteger\"},{\"children\":[],\"id\":\"isNaN\"},{\"children\":[],\"id\":\"isSafeInteger\"},{\"children\":[],\"id\":\"parseFloat\"},{\"children\":[],\"id\":\"parseInt\"}],\"id\":\"Number\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"toString\"},{\"id\":\"valueOf\"},{\"id\":\"description\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"for\"},{\"children\":[],\"id\":\"keyFor\"}],\"id\":\"Symbol\"},{\"children\":[{\"children\":[],\"id\":\"assign\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptor\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptors\"},{\"children\":[],\"id\":\"getOwnPropertyNames\"},{\"children\":[],\"id\":\"getOwnPropertySymbols\"},{\"children\":[],\"id\":\"is\"},{\"children\":[],\"id\":\"preventExtensions\"},{\"children\":[],\"id\":\"seal\"},{\"children\":[],\"id\":\"create\"},{\"children\":[],\"id\":\"defineProperties\"},{\"children\":[],\"id\":\"defineProperty\"},{\"children\":[],\"id\":\"freeze\"},{\"children\":[],\"id\":\"getPrototypeOf\"},{\"children\":[],\"id\":\"setPrototypeOf\"},{\"children\":[],\"id\":\"isExtensible\"},{\"children\":[],\"id\":\"isFrozen\"},{\"children\":[],\"id\":\"isSealed\"},{\"children\":[],\"id\":\"keys\"},{\"children\":[],\"id\":\"entries\"},{\"children\":[],\"id\":\"fromEntries\"},{\"children\":[],\"id\":\"values\"}],\"id\":\"Object\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"},{\"id\":\"toString\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"captureStackTrace\"}],\"id\":\"Error\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"EvalError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"RangeError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"ReferenceError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"SyntaxError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"TypeError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"message\"}],\"id\":\"prototype\"}],\"id\":\"URIError\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"byteLength\"},{\"id\":\"slice\"}],\"id\":\"prototype\"},{\"children\":[],\"id\":\"isView\"}],\"id\":\"ArrayBuffer\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"byteLength\"},{\"id\":\"slice\"}],\"id\":\"prototype\"}],\"id\":\"SharedArrayBuffer\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"buffer\"},{\"id\":\"byteLength\"},{\"id\":\"byteOffset\"},{\"id\":\"getInt8\"},{\"id\":\"setInt8\"},{\"id\":\"getUint8\"},{\"id\":\"setUint8\"},{\"id\":\"getInt16\"},{\"id\":\"setInt16\"},{\"id\":\"getUint16\"},{\"id\":\"setUint16\"},{\"id\":\"getInt32\"},{\"id\":\"setInt32\"},{\"id\":\"getUint32\"},{\"id\":\"setUint32\"},{\"id\":\"getFloat32\"},{\"id\":\"setFloat32\"},{\"id\":\"getFloat64\"},{\"id\":\"setFloat64\"},{\"id\":\"getBigInt64\"},{\"id\":\"setBigInt64\"},{\"id\":\"getBigUint64\"},{\"id\":\"setBigUint64\"}],\"id\":\"prototype\"}],\"id\":\"DataView\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Float32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Float64Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int8Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int16Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Int32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint8Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint16Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint32Array\"},{\"children\":[{\"children\":[{\"id\":\"constructor\"},{\"id\":\"BYTES_PER_ELEMENT\"}],\"id\":\"prototype\"}],\"id\":\"Uint8ClampedArray\"},{\"children\":[{\"children\":[],\"id\":\"load\"},{\"children\":[],\"id\":\"store\"},{\"children\":[],\"id\":\"add\"},{\"children\":[],\"id\":\"sub\"},{\"children\":[],\"id\":\"and\"},{\"children\":[],\"id\":\"or\"},{\"children\":[],\"id\":\"xor\"},{\"children\":[],\"id\":\"exchange\"},{\"children\":[],\"id\":\"compareExchange\"},{\"children\":[],\"id\":\"isLockFree\"},{\"children\":[],\"id\":\"wait\"},{\"children\":[],\"id\":\"wake\"},{\"children\":[],\"id\":\"notify\"}],\"id\":\"Atomics\"},{\"children\":[{\"children\":[],\"id\":\"parse\"},{\"children\":[],\"id\":\"stringify\"}],\"id\":\"JSON\"},{\"children\":[{\"children\":[],\"id\":\"abs\"},{\"children\":[],\"id\":\"acos\"},{\"children\":[],\"id\":\"acosh\"},{\"children\":[],\"id\":\"asin\"},{\"children\":[],\"id\":\"asinh\"},{\"children\":[],\"id\":\"atan\"},{\"children\":[],\"id\":\"atanh\"},{\"children\":[],\"id\":\"atan2\"},{\"children\":[],\"id\":\"ceil\"},{\"children\":[],\"id\":\"cbrt\"},{\"children\":[],\"id\":\"expm1\"},{\"children\":[],\"id\":\"clz32\"},{\"children\":[],\"id\":\"cos\"},{\"children\":[],\"id\":\"cosh\"},{\"children\":[],\"id\":\"exp\"},{\"children\":[],\"id\":\"floor\"},{\"children\":[],\"id\":\"fround\"},{\"children\":[],\"id\":\"hypot\"},{\"children\":[],\"id\":\"imul\"},{\"children\":[],\"id\":\"log\"},{\"children\":[],\"id\":\"log1p\"},{\"children\":[],\"id\":\"log2\"},{\"children\":[],\"id\":\"log10\"},{\"children\":[],\"id\":\"max\"},{\"children\":[],\"id\":\"min\"},{\"children\":[],\"id\":\"pow\"},{\"children\":[],\"id\":\"random\"},{\"children\":[],\"id\":\"round\"},{\"children\":[],\"id\":\"sign\"},{\"children\":[],\"id\":\"sin\"},{\"children\":[],\"id\":\"sinh\"},{\"children\":[],\"id\":\"sqrt\"},{\"children\":[],\"id\":\"tan\"},{\"children\":[],\"id\":\"tanh\"},{\"children\":[],\"id\":\"trunc\"}],\"id\":\"Math\"},{\"children\":[{\"children\":[],\"id\":\"defineProperty\"},{\"children\":[],\"id\":\"deleteProperty\"},{\"children\":[],\"id\":\"apply\"},{\"children\":[],\"id\":\"construct\"},{\"children\":[],\"id\":\"get\"},{\"children\":[],\"id\":\"getOwnPropertyDescriptor\"},{\"children\":[],\"id\":\"getPrototypeOf\"},{\"children\":[],\"id\":\"has\"},{\"children\":[],\"id\":\"isExtensible\"},{\"children\":[],\"id\":\"ownKeys\"},{\"children\":[],\"id\":\"preventExtensions\"},{\"children\":[],\"id\":\"set\"},{\"children\":[],\"id\":\"setPrototypeOf\"}],\"id\":\"Reflect\"}]}\n\t    ```\n\t\n- 绘制 G6 Tree Graph\n\t- 需要在 HTML 中创建一个用于容纳 G6 绘制的图的容器，通常为 div  标签。G6 在绘制时会在该容器下追加 canvas 标签，然后将图绘制在其中。\n\t\t\n\t\t```javascript\n\t\t<div id=\"container\" />\n\t\t```\n\t- 引入 G6 的数据源为 JSON 格式的对象。即上面我们处理过的 globalObject\n\t- 创建关系图（实例化）时，至少需要为图设置容器、宽和高。\n\t\t\n\t\t```javascript\n\t\t\n\t    const width = window.devicePixelRatio * window.screen.width * 0.5; // 高清显示\n\t    const height = window.devicePixelRatio * window.screen.height;\n\t    const graph = new G6.TreeGraph({\n\t      container: 'container',\n\t      width,\n\t      height,\n\t      modes: {\n\t        default: [\n\t          {\n\t            type: 'collapse-expand',\n\t            onChange: function onChange(item, collapsed) {\n\t              const data = item.get('model').data;\n\t              data.collapsed = collapsed;\n\t              return true;\n\t            },\n\t          },\n\t          'drag-canvas',\n\t          'zoom-canvas',\n\t        ],\n\t      },\n\t      defaultNode: {\n\t        size: 26,\n\t        anchorPoints: [\n\t          [0, 0.5],\n\t          [1, 0.5],\n\t        ],\n\t        style: {\n\t          fill: '#C6E5FF',\n\t          stroke: '#5B8FF9',\n\t        },\n\t      },\n\t      defaultEdge: {\n\t        type: 'cubic-horizontal',\n\t        style: {\n\t          stroke: '#A3B1BF',\n\t        },\n\t      },\n\t      layout: {\n\t        type: 'compactBox',\n\t        direction: 'LR',\n\t        getId: function getId(d) {\n\t          return d.id;\n\t        },\n\t        getHeight: function getHeight() {\n\t          return 16;\n\t        },\n\t        getWidth: function getWidth() {\n\t          return 16;\n\t        },\n\t        getVGap: function getVGap() {\n\t          return 10;\n\t        },\n\t        getHGap: function getHGap() {\n\t          return 100;\n\t        },\n\t      },\n\t    });\n\t\t```\n\t\t\n\t- 配置数据源，渲染\n\t\t\n\t\t```javascript\n\t\tgraph.data(data);\n\t  graph.render();\n\t  graph.fitView();\n\t\t```\n\t\t\n- 运行截图\n\t- ![g6](http://p0.meituan.net/myvideodistribute/348969f29ced9ddcebac4fce71a1de42543229.png)\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/antv-g6-realm)\n- 祝大家多多发财","slug":"Realm","published":1,"updated":"2020-05-24T11:32:17.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xd00311wp35ljif4rr","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>Before it is evaluated, all ECMAScript code must be associated with a realm. Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.</li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>从逻辑上讲，堆栈中的每个上下文总是与其 realm 相关联</p>\n<ul>\n<li><p>让我们看看单独的realm的例子，使用vm模块：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"built_in\">require</span>(<span class=\"string\">'vm'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// First realm, and its global:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> realm1 = vm.createContext(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"built_in\">console</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Second realm, and its global:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> realm2 = vm.createContext(&#123;<span class=\"attr\">x</span>: <span class=\"number\">20</span>, <span class=\"built_in\">console</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code to execute:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`console.log(x);`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vm.runInContext(code, realm1); <span class=\"comment\">// 10</span></span><br><span class=\"line\">vm.runInContext(code, realm2); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/5055c18e52edec4cd447d7acfd4a8278158263.png\" alt=\"realm\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><ul>\n<li><p>JavaScript 中所有的固有对象</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objects = [</span><br><span class=\"line\">  <span class=\"string\">\"eval\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isFinite\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isNaN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseFloat\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseInt\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Date\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RegExp\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Promise\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Proxy\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Map\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakMap\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakSet\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Function\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Boolean\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Symbol\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Object\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Error\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"EvalError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RangeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ReferenceError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SyntaxError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"TypeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"URIError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SharedArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DataView\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float64Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8ClampedArray\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Atomics\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"JSON\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Math\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Reflect\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set();</span><br><span class=\"line\"></span><br><span class=\"line\">const globalObject = []</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i of objects) &#123;</span><br><span class=\"line\">  globalObject.push(&#123;</span><br><span class=\"line\">    object: <span class=\"keyword\">this</span>[i],</span><br><span class=\"line\">    path: [i]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (globalObject.length) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = globalObject.shift()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(current.path.join(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(current.object))</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(current.object)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  let proto = Object.getPrototypeOf(current.object)</span><br><span class=\"line\">  if (proto) &#123;</span><br><span class=\"line\">    globalObject.push(&#123;</span><br><span class=\"line\">      path: current.path.concat([<span class=\"string\">\"__proto__\"</span>]),</span><br><span class=\"line\">      object: proto</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(current.object)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(current.object, p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"value\"</span>) &amp;&amp; ((d.value !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"function\"</span>)) &amp;&amp; d.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.value</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"get\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.get === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.get</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"set\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.set === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.set</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据上述代码，进行数据结构方面的格式化</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> objects = [</span><br><span class=\"line\">  <span class=\"string\">\"eval\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isFinite\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isNaN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseFloat\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseInt\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Date\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RegExp\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Promise\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Proxy\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Map\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakMap\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakSet\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Function\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Boolean\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Symbol\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Object\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Error\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"EvalError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RangeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ReferenceError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SyntaxError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"TypeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"URIError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SharedArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DataView\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float64Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8ClampedArray\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Atomics\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"JSON\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Math\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Reflect\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set();</span><br><span class=\"line\"></span><br><span class=\"line\">const globalObject = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">\"Global Object\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> objects) &#123;</span><br><span class=\"line\">  globalObject.children.push(&#123;</span><br><span class=\"line\">    children: [],</span><br><span class=\"line\">    id: i</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = objects[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(objects[i]))</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(objects[i])</span><br><span class=\"line\">  for (let p of Object.getOwnPropertyNames(window[objects[i]])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">window</span>[objects[i]], p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"value\"</span>) &amp;&amp; ((d.value !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"function\"</span>)) &amp;&amp; d.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"get\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.get === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.get)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"set\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.set === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.set)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>处理好的JSON数据  </p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;id&quot;:&quot;Global Object&quot;,&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;eval&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFinite&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isNaN&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseFloat&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseInt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;decodeURI&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;decodeURIComponent&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;encodeURI&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;encodeURIComponent&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;concat&quot;&#125;,&#123;&quot;id&quot;:&quot;copyWithin&quot;&#125;,&#123;&quot;id&quot;:&quot;fill&quot;&#125;,&#123;&quot;id&quot;:&quot;find&quot;&#125;,&#123;&quot;id&quot;:&quot;findIndex&quot;&#125;,&#123;&quot;id&quot;:&quot;lastIndexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;pop&quot;&#125;,&#123;&quot;id&quot;:&quot;push&quot;&#125;,&#123;&quot;id&quot;:&quot;reverse&quot;&#125;,&#123;&quot;id&quot;:&quot;shift&quot;&#125;,&#123;&quot;id&quot;:&quot;unshift&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;,&#123;&quot;id&quot;:&quot;sort&quot;&#125;,&#123;&quot;id&quot;:&quot;splice&quot;&#125;,&#123;&quot;id&quot;:&quot;includes&quot;&#125;,&#123;&quot;id&quot;:&quot;indexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;join&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;filter&quot;&#125;,&#123;&quot;id&quot;:&quot;flat&quot;&#125;,&#123;&quot;id&quot;:&quot;flatMap&quot;&#125;,&#123;&quot;id&quot;:&quot;map&quot;&#125;,&#123;&quot;id&quot;:&quot;every&quot;&#125;,&#123;&quot;id&quot;:&quot;some&quot;&#125;,&#123;&quot;id&quot;:&quot;reduce&quot;&#125;,&#123;&quot;id&quot;:&quot;reduceRight&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isArray&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;from&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;of&quot;&#125;],&quot;id&quot;:&quot;Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;toDateString&quot;&#125;,&#123;&quot;id&quot;:&quot;toTimeString&quot;&#125;,&#123;&quot;id&quot;:&quot;toISOString&quot;&#125;,&#123;&quot;id&quot;:&quot;toUTCString&quot;&#125;,&#123;&quot;id&quot;:&quot;toGMTString&quot;&#125;,&#123;&quot;id&quot;:&quot;getDate&quot;&#125;,&#123;&quot;id&quot;:&quot;setDate&quot;&#125;,&#123;&quot;id&quot;:&quot;getDay&quot;&#125;,&#123;&quot;id&quot;:&quot;getFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;getHours&quot;&#125;,&#123;&quot;id&quot;:&quot;setHours&quot;&#125;,&#123;&quot;id&quot;:&quot;getMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;setMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;getMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;setMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;getSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getTime&quot;&#125;,&#123;&quot;id&quot;:&quot;setTime&quot;&#125;,&#123;&quot;id&quot;:&quot;getTimezoneOffset&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCDate&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCDate&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCDay&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCHours&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCHours&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;getYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setYear&quot;&#125;,&#123;&quot;id&quot;:&quot;toJSON&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleDateString&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleTimeString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;now&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parse&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;UTC&quot;&#125;],&quot;id&quot;:&quot;Date&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;exec&quot;&#125;,&#123;&quot;id&quot;:&quot;dotAll&quot;&#125;,&#123;&quot;id&quot;:&quot;flags&quot;&#125;,&#123;&quot;id&quot;:&quot;global&quot;&#125;,&#123;&quot;id&quot;:&quot;ignoreCase&quot;&#125;,&#123;&quot;id&quot;:&quot;multiline&quot;&#125;,&#123;&quot;id&quot;:&quot;source&quot;&#125;,&#123;&quot;id&quot;:&quot;sticky&quot;&#125;,&#123;&quot;id&quot;:&quot;unicode&quot;&#125;,&#123;&quot;id&quot;:&quot;compile&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;test&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;input&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;input&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$_&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$_&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastMatch&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastMatch&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&amp;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&amp;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastParen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastParen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$+&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$+&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;leftContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;leftContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#96;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#96;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;rightContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;rightContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#39;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#39;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$3&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$3&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$4&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$4&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$5&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$5&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$6&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$6&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$7&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$7&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$8&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$8&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$9&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$9&quot;&#125;],&quot;id&quot;:&quot;RegExp&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;then&quot;&#125;,&#123;&quot;id&quot;:&quot;catch&quot;&#125;,&#123;&quot;id&quot;:&quot;finally&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;all&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;race&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;resolve&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;reject&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;allSettled&quot;&#125;],&quot;id&quot;:&quot;Promise&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;revocable&quot;&#125;],&quot;id&quot;:&quot;Proxy&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;clear&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;id&quot;:&quot;size&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Map&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;WeakMap&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;add&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;clear&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;size&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Set&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;add&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;WeakSet&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;arguments&quot;&#125;,&#123;&quot;id&quot;:&quot;caller&quot;&#125;,&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;apply&quot;&#125;,&#123;&quot;id&quot;:&quot;bind&quot;&#125;,&#123;&quot;id&quot;:&quot;call&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Function&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Boolean&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;anchor&quot;&#125;,&#123;&quot;id&quot;:&quot;big&quot;&#125;,&#123;&quot;id&quot;:&quot;blink&quot;&#125;,&#123;&quot;id&quot;:&quot;bold&quot;&#125;,&#123;&quot;id&quot;:&quot;charAt&quot;&#125;,&#123;&quot;id&quot;:&quot;charCodeAt&quot;&#125;,&#123;&quot;id&quot;:&quot;codePointAt&quot;&#125;,&#123;&quot;id&quot;:&quot;concat&quot;&#125;,&#123;&quot;id&quot;:&quot;endsWith&quot;&#125;,&#123;&quot;id&quot;:&quot;fontcolor&quot;&#125;,&#123;&quot;id&quot;:&quot;fontsize&quot;&#125;,&#123;&quot;id&quot;:&quot;fixed&quot;&#125;,&#123;&quot;id&quot;:&quot;includes&quot;&#125;,&#123;&quot;id&quot;:&quot;indexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;italics&quot;&#125;,&#123;&quot;id&quot;:&quot;lastIndexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;link&quot;&#125;,&#123;&quot;id&quot;:&quot;localeCompare&quot;&#125;,&#123;&quot;id&quot;:&quot;match&quot;&#125;,&#123;&quot;id&quot;:&quot;matchAll&quot;&#125;,&#123;&quot;id&quot;:&quot;normalize&quot;&#125;,&#123;&quot;id&quot;:&quot;padEnd&quot;&#125;,&#123;&quot;id&quot;:&quot;padStart&quot;&#125;,&#123;&quot;id&quot;:&quot;repeat&quot;&#125;,&#123;&quot;id&quot;:&quot;replace&quot;&#125;,&#123;&quot;id&quot;:&quot;search&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;,&#123;&quot;id&quot;:&quot;small&quot;&#125;,&#123;&quot;id&quot;:&quot;split&quot;&#125;,&#123;&quot;id&quot;:&quot;strike&quot;&#125;,&#123;&quot;id&quot;:&quot;sub&quot;&#125;,&#123;&quot;id&quot;:&quot;substr&quot;&#125;,&#123;&quot;id&quot;:&quot;substring&quot;&#125;,&#123;&quot;id&quot;:&quot;sup&quot;&#125;,&#123;&quot;id&quot;:&quot;startsWith&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;trim&quot;&#125;,&#123;&quot;id&quot;:&quot;trimStart&quot;&#125;,&#123;&quot;id&quot;:&quot;trimLeft&quot;&#125;,&#123;&quot;id&quot;:&quot;trimEnd&quot;&#125;,&#123;&quot;id&quot;:&quot;trimRight&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleLowerCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleUpperCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toLowerCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toUpperCase&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromCharCode&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromCodePoint&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;raw&quot;&#125;],&quot;id&quot;:&quot;String&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toExponential&quot;&#125;,&#123;&quot;id&quot;:&quot;toFixed&quot;&#125;,&#123;&quot;id&quot;:&quot;toPrecision&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFinite&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isInteger&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isNaN&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isSafeInteger&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseFloat&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseInt&quot;&#125;],&quot;id&quot;:&quot;Number&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;description&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;for&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;keyFor&quot;&#125;],&quot;id&quot;:&quot;Symbol&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;assign&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptors&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyNames&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertySymbols&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;is&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;preventExtensions&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;seal&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;create&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperties&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;freeze&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;setPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isExtensible&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFrozen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isSealed&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromEntries&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;values&quot;&#125;],&quot;id&quot;:&quot;Object&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;captureStackTrace&quot;&#125;],&quot;id&quot;:&quot;Error&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;EvalError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;RangeError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;ReferenceError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;SyntaxError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;TypeError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;URIError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isView&quot;&#125;],&quot;id&quot;:&quot;ArrayBuffer&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;SharedArrayBuffer&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;buffer&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;byteOffset&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt8&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt8&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint8&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint8&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt16&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt16&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint16&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint16&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt32&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt32&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint32&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint32&quot;&#125;,&#123;&quot;id&quot;:&quot;getFloat32&quot;&#125;,&#123;&quot;id&quot;:&quot;setFloat32&quot;&#125;,&#123;&quot;id&quot;:&quot;getFloat64&quot;&#125;,&#123;&quot;id&quot;:&quot;setFloat64&quot;&#125;,&#123;&quot;id&quot;:&quot;getBigInt64&quot;&#125;,&#123;&quot;id&quot;:&quot;setBigInt64&quot;&#125;,&#123;&quot;id&quot;:&quot;getBigUint64&quot;&#125;,&#123;&quot;id&quot;:&quot;setBigUint64&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;DataView&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Float32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Float64Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int8Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int16Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint8Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint16Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint8ClampedArray&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;load&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;store&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;add&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sub&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;and&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;or&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;xor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;exchange&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;compareExchange&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isLockFree&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;wait&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;wake&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;notify&quot;&#125;],&quot;id&quot;:&quot;Atomics&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parse&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;stringify&quot;&#125;],&quot;id&quot;:&quot;JSON&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;abs&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;acos&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;acosh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;asin&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;asinh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atan&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atanh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atan2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;ceil&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cbrt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;expm1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;clz32&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cos&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cosh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;exp&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;floor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fround&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;hypot&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;imul&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log1p&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log10&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;max&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;min&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;pow&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;random&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;round&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sign&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sin&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sinh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sqrt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;tan&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;tanh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;trunc&quot;&#125;],&quot;id&quot;:&quot;Math&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;deleteProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;apply&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;construct&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isExtensible&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;ownKeys&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;preventExtensions&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;setPrototypeOf&quot;&#125;],&quot;id&quot;:&quot;Reflect&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure></code></pre></li>\n</ul>\n</li>\n<li><p>绘制 G6 Tree Graph</p>\n<ul>\n<li><p>需要在 HTML 中创建一个用于容纳 G6 绘制的图的容器，通常为 div  标签。G6 在绘制时会在该容器下追加 canvas 标签，然后将图绘制在其中。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"container\"</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>引入 G6 的数据源为 JSON 格式的对象。即上面我们处理过的 globalObject</p>\n</li>\n<li><p>创建关系图（实例化）时，至少需要为图设置容器、宽和高。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> width = <span class=\"built_in\">window</span>.devicePixelRatio * <span class=\"built_in\">window</span>.screen.width * <span class=\"number\">0.5</span>; <span class=\"comment\">// 高清显示</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">window</span>.devicePixelRatio * <span class=\"built_in\">window</span>.screen.height;</span><br><span class=\"line\"><span class=\"keyword\">const</span> graph = <span class=\"keyword\">new</span> G6.TreeGraph(&#123;</span><br><span class=\"line\">  container: <span class=\"string\">'container'</span>,</span><br><span class=\"line\">  width,</span><br><span class=\"line\">  height,</span><br><span class=\"line\">  modes: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'collapse-expand'</span>,</span><br><span class=\"line\">        onChange: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChange</span>(<span class=\"params\">item, collapsed</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> data = item.get(<span class=\"string\">'model'</span>).data;</span><br><span class=\"line\">          data.collapsed = collapsed;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'drag-canvas'</span>,</span><br><span class=\"line\">      <span class=\"string\">'zoom-canvas'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  defaultNode: &#123;</span><br><span class=\"line\">    size: <span class=\"number\">26</span>,</span><br><span class=\"line\">    anchorPoints: [</span><br><span class=\"line\">      [<span class=\"number\">0</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">      [<span class=\"number\">1</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      fill: <span class=\"string\">'#C6E5FF'</span>,</span><br><span class=\"line\">      stroke: <span class=\"string\">'#5B8FF9'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  defaultEdge: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'cubic-horizontal'</span>,</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      stroke: <span class=\"string\">'#A3B1BF'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  layout: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'compactBox'</span>,</span><br><span class=\"line\">    direction: <span class=\"string\">'LR'</span>,</span><br><span class=\"line\">    getId: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getId</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> d.id;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHeight: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getWidth: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWidth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getVGap: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVGap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHGap: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHGap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置数据源，渲染</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph.data(data);</span><br><span class=\"line\"> graph.render();</span><br><span class=\"line\"> graph.fitView();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行截图</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/348969f29ced9ddcebac4fce71a1de42543229.png\" alt=\"g6\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/antv-g6-realm\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>Before it is evaluated, all ECMAScript code must be associated with a realm. Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.</li>\n</ul>","more":"<ul>\n<li><p>从逻辑上讲，堆栈中的每个上下文总是与其 realm 相关联</p>\n<ul>\n<li><p>让我们看看单独的realm的例子，使用vm模块：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"built_in\">require</span>(<span class=\"string\">'vm'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// First realm, and its global:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> realm1 = vm.createContext(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"built_in\">console</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Second realm, and its global:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> realm2 = vm.createContext(&#123;<span class=\"attr\">x</span>: <span class=\"number\">20</span>, <span class=\"built_in\">console</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code to execute:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`console.log(x);`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vm.runInContext(code, realm1); <span class=\"comment\">// 10</span></span><br><span class=\"line\">vm.runInContext(code, realm2); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/5055c18e52edec4cd447d7acfd4a8278158263.png\" alt=\"realm\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><ul>\n<li><p>JavaScript 中所有的固有对象</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objects = [</span><br><span class=\"line\">  <span class=\"string\">\"eval\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isFinite\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isNaN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseFloat\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseInt\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Date\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RegExp\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Promise\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Proxy\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Map\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakMap\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakSet\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Function\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Boolean\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Symbol\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Object\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Error\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"EvalError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RangeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ReferenceError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SyntaxError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"TypeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"URIError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SharedArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DataView\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float64Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8ClampedArray\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Atomics\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"JSON\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Math\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Reflect\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set();</span><br><span class=\"line\"></span><br><span class=\"line\">const globalObject = []</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i of objects) &#123;</span><br><span class=\"line\">  globalObject.push(&#123;</span><br><span class=\"line\">    object: <span class=\"keyword\">this</span>[i],</span><br><span class=\"line\">    path: [i]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (globalObject.length) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = globalObject.shift()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(current.path.join(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(current.object))</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(current.object)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  let proto = Object.getPrototypeOf(current.object)</span><br><span class=\"line\">  if (proto) &#123;</span><br><span class=\"line\">    globalObject.push(&#123;</span><br><span class=\"line\">      path: current.path.concat([<span class=\"string\">\"__proto__\"</span>]),</span><br><span class=\"line\">      object: proto</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(current.object)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(current.object, p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"value\"</span>) &amp;&amp; ((d.value !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"function\"</span>)) &amp;&amp; d.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.value</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"get\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.get === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.get</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"set\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.set === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      globalObject.push(&#123;</span><br><span class=\"line\">        path: current.path.concat([p]),</span><br><span class=\"line\">        object: d.set</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据上述代码，进行数据结构方面的格式化</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> objects = [</span><br><span class=\"line\">  <span class=\"string\">\"eval\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isFinite\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"isNaN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseFloat\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parseInt\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"decodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURI\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"encodeURIComponent\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Date\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RegExp\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Promise\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Proxy\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Map\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakMap\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"WeakSet\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Function\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Boolean\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Symbol\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Object\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Error\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"EvalError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RangeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ReferenceError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SyntaxError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"TypeError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"URIError\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"SharedArrayBuffer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DataView\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Float64Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Int32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint16Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint32Array\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Uint8ClampedArray\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Atomics\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"JSON\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Math\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Reflect\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set();</span><br><span class=\"line\"></span><br><span class=\"line\">const globalObject = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">\"Global Object\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> objects) &#123;</span><br><span class=\"line\">  globalObject.children.push(&#123;</span><br><span class=\"line\">    children: [],</span><br><span class=\"line\">    id: i</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = objects[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(objects[i]))</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(objects[i])</span><br><span class=\"line\">  for (let p of Object.getOwnPropertyNames(window[objects[i]])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">window</span>[objects[i]], p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"value\"</span>) &amp;&amp; ((d.value !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"object\"</span>) || (<span class=\"keyword\">typeof</span> d.value === <span class=\"string\">\"function\"</span>)) &amp;&amp; d.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"get\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.get === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.get)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.hasOwnProperty(<span class=\"string\">\"set\"</span>) &amp;&amp; <span class=\"keyword\">typeof</span> d.set === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childrenThird = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.getOwnPropertyNames(d.set)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k !== <span class=\"string\">'name'</span> &amp;&amp; k !== <span class=\"string\">'length'</span>) &#123;</span><br><span class=\"line\">          childrenThird.push(&#123; <span class=\"attr\">id</span>: k &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      globalObject[<span class=\"string\">\"children\"</span>][i].children.push(&#123;</span><br><span class=\"line\">        children: childrenThird,</span><br><span class=\"line\">        id: p</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>处理好的JSON数据  </p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;id&quot;:&quot;Global Object&quot;,&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;eval&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFinite&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isNaN&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseFloat&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseInt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;decodeURI&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;decodeURIComponent&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;encodeURI&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;encodeURIComponent&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;concat&quot;&#125;,&#123;&quot;id&quot;:&quot;copyWithin&quot;&#125;,&#123;&quot;id&quot;:&quot;fill&quot;&#125;,&#123;&quot;id&quot;:&quot;find&quot;&#125;,&#123;&quot;id&quot;:&quot;findIndex&quot;&#125;,&#123;&quot;id&quot;:&quot;lastIndexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;pop&quot;&#125;,&#123;&quot;id&quot;:&quot;push&quot;&#125;,&#123;&quot;id&quot;:&quot;reverse&quot;&#125;,&#123;&quot;id&quot;:&quot;shift&quot;&#125;,&#123;&quot;id&quot;:&quot;unshift&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;,&#123;&quot;id&quot;:&quot;sort&quot;&#125;,&#123;&quot;id&quot;:&quot;splice&quot;&#125;,&#123;&quot;id&quot;:&quot;includes&quot;&#125;,&#123;&quot;id&quot;:&quot;indexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;join&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;filter&quot;&#125;,&#123;&quot;id&quot;:&quot;flat&quot;&#125;,&#123;&quot;id&quot;:&quot;flatMap&quot;&#125;,&#123;&quot;id&quot;:&quot;map&quot;&#125;,&#123;&quot;id&quot;:&quot;every&quot;&#125;,&#123;&quot;id&quot;:&quot;some&quot;&#125;,&#123;&quot;id&quot;:&quot;reduce&quot;&#125;,&#123;&quot;id&quot;:&quot;reduceRight&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isArray&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;from&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;of&quot;&#125;],&quot;id&quot;:&quot;Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;toDateString&quot;&#125;,&#123;&quot;id&quot;:&quot;toTimeString&quot;&#125;,&#123;&quot;id&quot;:&quot;toISOString&quot;&#125;,&#123;&quot;id&quot;:&quot;toUTCString&quot;&#125;,&#123;&quot;id&quot;:&quot;toGMTString&quot;&#125;,&#123;&quot;id&quot;:&quot;getDate&quot;&#125;,&#123;&quot;id&quot;:&quot;setDate&quot;&#125;,&#123;&quot;id&quot;:&quot;getDay&quot;&#125;,&#123;&quot;id&quot;:&quot;getFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;getHours&quot;&#125;,&#123;&quot;id&quot;:&quot;setHours&quot;&#125;,&#123;&quot;id&quot;:&quot;getMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;setMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;getMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;setMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;getSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getTime&quot;&#125;,&#123;&quot;id&quot;:&quot;setTime&quot;&#125;,&#123;&quot;id&quot;:&quot;getTimezoneOffset&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCDate&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCDate&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCDay&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCFullYear&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCHours&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCHours&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMilliseconds&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMinutes&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCMonth&quot;&#125;,&#123;&quot;id&quot;:&quot;getUTCSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;setUTCSeconds&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;getYear&quot;&#125;,&#123;&quot;id&quot;:&quot;setYear&quot;&#125;,&#123;&quot;id&quot;:&quot;toJSON&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleDateString&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleTimeString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;now&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parse&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;UTC&quot;&#125;],&quot;id&quot;:&quot;Date&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;exec&quot;&#125;,&#123;&quot;id&quot;:&quot;dotAll&quot;&#125;,&#123;&quot;id&quot;:&quot;flags&quot;&#125;,&#123;&quot;id&quot;:&quot;global&quot;&#125;,&#123;&quot;id&quot;:&quot;ignoreCase&quot;&#125;,&#123;&quot;id&quot;:&quot;multiline&quot;&#125;,&#123;&quot;id&quot;:&quot;source&quot;&#125;,&#123;&quot;id&quot;:&quot;sticky&quot;&#125;,&#123;&quot;id&quot;:&quot;unicode&quot;&#125;,&#123;&quot;id&quot;:&quot;compile&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;test&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;input&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;input&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$_&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$_&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastMatch&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastMatch&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&amp;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&amp;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastParen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;lastParen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$+&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$+&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;leftContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;leftContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#96;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#96;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;rightContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;rightContext&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#39;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$&#39;&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$3&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$3&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$4&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$4&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$5&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$5&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$6&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$6&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$7&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$7&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$8&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$8&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$9&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;$9&quot;&#125;],&quot;id&quot;:&quot;RegExp&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;then&quot;&#125;,&#123;&quot;id&quot;:&quot;catch&quot;&#125;,&#123;&quot;id&quot;:&quot;finally&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;all&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;race&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;resolve&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;reject&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;allSettled&quot;&#125;],&quot;id&quot;:&quot;Promise&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;revocable&quot;&#125;],&quot;id&quot;:&quot;Proxy&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;clear&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;id&quot;:&quot;size&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Map&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;WeakMap&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;add&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;clear&quot;&#125;,&#123;&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;id&quot;:&quot;forEach&quot;&#125;,&#123;&quot;id&quot;:&quot;size&quot;&#125;,&#123;&quot;id&quot;:&quot;values&quot;&#125;,&#123;&quot;id&quot;:&quot;keys&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Set&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;delete&quot;&#125;,&#123;&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;id&quot;:&quot;add&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;WeakSet&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;arguments&quot;&#125;,&#123;&quot;id&quot;:&quot;caller&quot;&#125;,&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;apply&quot;&#125;,&#123;&quot;id&quot;:&quot;bind&quot;&#125;,&#123;&quot;id&quot;:&quot;call&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Function&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Boolean&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;anchor&quot;&#125;,&#123;&quot;id&quot;:&quot;big&quot;&#125;,&#123;&quot;id&quot;:&quot;blink&quot;&#125;,&#123;&quot;id&quot;:&quot;bold&quot;&#125;,&#123;&quot;id&quot;:&quot;charAt&quot;&#125;,&#123;&quot;id&quot;:&quot;charCodeAt&quot;&#125;,&#123;&quot;id&quot;:&quot;codePointAt&quot;&#125;,&#123;&quot;id&quot;:&quot;concat&quot;&#125;,&#123;&quot;id&quot;:&quot;endsWith&quot;&#125;,&#123;&quot;id&quot;:&quot;fontcolor&quot;&#125;,&#123;&quot;id&quot;:&quot;fontsize&quot;&#125;,&#123;&quot;id&quot;:&quot;fixed&quot;&#125;,&#123;&quot;id&quot;:&quot;includes&quot;&#125;,&#123;&quot;id&quot;:&quot;indexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;italics&quot;&#125;,&#123;&quot;id&quot;:&quot;lastIndexOf&quot;&#125;,&#123;&quot;id&quot;:&quot;link&quot;&#125;,&#123;&quot;id&quot;:&quot;localeCompare&quot;&#125;,&#123;&quot;id&quot;:&quot;match&quot;&#125;,&#123;&quot;id&quot;:&quot;matchAll&quot;&#125;,&#123;&quot;id&quot;:&quot;normalize&quot;&#125;,&#123;&quot;id&quot;:&quot;padEnd&quot;&#125;,&#123;&quot;id&quot;:&quot;padStart&quot;&#125;,&#123;&quot;id&quot;:&quot;repeat&quot;&#125;,&#123;&quot;id&quot;:&quot;replace&quot;&#125;,&#123;&quot;id&quot;:&quot;search&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;,&#123;&quot;id&quot;:&quot;small&quot;&#125;,&#123;&quot;id&quot;:&quot;split&quot;&#125;,&#123;&quot;id&quot;:&quot;strike&quot;&#125;,&#123;&quot;id&quot;:&quot;sub&quot;&#125;,&#123;&quot;id&quot;:&quot;substr&quot;&#125;,&#123;&quot;id&quot;:&quot;substring&quot;&#125;,&#123;&quot;id&quot;:&quot;sup&quot;&#125;,&#123;&quot;id&quot;:&quot;startsWith&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;trim&quot;&#125;,&#123;&quot;id&quot;:&quot;trimStart&quot;&#125;,&#123;&quot;id&quot;:&quot;trimLeft&quot;&#125;,&#123;&quot;id&quot;:&quot;trimEnd&quot;&#125;,&#123;&quot;id&quot;:&quot;trimRight&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleLowerCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleUpperCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toLowerCase&quot;&#125;,&#123;&quot;id&quot;:&quot;toUpperCase&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromCharCode&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromCodePoint&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;raw&quot;&#125;],&quot;id&quot;:&quot;String&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toExponential&quot;&#125;,&#123;&quot;id&quot;:&quot;toFixed&quot;&#125;,&#123;&quot;id&quot;:&quot;toPrecision&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;toLocaleString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFinite&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isInteger&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isNaN&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isSafeInteger&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseFloat&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parseInt&quot;&#125;],&quot;id&quot;:&quot;Number&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;,&#123;&quot;id&quot;:&quot;valueOf&quot;&#125;,&#123;&quot;id&quot;:&quot;description&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;for&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;keyFor&quot;&#125;],&quot;id&quot;:&quot;Symbol&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;assign&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptors&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyNames&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertySymbols&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;is&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;preventExtensions&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;seal&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;create&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperties&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;freeze&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;setPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isExtensible&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isFrozen&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isSealed&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;keys&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;entries&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fromEntries&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;values&quot;&#125;],&quot;id&quot;:&quot;Object&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;,&#123;&quot;id&quot;:&quot;toString&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;captureStackTrace&quot;&#125;],&quot;id&quot;:&quot;Error&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;EvalError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;RangeError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;ReferenceError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;SyntaxError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;TypeError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;message&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;URIError&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isView&quot;&#125;],&quot;id&quot;:&quot;ArrayBuffer&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;slice&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;SharedArrayBuffer&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;buffer&quot;&#125;,&#123;&quot;id&quot;:&quot;byteLength&quot;&#125;,&#123;&quot;id&quot;:&quot;byteOffset&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt8&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt8&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint8&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint8&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt16&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt16&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint16&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint16&quot;&#125;,&#123;&quot;id&quot;:&quot;getInt32&quot;&#125;,&#123;&quot;id&quot;:&quot;setInt32&quot;&#125;,&#123;&quot;id&quot;:&quot;getUint32&quot;&#125;,&#123;&quot;id&quot;:&quot;setUint32&quot;&#125;,&#123;&quot;id&quot;:&quot;getFloat32&quot;&#125;,&#123;&quot;id&quot;:&quot;setFloat32&quot;&#125;,&#123;&quot;id&quot;:&quot;getFloat64&quot;&#125;,&#123;&quot;id&quot;:&quot;setFloat64&quot;&#125;,&#123;&quot;id&quot;:&quot;getBigInt64&quot;&#125;,&#123;&quot;id&quot;:&quot;setBigInt64&quot;&#125;,&#123;&quot;id&quot;:&quot;getBigUint64&quot;&#125;,&#123;&quot;id&quot;:&quot;setBigUint64&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;DataView&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Float32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Float64Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int8Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int16Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Int32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint8Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint16Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint32Array&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[&#123;&quot;id&quot;:&quot;constructor&quot;&#125;,&#123;&quot;id&quot;:&quot;BYTES_PER_ELEMENT&quot;&#125;],&quot;id&quot;:&quot;prototype&quot;&#125;],&quot;id&quot;:&quot;Uint8ClampedArray&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;load&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;store&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;add&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sub&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;and&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;or&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;xor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;exchange&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;compareExchange&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isLockFree&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;wait&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;wake&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;notify&quot;&#125;],&quot;id&quot;:&quot;Atomics&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;parse&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;stringify&quot;&#125;],&quot;id&quot;:&quot;JSON&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;abs&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;acos&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;acosh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;asin&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;asinh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atan&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atanh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;atan2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;ceil&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cbrt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;expm1&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;clz32&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cos&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;cosh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;exp&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;floor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;fround&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;hypot&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;imul&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log1p&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log2&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;log10&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;max&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;min&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;pow&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;random&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;round&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sign&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sin&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sinh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;sqrt&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;tan&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;tanh&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;trunc&quot;&#125;],&quot;id&quot;:&quot;Math&quot;&#125;,&#123;&quot;children&quot;:[&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;defineProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;deleteProperty&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;apply&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;construct&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;get&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getOwnPropertyDescriptor&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;getPrototypeOf&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;has&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;isExtensible&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;ownKeys&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;preventExtensions&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;set&quot;&#125;,&#123;&quot;children&quot;:[],&quot;id&quot;:&quot;setPrototypeOf&quot;&#125;],&quot;id&quot;:&quot;Reflect&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure></code></pre></li>\n</ul>\n</li>\n<li><p>绘制 G6 Tree Graph</p>\n<ul>\n<li><p>需要在 HTML 中创建一个用于容纳 G6 绘制的图的容器，通常为 div  标签。G6 在绘制时会在该容器下追加 canvas 标签，然后将图绘制在其中。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"container\"</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>引入 G6 的数据源为 JSON 格式的对象。即上面我们处理过的 globalObject</p>\n</li>\n<li><p>创建关系图（实例化）时，至少需要为图设置容器、宽和高。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> width = <span class=\"built_in\">window</span>.devicePixelRatio * <span class=\"built_in\">window</span>.screen.width * <span class=\"number\">0.5</span>; <span class=\"comment\">// 高清显示</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">window</span>.devicePixelRatio * <span class=\"built_in\">window</span>.screen.height;</span><br><span class=\"line\"><span class=\"keyword\">const</span> graph = <span class=\"keyword\">new</span> G6.TreeGraph(&#123;</span><br><span class=\"line\">  container: <span class=\"string\">'container'</span>,</span><br><span class=\"line\">  width,</span><br><span class=\"line\">  height,</span><br><span class=\"line\">  modes: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'collapse-expand'</span>,</span><br><span class=\"line\">        onChange: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChange</span>(<span class=\"params\">item, collapsed</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> data = item.get(<span class=\"string\">'model'</span>).data;</span><br><span class=\"line\">          data.collapsed = collapsed;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'drag-canvas'</span>,</span><br><span class=\"line\">      <span class=\"string\">'zoom-canvas'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  defaultNode: &#123;</span><br><span class=\"line\">    size: <span class=\"number\">26</span>,</span><br><span class=\"line\">    anchorPoints: [</span><br><span class=\"line\">      [<span class=\"number\">0</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">      [<span class=\"number\">1</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      fill: <span class=\"string\">'#C6E5FF'</span>,</span><br><span class=\"line\">      stroke: <span class=\"string\">'#5B8FF9'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  defaultEdge: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'cubic-horizontal'</span>,</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      stroke: <span class=\"string\">'#A3B1BF'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  layout: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'compactBox'</span>,</span><br><span class=\"line\">    direction: <span class=\"string\">'LR'</span>,</span><br><span class=\"line\">    getId: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getId</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> d.id;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHeight: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getWidth: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWidth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getVGap: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVGap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHGap: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHGap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置数据源，渲染</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph.data(data);</span><br><span class=\"line\"> graph.render();</span><br><span class=\"line\"> graph.fitView();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行截图</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/348969f29ced9ddcebac4fce71a1de42543229.png\" alt=\"g6\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/antv-g6-realm\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Toy-Browser-DAY4","date":"2020-05-22T13:16:54.000Z","description":["浏览器 -- toy-browser"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 嘻嘻嘻，我们将要在做 toy-browser 浏览器相关排版问题啦\n- ![DOM with CSS](http://p0.meituan.net/myvideodistribute/6d5c67d3d5d0633bf667bd680f6dfb9489753.png)\n\n<!-- more -->\n\n### 第一步：初始化\n- 我们采用以下 html 代码段\n\n\t```html\n\t<html maaa=a >\n\t    <head>\n\t        <style>\n\t    #container{\n\t        width:500px;\n\t        height:300px;\n\t        display:flex;\n\t        background-color:rgb(255,255,255);\n\t    }\n\t    #container #myid{\n\t      width:200px;\n\t      height:100px;\n\t      background-color:rgb(255,0,0)\n\t    }\n\t    #container .c1{\n\t      flex:1;\n\t      background-color:rgb(0,255,0)\n\t    }\n\t        </style>\n\t    </head>\n\t    <body>\n\t        <div id=\"container\">\n\t          <div id=\"myid\"></div>\n\t          <div class=\"c1\"></div>\n\t        </div>\n\t    </body>\n    </html>\n\t```\n- 代码逻辑自顶向下\n- 首先，我们在 endTag 的时候进行 layout\n\t- 我们只处理 flex，可以简化成在 endTag 时，进行 layout 即可\n- computeCSS7.js\n\n\t```javascript\n\tconst layout = require(\"./layout.js\")\n\t\n\t// ... some code\n\t\n\tfunction emit(token) {\n\t\t\n\t  // ... some code\n\t\t\n\t  if (token.type == \"startTag\") {\n\t\t    \n\t\t // ... some code\n\t\t\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      /** 遇到 style 标签时，执行添加 CCS 规则的操作 */\n\t      if (top.tagName === \"style\") {\n\t        addCSSRules(top.children[0].content)\n\t      }\n\t      layout(top)\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  } else if (token.type == \"text\") {\n\t\t    \n\t\t // ... some code\n\t\t\n\t  }\n\t}\n\t```\n#### flex 布局基础概念\n\t\n- ![flex 排版解释图](http://p0.meituan.net/myvideodistribute/1e160d5f7cbdc299f68d432dcb19cca1137896.png)\n\n\t> 给 div 这类块状元素元素设置 display: flex 或者给 span 这类内联元素设置 display: inline-flex ，flex 布局即创建！其中，直接设置 display: flex 或者 display: inline-flex 的元素称为 flex 容器，里面的子元素称为 flex 子项。\n\n\t- ![flex 相关方法概览](http://p1.meituan.net/myvideodistribute/0f5622ba2bab24f882be6007f6761a4422506.png)\n\n- 由上 felx 布局中的 主轴，交叉轴图示，我们可以先定义变量\n\t\n\t```javascript\n\tmainSize, // 主轴size width / height\n\tmainStart, // 主轴起点 left / right / top / bottom\n\tmainEnd, // 主轴终点 left / right / top / bottom\n\tmainSign, // 主轴符号位，用于 是否 reverse +1 / -1\n\tmainBase, // 主轴开始的位置 0 / style.width\n\tcrossSize, // 交叉轴size width / height\n\tcrossStart, // 交叉轴坐标起点 left / right / top / bottom\n\tcrossEnd, // 交叉轴坐标终点 left / right / top / bottom\n\tcrossSign, // 交叉轴符号位，用于 是否 reverse +1 / -1\n\tcrossBase; // 交叉轴开始的位置 0 / style.width\n\t```\n- 处理 flex 布局中属性默认值\n\t\n\t```javascript\n\tif (!style.flexDirection || style.flexDirection === 'auto')\n\t    style.flexDirection = 'row'\n\tif (!style.alignItems || style.alignItems === 'auto')\n\t    style.alignItems = 'stretch'\n\tif (!style.justifyContent || style.justifyContent === 'auto')\n\t    style.justifyContent = 'flex-start'\n\tif (!style.flexWrap || style.flexWrap === 'auto')\n\t    style.flexWrap = 'nowrap'\n\tif (!style.alignContent || style.alignContent === 'auto')\n\t    style.alignContent = 'center'\n\t```\n#### flex-direction\n- ![MDN flex-direction 语法解释](http://p0.meituan.net/myvideodistribute/bec69e2fc98cf7ebfaad21b5d166030361399.png)\n\t- flex-direction: row\n\t\t- 默认值，显示为行。方向为当前文档水平流方向，默认情况下是从左往右。\n\t\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'row') {\n\t\t\t\tmainSize = 'width'\n\t\t\t\tmainStart = 'left'\n\t\t\t\tmainEnd = 'right'\n\t\t\t\tmainSign = +1\n\t\t\t\tmainBase = 0\n\t\t\t\t\t\n\t\t\t\tcrossSize = 'height'\n\t\t\t\tcrossStart = 'top'\n\t\t\t\tcrossEnd = 'bottom'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: row-reverse\n\t\t- 显示为行。但方向和row属性值是反的。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'row-reverse') {\n\t\t\t    mainSize = 'width'\n\t\t\t    mainStart = 'right'\n\t\t\t    mainEnd = 'left'\n\t\t\t    mainSign = -1\n\t\t\t    mainBase = style.width\n\t\t\t\n\t\t\t    crossSize = 'height'\n\t\t\t    crossStart = 'top'\n\t\t\t    crossEnd = 'bottom'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: column\n\t\t- 显示为列。方向为当前文档垂直流方向，默认情况下是从上至下。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'column') {\n\t\t\t    mainSize = 'height'\n\t\t\t    mainStart = 'top'\n\t\t\t    mainEnd = 'bottom'\n\t\t\t    mainSign = +1\n\t\t\t    mainBase = 0\n\t\t\t\n\t\t\t    crossSize = 'width'\n\t\t\t    crossStart = 'left'\n\t\t\t    crossEnd = 'right'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: column-reverse\n\t\t- 显示为列。但方向和column属性值是反的。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'column-reverse') {\n\t\t\t    mainSize = 'height'\n\t\t\t    mainStart = 'bottom'\n\t\t\t    mainEnd = 'top'\n\t\t\t    mainSign = -1\n\t\t\t    mainBase = style.height\n\t\t\t\n\t\t\t    crossSize = 'width'\n\t\t\t    crossStart = 'left'\n\t\t\t    crossEnd = 'right'\n\t\t\t}\n\t\t\t```\n\t\t\n#### flex-wrap\n- ![MDN flex-wrap语法解释](http://p0.meituan.net/myvideodistribute/137acf28be957d3b145c9571e3af265462518.png)\n\t- flex-wrap: nowrap\n\t\t- 默认值，表示单行显示，不换行。于是很容易出现宽度溢出的场景，其渲染表现比较复杂，需要对CSS3宽度有一定了解。这边我们简单处理为：（以水平布局举例）\n\t\t\t- flex 子项宽度 width 之和大于 flex 容器宽度，则内容溢出，表现和 white-space: nowrap 类似。\n\t\t\t- flex 子项宽度 width 之和大于 flex 容器宽度，则内容不溢出\n\t\t\t\n\t\t\t```javascript\n\t\t    crossBase = 0\n\t\t    crossSign = +1\n\t\t\t```\n\t\t\n\t- flex-wrap: wrap\n\t\t- 宽度不足换行显示\n\t\t\t\n\t\t\t```javascript\n\t\t    crossBase = 0\n\t\t    crossSign = +1\n\t\t\t```\n\n\t- flex-wrap: wrap-reverse\n\t\t- 宽度不足换行显示，但是是从下往上开始，也就是原本换行在下面的子项现在跑到上面\n\n\t\t\t```javascript\n\t\t\tif (style.flexWrap === 'wrap-reverse') {\n\t\t\t    let temp = crossStart\n\t\t\t    crossStart = crossEnd\n\t\t\t    crossEnd = temp\n\t\t\t    crossSign = -1\n\t\t\t}\n\t\t\t```\n\n\t\n- [layout1.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout1.js)\n\n\n### 第二步：收集元素进行\n- flex 容器没有设置 mainSize，直接撑开，count flex 子项 mainSize\n\n\t```javascript\n  let isAutoMainSize = false\n  // 没有设置 mainSize 直接撑开\n  if (!style[mainSize]) { // auto sizing\n\t\telementStyle[mainSize] = 0\n\t\tfor (let i = 0; i < items.length; i ++) {\n\t\t    let item = items[i]\n\t\t    if (itemStyle[mainSize] !== null || itemStyle[mainSize] !== (void 0)) \n\t\t      elementStyle[mainSize] = elementStyle[mainSize] + itemStyle[mainSize]\n\t\t}\n\t\tisAutoMainSize = true\n  }\n\t```\n\t\n- flex 容器 flex-wrap: no-wrap && isAutoMainSize，mainSpace 为0，允许撑大，**强行分进第一行**\n\n\t```javascript\n\tif (style.flexWrap === 'nowrap' && isAutoMainSize) {\n      mainSpace -= itemStyle[mainSize]\n      if (itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) {\n        crossSpace = Math.max(crossSpace, itemStyle[crossSize])\n      }\n      flexLine.push(item)\n    }\n\t```\n- flex 子项 display 为 flex，直接塞进当前行，mainSpace 不作处理，后续自适应\n\t- flex: none | auto | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\n\t\t```javascript\n\t    if (itemStyle.flex) {\n\t\t      flexLine.push(item)\n\t\t   } \n\t\t```\n- flex 容器是否换行\n\t\n\t```javascript\n\t// 当前flex 子项，大于 flex mainSize,自适应\n\tif (itemStyle[mainSize] > style[mainSize]) {\n\t    itemStyle[mainSize] = style[mainSize]\n\t}\n\t// 当前flex 子项，大于 flex 容器剩余 mainSpace，另起新行\n\tif (mainSpace < itemStyle[mainSize]) {\n\t    flexLine.mainSpace = mainSpace\n\t    flexLine.crossSpace = crossSpace\n\t\n\t    // 创建新行\n\t    flexLine = []\n\t    flexLines.push(flexLine)\n\t    flexLine.push(item)\n\t\n\t    mainSpace = style[mainSize]\n\t    crossSpace = 0\n\t} else { // 未超过 flex 容器剩余 mainSpace，添加进行 \n\t    flexLine.push(item)\n\t}\n\t// 处理交叉轴，只需要取 flex 子项最大 crossSize\n\tif (itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) {\n\t    crossSpace = Math.max(crossSpace, itemStyle[crossSize])\n\t}\n\t// flex 容器剩余 mainSpace\n\tmainSpace -= itemStyle[mainSize]\n\t```\n- [layout2.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout2.js)\n\t\n### 第三步：计算主轴\n- 计算主轴方向\n\t- 找出所有 flex 子项也为 flex 元素\n\n\t\t```javascript\n\t    for (let i = 0; i < items.length; i++) {\n\t        const item = items[i]\n\t        const itemStyle = getStyle(item)\n\t\n\t        if ((itemStyle.flex !== null) && (itemStyle.flex !== (void 0))) {\n\t          flexTotal += itemStyle.flex\n\t          continue\n\t        }\n\t    }\n\t\t```\n\t\t- 存在 flex 子项也为 flex\n\t\t\t- 填充 flexLine 剩余 mainSpace 空间\n\n\t\t\t\t```javascript\n\n\t\t        const currentMain = mainBase\n\t\t\n\t\t        for (let i = 0; i < items.length; i++) {\n\t\t          const item = items[i]\n\t\t          const itemStyle = getStyle(item)\n\t\t\n\t\t          if (itemStyle.flex) {\n\t\t            itemStyle[mainSize] = (mainSpace / flexTotal) * itemStyle.flex\n\t\t          }\n\t\t          itemStyle[mainStart] = currentMain\n\t\t          itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t\t          currentMain = itemStyle[mainEnd]\n\t\t        }\n\t\t\t\t```\n\t\t\n\t\t- 不存在 flex 子项也为 flex，把主轴方向剩余尺寸按比例分配给这些元素\n\t\t- justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;\n\t\t\t- justify-content: flex-start\n\t\t\t\t- 默认值\n\n\t\t\t\t\t```javascript\n\t\t\t\t\tif (!style.justifyContent || style.justifyContent === 'auto')\n\t\t\t\t\t    style.justifyContent = 'flex-start'\n\t\t\t\t\t```\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'flex-start') {\n\t\t\t          currentMain = mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: flex-end\n\t\t\t\t- 逻辑CSS属性值，与默认文档流方向相反\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'flex-start') {\n\t\t\t          currentMain = mainSpace * mainSign + mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: center\n\t\t\t\t- 居中对齐\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'center') {\n\t\t\t          currentMain = mainSpace / 2 * mainSign + mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-between\n\t\t\t\t- 表现为两端对齐。between 是中间的意思，意思是多余的空白间距只在元素中间区域分配\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-between') {\n\t\t\t          gap = mainSpace / (items.length - 1) * mainSign\n\t\t\t          currentMain = mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-around\n\t\t\t\t- around 是环绕的意思，意思是每个 flex 子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-around') {\n\t\t\t          gap = mainSpace / items.length * mainSign\n\t\t\t          currentMain = gap / 2 + mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-evenly\n\t\t\t\t- evenly 是匀称、平等的意思。也就是视觉上，每个 flex 子项两侧空白间距完全相等\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-evenly') {\n\t\t\t          gap = mainSpace / (items.length + 1) * mainSign\n\t\t\t          currentMain = gap + mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t- 循环计算 flex 子项位置\n\t\t\t\n\t\t\t```javascript\n\t        for (let i = 0; i < items.length; i++) {\n\t          const item = items[i]\n\t          itemStyle[mainStart] = currentMain\n\t          itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t          currentMain = itemStyle[mainEnd] + gap\n\t        }\n\t\t\t```\n\t\t\n\t- 若剩余空间为负数，所有 flex 元素为 0，等比压缩剩余元素\n\n\t\t```javascript\n\t\tif (mainSpace < 0) {\n\t\t    // 对负的 mainSpace， 所有该行 flex 子项等比例缩放（未设置 flex-shrink 默认值是1，也就是默认所有的 flex 子项都会收缩）\n\t\t    const scale = style[mainSize] / (style[mainSize] - mainSpace)\n\t\t    const currentMain = mainBase\n\t\t    for (let i = 0; i < items.length; i ++) {\n\t\t      const item = items[i]\n\t\t      const itemStyle = getStyle(item)\n\t\t\t\n\t\t      if (itemStyle.flex) {\n\t\t        itemStyle[mainSize] = 0\n\t\t      }\n\t\t\t\n\t\t      itemStyle[mainSize] = itemStyle[mainSize] * scale\n\t\t\t\n\t\t      // flex 容器这一行内，flex 子项排布\n\t\t      itemStyle[mainStart] = currentMain\n\t\t      itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t\t      currentMain = itemStyle[mainEnd]\n\t\t    }\n \t\t}\n\t\t```\n- [layout3.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout3.js)\n\t\t\n### 第四步：计算交叉轴\n- 计算交叉轴方向\n\t- 根据每一行中最大元素尺寸计算行高\n\n\t\t```javascript\n\t\tif (!style[crossSize]) { // 交叉轴，crossSize 未设定时默认为 count flexLines 每行最大 crossSpace 之和 \n\t\t    crossSpace = 0\n\t\t    elementStyle[crossSize] = 0\n\t\t    for (let i = 0; i < flexLines.length; i ++) {\n\t\t      elementStyle[crossSize] = elementStyle[crossSize] + flexLines[i].crossSpace\n\t\t    }\n\t\t} else { // 设定后，计算出 最终的 crossSpace，为 crossSpace 减去每行最大 crossSpace，剩余空间，用作分配\n\t\t    crossSpace = style[crossSize]\n\t\t    for (let i = 0; i < flexLines.length; i ++) {\n\t\t      crossSpace -= flexLines[i].crossSpace\n\t\t    }\n\t\t}\n\t\t```\n\t- 根据行高 flex-align 和 item-align，确定元素具体位置\n\n\t\t```javascript\n\t\t\n\t\tflexLines.forEach(function (items) {\n\t\t    let lineCrossSize = style.alignContent === 'stretch' ? // 拉伸 flex 子项，填满交叉轴\n\t\t      items.crossSpace + crossSpace / flexLines.length :\n\t\t      item.crossSpace\n\t\t\n\t\t    for (let i = 0; i < items.length; i ++) {\n\t\t      const item = items[i]\n\t\t      const itemStyle = getStyle(item)\n\t\t\n\t\t      const align = itemStyle.alignSelf || style.alignItems // align-self指控制单独某一个flex子项的垂直对齐方式\n\t\t      // align-items属性，表示子项们\n\t\t\n\t\t      if (itemStyle[crossSize] === null) {\n\t\t        itemStyle[crossSize] = (align === 'stretch') ?\n\t\t          lineCrossSize : 0\n\t\t      }\n\t\t\n\t\t      if (align === 'flex-start') {\n\t\t        itemStyle[crossStart] = crossBase\n\t\t        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'flex-end') {\n\t\t        itemStyle[crossEnd] = crossBase + crossSign * lineCrossSize\n\t\t        itemStyle[crossStart] = itemStyle[crossEnd] - crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'center') {\n\t\t        itemStyle[crossStart] = crossBase + crossSign * (lineCrossSize - itemStyle[crossSize]) / 2\n\t\t        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'stretch') {\n\t\t        itemStyle[crossStart] = crossBase\n\t\t        itemStyle[crossEnd] = crossBase + crossSign * ((itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) ?\n\t\t          itemStyle[crossSize] : lineCrossSize)\n\t\t\n\t\t        itemStyle[crossSize] = crossSign * (itemStyle[crossEnd] - itemStyle[crossStart])\n\t\t      }\n\t\t    }\n\t\t    crossBase += crossSign * (lineCrossSize + step)\n\t  })\n\t\t```\n- 运行结果\n\t- ![第四步运行结果](http://p0.meituan.net/myvideodistribute/0e488c9e6c482d1d67f2a1872a58aa0d231450.png)\n\n- [layout4.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout4.js)\n\n\n\n\n## 参考文献\n- [display: flex 教程](https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/#justify-content)\n- [Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [MDN Flex](https://developer.mozilla.org/en-US/docs/Glossary/Flex)\n\n\n\n## 写在后面\n- 祝大家多多发财\n","source":"_posts/Toy-Browser-DAY4.md","raw":"---\ntitle: Toy-Browser-DAY4\ndate: 2020-05-22 21:16:54\ntags:\n- 浏览器\ncategories:\n- 浏览器\ndescription:\n- 浏览器 -- toy-browser\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- 嘻嘻嘻，我们将要在做 toy-browser 浏览器相关排版问题啦\n- ![DOM with CSS](http://p0.meituan.net/myvideodistribute/6d5c67d3d5d0633bf667bd680f6dfb9489753.png)\n\n<!-- more -->\n\n### 第一步：初始化\n- 我们采用以下 html 代码段\n\n\t```html\n\t<html maaa=a >\n\t    <head>\n\t        <style>\n\t    #container{\n\t        width:500px;\n\t        height:300px;\n\t        display:flex;\n\t        background-color:rgb(255,255,255);\n\t    }\n\t    #container #myid{\n\t      width:200px;\n\t      height:100px;\n\t      background-color:rgb(255,0,0)\n\t    }\n\t    #container .c1{\n\t      flex:1;\n\t      background-color:rgb(0,255,0)\n\t    }\n\t        </style>\n\t    </head>\n\t    <body>\n\t        <div id=\"container\">\n\t          <div id=\"myid\"></div>\n\t          <div class=\"c1\"></div>\n\t        </div>\n\t    </body>\n    </html>\n\t```\n- 代码逻辑自顶向下\n- 首先，我们在 endTag 的时候进行 layout\n\t- 我们只处理 flex，可以简化成在 endTag 时，进行 layout 即可\n- computeCSS7.js\n\n\t```javascript\n\tconst layout = require(\"./layout.js\")\n\t\n\t// ... some code\n\t\n\tfunction emit(token) {\n\t\t\n\t  // ... some code\n\t\t\n\t  if (token.type == \"startTag\") {\n\t\t    \n\t\t // ... some code\n\t\t\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      /** 遇到 style 标签时，执行添加 CCS 规则的操作 */\n\t      if (top.tagName === \"style\") {\n\t        addCSSRules(top.children[0].content)\n\t      }\n\t      layout(top)\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  } else if (token.type == \"text\") {\n\t\t    \n\t\t // ... some code\n\t\t\n\t  }\n\t}\n\t```\n#### flex 布局基础概念\n\t\n- ![flex 排版解释图](http://p0.meituan.net/myvideodistribute/1e160d5f7cbdc299f68d432dcb19cca1137896.png)\n\n\t> 给 div 这类块状元素元素设置 display: flex 或者给 span 这类内联元素设置 display: inline-flex ，flex 布局即创建！其中，直接设置 display: flex 或者 display: inline-flex 的元素称为 flex 容器，里面的子元素称为 flex 子项。\n\n\t- ![flex 相关方法概览](http://p1.meituan.net/myvideodistribute/0f5622ba2bab24f882be6007f6761a4422506.png)\n\n- 由上 felx 布局中的 主轴，交叉轴图示，我们可以先定义变量\n\t\n\t```javascript\n\tmainSize, // 主轴size width / height\n\tmainStart, // 主轴起点 left / right / top / bottom\n\tmainEnd, // 主轴终点 left / right / top / bottom\n\tmainSign, // 主轴符号位，用于 是否 reverse +1 / -1\n\tmainBase, // 主轴开始的位置 0 / style.width\n\tcrossSize, // 交叉轴size width / height\n\tcrossStart, // 交叉轴坐标起点 left / right / top / bottom\n\tcrossEnd, // 交叉轴坐标终点 left / right / top / bottom\n\tcrossSign, // 交叉轴符号位，用于 是否 reverse +1 / -1\n\tcrossBase; // 交叉轴开始的位置 0 / style.width\n\t```\n- 处理 flex 布局中属性默认值\n\t\n\t```javascript\n\tif (!style.flexDirection || style.flexDirection === 'auto')\n\t    style.flexDirection = 'row'\n\tif (!style.alignItems || style.alignItems === 'auto')\n\t    style.alignItems = 'stretch'\n\tif (!style.justifyContent || style.justifyContent === 'auto')\n\t    style.justifyContent = 'flex-start'\n\tif (!style.flexWrap || style.flexWrap === 'auto')\n\t    style.flexWrap = 'nowrap'\n\tif (!style.alignContent || style.alignContent === 'auto')\n\t    style.alignContent = 'center'\n\t```\n#### flex-direction\n- ![MDN flex-direction 语法解释](http://p0.meituan.net/myvideodistribute/bec69e2fc98cf7ebfaad21b5d166030361399.png)\n\t- flex-direction: row\n\t\t- 默认值，显示为行。方向为当前文档水平流方向，默认情况下是从左往右。\n\t\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'row') {\n\t\t\t\tmainSize = 'width'\n\t\t\t\tmainStart = 'left'\n\t\t\t\tmainEnd = 'right'\n\t\t\t\tmainSign = +1\n\t\t\t\tmainBase = 0\n\t\t\t\t\t\n\t\t\t\tcrossSize = 'height'\n\t\t\t\tcrossStart = 'top'\n\t\t\t\tcrossEnd = 'bottom'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: row-reverse\n\t\t- 显示为行。但方向和row属性值是反的。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'row-reverse') {\n\t\t\t    mainSize = 'width'\n\t\t\t    mainStart = 'right'\n\t\t\t    mainEnd = 'left'\n\t\t\t    mainSign = -1\n\t\t\t    mainBase = style.width\n\t\t\t\n\t\t\t    crossSize = 'height'\n\t\t\t    crossStart = 'top'\n\t\t\t    crossEnd = 'bottom'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: column\n\t\t- 显示为列。方向为当前文档垂直流方向，默认情况下是从上至下。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'column') {\n\t\t\t    mainSize = 'height'\n\t\t\t    mainStart = 'top'\n\t\t\t    mainEnd = 'bottom'\n\t\t\t    mainSign = +1\n\t\t\t    mainBase = 0\n\t\t\t\n\t\t\t    crossSize = 'width'\n\t\t\t    crossStart = 'left'\n\t\t\t    crossEnd = 'right'\n\t\t\t}\n\t\t\t```\n\t- flex-direction: column-reverse\n\t\t- 显示为列。但方向和column属性值是反的。\n\t\t\n\t\t\t```javascript\n\t\t\tif (style.flexDirection === 'column-reverse') {\n\t\t\t    mainSize = 'height'\n\t\t\t    mainStart = 'bottom'\n\t\t\t    mainEnd = 'top'\n\t\t\t    mainSign = -1\n\t\t\t    mainBase = style.height\n\t\t\t\n\t\t\t    crossSize = 'width'\n\t\t\t    crossStart = 'left'\n\t\t\t    crossEnd = 'right'\n\t\t\t}\n\t\t\t```\n\t\t\n#### flex-wrap\n- ![MDN flex-wrap语法解释](http://p0.meituan.net/myvideodistribute/137acf28be957d3b145c9571e3af265462518.png)\n\t- flex-wrap: nowrap\n\t\t- 默认值，表示单行显示，不换行。于是很容易出现宽度溢出的场景，其渲染表现比较复杂，需要对CSS3宽度有一定了解。这边我们简单处理为：（以水平布局举例）\n\t\t\t- flex 子项宽度 width 之和大于 flex 容器宽度，则内容溢出，表现和 white-space: nowrap 类似。\n\t\t\t- flex 子项宽度 width 之和大于 flex 容器宽度，则内容不溢出\n\t\t\t\n\t\t\t```javascript\n\t\t    crossBase = 0\n\t\t    crossSign = +1\n\t\t\t```\n\t\t\n\t- flex-wrap: wrap\n\t\t- 宽度不足换行显示\n\t\t\t\n\t\t\t```javascript\n\t\t    crossBase = 0\n\t\t    crossSign = +1\n\t\t\t```\n\n\t- flex-wrap: wrap-reverse\n\t\t- 宽度不足换行显示，但是是从下往上开始，也就是原本换行在下面的子项现在跑到上面\n\n\t\t\t```javascript\n\t\t\tif (style.flexWrap === 'wrap-reverse') {\n\t\t\t    let temp = crossStart\n\t\t\t    crossStart = crossEnd\n\t\t\t    crossEnd = temp\n\t\t\t    crossSign = -1\n\t\t\t}\n\t\t\t```\n\n\t\n- [layout1.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout1.js)\n\n\n### 第二步：收集元素进行\n- flex 容器没有设置 mainSize，直接撑开，count flex 子项 mainSize\n\n\t```javascript\n  let isAutoMainSize = false\n  // 没有设置 mainSize 直接撑开\n  if (!style[mainSize]) { // auto sizing\n\t\telementStyle[mainSize] = 0\n\t\tfor (let i = 0; i < items.length; i ++) {\n\t\t    let item = items[i]\n\t\t    if (itemStyle[mainSize] !== null || itemStyle[mainSize] !== (void 0)) \n\t\t      elementStyle[mainSize] = elementStyle[mainSize] + itemStyle[mainSize]\n\t\t}\n\t\tisAutoMainSize = true\n  }\n\t```\n\t\n- flex 容器 flex-wrap: no-wrap && isAutoMainSize，mainSpace 为0，允许撑大，**强行分进第一行**\n\n\t```javascript\n\tif (style.flexWrap === 'nowrap' && isAutoMainSize) {\n      mainSpace -= itemStyle[mainSize]\n      if (itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) {\n        crossSpace = Math.max(crossSpace, itemStyle[crossSize])\n      }\n      flexLine.push(item)\n    }\n\t```\n- flex 子项 display 为 flex，直接塞进当前行，mainSpace 不作处理，后续自适应\n\t- flex: none | auto | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\n\t\t```javascript\n\t    if (itemStyle.flex) {\n\t\t      flexLine.push(item)\n\t\t   } \n\t\t```\n- flex 容器是否换行\n\t\n\t```javascript\n\t// 当前flex 子项，大于 flex mainSize,自适应\n\tif (itemStyle[mainSize] > style[mainSize]) {\n\t    itemStyle[mainSize] = style[mainSize]\n\t}\n\t// 当前flex 子项，大于 flex 容器剩余 mainSpace，另起新行\n\tif (mainSpace < itemStyle[mainSize]) {\n\t    flexLine.mainSpace = mainSpace\n\t    flexLine.crossSpace = crossSpace\n\t\n\t    // 创建新行\n\t    flexLine = []\n\t    flexLines.push(flexLine)\n\t    flexLine.push(item)\n\t\n\t    mainSpace = style[mainSize]\n\t    crossSpace = 0\n\t} else { // 未超过 flex 容器剩余 mainSpace，添加进行 \n\t    flexLine.push(item)\n\t}\n\t// 处理交叉轴，只需要取 flex 子项最大 crossSize\n\tif (itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) {\n\t    crossSpace = Math.max(crossSpace, itemStyle[crossSize])\n\t}\n\t// flex 容器剩余 mainSpace\n\tmainSpace -= itemStyle[mainSize]\n\t```\n- [layout2.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout2.js)\n\t\n### 第三步：计算主轴\n- 计算主轴方向\n\t- 找出所有 flex 子项也为 flex 元素\n\n\t\t```javascript\n\t    for (let i = 0; i < items.length; i++) {\n\t        const item = items[i]\n\t        const itemStyle = getStyle(item)\n\t\n\t        if ((itemStyle.flex !== null) && (itemStyle.flex !== (void 0))) {\n\t          flexTotal += itemStyle.flex\n\t          continue\n\t        }\n\t    }\n\t\t```\n\t\t- 存在 flex 子项也为 flex\n\t\t\t- 填充 flexLine 剩余 mainSpace 空间\n\n\t\t\t\t```javascript\n\n\t\t        const currentMain = mainBase\n\t\t\n\t\t        for (let i = 0; i < items.length; i++) {\n\t\t          const item = items[i]\n\t\t          const itemStyle = getStyle(item)\n\t\t\n\t\t          if (itemStyle.flex) {\n\t\t            itemStyle[mainSize] = (mainSpace / flexTotal) * itemStyle.flex\n\t\t          }\n\t\t          itemStyle[mainStart] = currentMain\n\t\t          itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t\t          currentMain = itemStyle[mainEnd]\n\t\t        }\n\t\t\t\t```\n\t\t\n\t\t- 不存在 flex 子项也为 flex，把主轴方向剩余尺寸按比例分配给这些元素\n\t\t- justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;\n\t\t\t- justify-content: flex-start\n\t\t\t\t- 默认值\n\n\t\t\t\t\t```javascript\n\t\t\t\t\tif (!style.justifyContent || style.justifyContent === 'auto')\n\t\t\t\t\t    style.justifyContent = 'flex-start'\n\t\t\t\t\t```\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'flex-start') {\n\t\t\t          currentMain = mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: flex-end\n\t\t\t\t- 逻辑CSS属性值，与默认文档流方向相反\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'flex-start') {\n\t\t\t          currentMain = mainSpace * mainSign + mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: center\n\t\t\t\t- 居中对齐\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'center') {\n\t\t\t          currentMain = mainSpace / 2 * mainSign + mainBase\n\t\t\t          gap = 0\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-between\n\t\t\t\t- 表现为两端对齐。between 是中间的意思，意思是多余的空白间距只在元素中间区域分配\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-between') {\n\t\t\t          gap = mainSpace / (items.length - 1) * mainSign\n\t\t\t          currentMain = mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-around\n\t\t\t\t- around 是环绕的意思，意思是每个 flex 子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-around') {\n\t\t\t          gap = mainSpace / items.length * mainSign\n\t\t\t          currentMain = gap / 2 + mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t\t- justify-content: space-evenly\n\t\t\t\t- evenly 是匀称、平等的意思。也就是视觉上，每个 flex 子项两侧空白间距完全相等\n\n\t\t\t\t\t```javascript\n\t\t\t        if (style.justifyContent === 'space-evenly') {\n\t\t\t          gap = mainSpace / (items.length + 1) * mainSign\n\t\t\t          currentMain = gap + mainBase\n\t\t\t        }\n\t\t\t\t\t```\n\t\t- 循环计算 flex 子项位置\n\t\t\t\n\t\t\t```javascript\n\t        for (let i = 0; i < items.length; i++) {\n\t          const item = items[i]\n\t          itemStyle[mainStart] = currentMain\n\t          itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t          currentMain = itemStyle[mainEnd] + gap\n\t        }\n\t\t\t```\n\t\t\n\t- 若剩余空间为负数，所有 flex 元素为 0，等比压缩剩余元素\n\n\t\t```javascript\n\t\tif (mainSpace < 0) {\n\t\t    // 对负的 mainSpace， 所有该行 flex 子项等比例缩放（未设置 flex-shrink 默认值是1，也就是默认所有的 flex 子项都会收缩）\n\t\t    const scale = style[mainSize] / (style[mainSize] - mainSpace)\n\t\t    const currentMain = mainBase\n\t\t    for (let i = 0; i < items.length; i ++) {\n\t\t      const item = items[i]\n\t\t      const itemStyle = getStyle(item)\n\t\t\t\n\t\t      if (itemStyle.flex) {\n\t\t        itemStyle[mainSize] = 0\n\t\t      }\n\t\t\t\n\t\t      itemStyle[mainSize] = itemStyle[mainSize] * scale\n\t\t\t\n\t\t      // flex 容器这一行内，flex 子项排布\n\t\t      itemStyle[mainStart] = currentMain\n\t\t      itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]\n\t\t      currentMain = itemStyle[mainEnd]\n\t\t    }\n \t\t}\n\t\t```\n- [layout3.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout3.js)\n\t\t\n### 第四步：计算交叉轴\n- 计算交叉轴方向\n\t- 根据每一行中最大元素尺寸计算行高\n\n\t\t```javascript\n\t\tif (!style[crossSize]) { // 交叉轴，crossSize 未设定时默认为 count flexLines 每行最大 crossSpace 之和 \n\t\t    crossSpace = 0\n\t\t    elementStyle[crossSize] = 0\n\t\t    for (let i = 0; i < flexLines.length; i ++) {\n\t\t      elementStyle[crossSize] = elementStyle[crossSize] + flexLines[i].crossSpace\n\t\t    }\n\t\t} else { // 设定后，计算出 最终的 crossSpace，为 crossSpace 减去每行最大 crossSpace，剩余空间，用作分配\n\t\t    crossSpace = style[crossSize]\n\t\t    for (let i = 0; i < flexLines.length; i ++) {\n\t\t      crossSpace -= flexLines[i].crossSpace\n\t\t    }\n\t\t}\n\t\t```\n\t- 根据行高 flex-align 和 item-align，确定元素具体位置\n\n\t\t```javascript\n\t\t\n\t\tflexLines.forEach(function (items) {\n\t\t    let lineCrossSize = style.alignContent === 'stretch' ? // 拉伸 flex 子项，填满交叉轴\n\t\t      items.crossSpace + crossSpace / flexLines.length :\n\t\t      item.crossSpace\n\t\t\n\t\t    for (let i = 0; i < items.length; i ++) {\n\t\t      const item = items[i]\n\t\t      const itemStyle = getStyle(item)\n\t\t\n\t\t      const align = itemStyle.alignSelf || style.alignItems // align-self指控制单独某一个flex子项的垂直对齐方式\n\t\t      // align-items属性，表示子项们\n\t\t\n\t\t      if (itemStyle[crossSize] === null) {\n\t\t        itemStyle[crossSize] = (align === 'stretch') ?\n\t\t          lineCrossSize : 0\n\t\t      }\n\t\t\n\t\t      if (align === 'flex-start') {\n\t\t        itemStyle[crossStart] = crossBase\n\t\t        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'flex-end') {\n\t\t        itemStyle[crossEnd] = crossBase + crossSign * lineCrossSize\n\t\t        itemStyle[crossStart] = itemStyle[crossEnd] - crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'center') {\n\t\t        itemStyle[crossStart] = crossBase + crossSign * (lineCrossSize - itemStyle[crossSize]) / 2\n\t\t        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]\n\t\t      }\n\t\t\n\t\t      if (align === 'stretch') {\n\t\t        itemStyle[crossStart] = crossBase\n\t\t        itemStyle[crossEnd] = crossBase + crossSign * ((itemStyle[crossSize] !== null && itemStyle[crossSize] !== (void 0)) ?\n\t\t          itemStyle[crossSize] : lineCrossSize)\n\t\t\n\t\t        itemStyle[crossSize] = crossSign * (itemStyle[crossEnd] - itemStyle[crossStart])\n\t\t      }\n\t\t    }\n\t\t    crossBase += crossSign * (lineCrossSize + step)\n\t  })\n\t\t```\n- 运行结果\n\t- ![第四步运行结果](http://p0.meituan.net/myvideodistribute/0e488c9e6c482d1d67f2a1872a58aa0d231450.png)\n\n- [layout4.js 完整代码-点击一下](https://github.com/Ele-Peng/toy-browser/blob/master/layout4.js)\n\n\n\n\n## 参考文献\n- [display: flex 教程](https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/#justify-content)\n- [Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [MDN Flex](https://developer.mozilla.org/en-US/docs/Glossary/Flex)\n\n\n\n## 写在后面\n- 祝大家多多发财\n","slug":"Toy-Browser-DAY4","published":1,"updated":"2020-05-26T15:14:23.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xe00331wp3a87m0imh","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>嘻嘻嘻，我们将要在做 toy-browser 浏览器相关排版问题啦</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6d5c67d3d5d0633bf667bd680f6dfb9489753.png\" alt=\"DOM with CSS\"></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"第一步：初始化\"><a href=\"#第一步：初始化\" class=\"headerlink\" title=\"第一步：初始化\"></a>第一步：初始化</h3><ul>\n<li><p>我们采用以下 html 代码段</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:500px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:flex</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,255,255);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,0,0)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c1</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">flex</span><span class=\"selector-pseudo\">:1</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,255,0)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>代码逻辑自顶向下</p>\n</li>\n<li><p>首先，我们在 endTag 的时候进行 layout</p>\n<ul>\n<li>我们只处理 flex，可以简化成在 endTag 时，进行 layout 即可</li>\n</ul>\n</li>\n<li><p>computeCSS7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> layout = <span class=\"built_in\">require</span>(<span class=\"string\">\"./layout.js\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      <span class=\"comment\">/** 遇到 style 标签时，执行添加 CCS 规则的操作 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (top.tagName === <span class=\"string\">\"style\"</span>) &#123;</span><br><span class=\"line\">        addCSSRules(top.children[<span class=\"number\">0</span>].content)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      layout(top)</span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"flex-布局基础概念\"><a href=\"#flex-布局基础概念\" class=\"headerlink\" title=\"flex 布局基础概念\"></a>flex 布局基础概念</h4></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/1e160d5f7cbdc299f68d432dcb19cca1137896.png\" alt=\"flex 排版解释图\"></p>\n<blockquote>\n<p>给 div 这类块状元素元素设置 display: flex 或者给 span 这类内联元素设置 display: inline-flex ，flex 布局即创建！其中，直接设置 display: flex 或者 display: inline-flex 的元素称为 flex 容器，里面的子元素称为 flex 子项。</p>\n</blockquote>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/0f5622ba2bab24f882be6007f6761a4422506.png\" alt=\"flex 相关方法概览\"></li>\n</ul>\n</li>\n<li><p>由上 felx 布局中的 主轴，交叉轴图示，我们可以先定义变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainSize, <span class=\"comment\">// 主轴size width / height</span></span><br><span class=\"line\">mainStart, <span class=\"comment\">// 主轴起点 left / right / top / bottom</span></span><br><span class=\"line\">mainEnd, <span class=\"comment\">// 主轴终点 left / right / top / bottom</span></span><br><span class=\"line\">mainSign, <span class=\"comment\">// 主轴符号位，用于 是否 reverse +1 / -1</span></span><br><span class=\"line\">mainBase, <span class=\"comment\">// 主轴开始的位置 0 / style.width</span></span><br><span class=\"line\">crossSize, <span class=\"comment\">// 交叉轴size width / height</span></span><br><span class=\"line\">crossStart, <span class=\"comment\">// 交叉轴坐标起点 left / right / top / bottom</span></span><br><span class=\"line\">crossEnd, <span class=\"comment\">// 交叉轴坐标终点 left / right / top / bottom</span></span><br><span class=\"line\">crossSign, <span class=\"comment\">// 交叉轴符号位，用于 是否 reverse +1 / -1</span></span><br><span class=\"line\">crossBase; <span class=\"comment\">// 交叉轴开始的位置 0 / style.width</span></span><br></pre></td></tr></table></figure></li>\n<li><p>处理 flex 布局中属性默认值</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style.flexDirection || style.flexDirection === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.flexDirection = <span class=\"string\">'row'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.alignItems || style.alignItems === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.alignItems = <span class=\"string\">'stretch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.justifyContent || style.justifyContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.justifyContent = <span class=\"string\">'flex-start'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.flexWrap || style.flexWrap === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.flexWrap = <span class=\"string\">'nowrap'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.alignContent || style.alignContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.alignContent = <span class=\"string\">'center'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h4></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bec69e2fc98cf7ebfaad21b5d166030361399.png\" alt=\"MDN flex-direction 语法解释\"></p>\n<ul>\n<li><p>flex-direction: row</p>\n<ul>\n<li><p>默认值，显示为行。方向为当前文档水平流方向，默认情况下是从左往右。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'row'</span>) &#123;</span><br><span class=\"line\">\tmainSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">\tmainStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">\tmainEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">\tmainSign = +<span class=\"number\">1</span></span><br><span class=\"line\">\tmainBase = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tcrossSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">\tcrossStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">\tcrossEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: row-reverse</p>\n<ul>\n<li><p>显示为行。但方向和row属性值是反的。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'row-reverse'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'right'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'left'</span></span><br><span class=\"line\">    mainSign = <span class=\"number\">-1</span></span><br><span class=\"line\">    mainBase = style.width</span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: column</p>\n<ul>\n<li><p>显示为列。方向为当前文档垂直流方向，默认情况下是从上至下。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'column'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">    mainSign = +<span class=\"number\">1</span></span><br><span class=\"line\">    mainBase = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: column-reverse</p>\n<ul>\n<li><p>显示为列。但方向和column属性值是反的。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'column-reverse'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'top'</span></span><br><span class=\"line\">    mainSign = <span class=\"number\">-1</span></span><br><span class=\"line\">    mainBase = style.height</span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h4><ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/137acf28be957d3b145c9571e3af265462518.png\" alt=\"MDN flex-wrap语法解释\"></p>\n<ul>\n<li><p>flex-wrap: nowrap</p>\n<ul>\n<li><p>默认值，表示单行显示，不换行。于是很容易出现宽度溢出的场景，其渲染表现比较复杂，需要对CSS3宽度有一定了解。这边我们简单处理为：（以水平布局举例）</p>\n<ul>\n<li><p>flex 子项宽度 width 之和大于 flex 容器宽度，则内容溢出，表现和 white-space: nowrap 类似。</p>\n</li>\n<li><p>flex 子项宽度 width 之和大于 flex 容器宽度，则内容不溢出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crossBase = <span class=\"number\">0</span></span><br><span class=\"line\">crossSign = +<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>flex-wrap: wrap</p>\n<ul>\n<li><p>宽度不足换行显示</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crossBase = <span class=\"number\">0</span></span><br><span class=\"line\">crossSign = +<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>flex-wrap: wrap-reverse</p>\n<ul>\n<li><p>宽度不足换行显示，但是是从下往上开始，也就是原本换行在下面的子项现在跑到上面</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexWrap === <span class=\"string\">'wrap-reverse'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = crossStart</span><br><span class=\"line\">    crossStart = crossEnd</span><br><span class=\"line\">    crossEnd = temp</span><br><span class=\"line\">    crossSign = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout1.js\" target=\"_blank\" rel=\"noopener\">layout1.js 完整代码-点击一下</a></li>\n</ul>\n<h3 id=\"第二步：收集元素进行\"><a href=\"#第二步：收集元素进行\" class=\"headerlink\" title=\"第二步：收集元素进行\"></a>第二步：收集元素进行</h3><ul>\n<li><p>flex 容器没有设置 mainSize，直接撑开，count flex 子项 mainSize</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isAutoMainSize = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 没有设置 mainSize 直接撑开</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style[mainSize]) &#123; <span class=\"comment\">// auto sizing</span></span><br><span class=\"line\">elementStyle[mainSize] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = items[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itemStyle[mainSize] !== <span class=\"literal\">null</span> || itemStyle[mainSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) </span><br><span class=\"line\">      elementStyle[mainSize] = elementStyle[mainSize] + itemStyle[mainSize]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isAutoMainSize = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex 容器 flex-wrap: no-wrap &amp;&amp; isAutoMainSize，mainSpace 为0，允许撑大，<strong>强行分进第一行</strong></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexWrap === <span class=\"string\">'nowrap'</span> &amp;&amp; isAutoMainSize) &#123;</span><br><span class=\"line\">     mainSpace -= itemStyle[mainSize]</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">       crossSpace = <span class=\"built_in\">Math</span>.max(crossSpace, itemStyle[crossSize])</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     flexLine.push(item)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>flex 子项 display 为 flex，直接塞进当前行，mainSpace 不作处理，后续自适应</p>\n<ul>\n<li><p>flex: none | auto | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">   flexLine.push(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex 容器是否换行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当前flex 子项，大于 flex mainSize,自适应</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle[mainSize] &gt; style[mainSize]) &#123;</span><br><span class=\"line\">    itemStyle[mainSize] = style[mainSize]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当前flex 子项，大于 flex 容器剩余 mainSpace，另起新行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mainSpace &lt; itemStyle[mainSize]) &#123;</span><br><span class=\"line\">    flexLine.mainSpace = mainSpace</span><br><span class=\"line\">    flexLine.crossSpace = crossSpace</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新行</span></span><br><span class=\"line\">    flexLine = []</span><br><span class=\"line\">    flexLines.push(flexLine)</span><br><span class=\"line\">    flexLine.push(item)</span><br><span class=\"line\"></span><br><span class=\"line\">    mainSpace = style[mainSize]</span><br><span class=\"line\">    crossSpace = <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 未超过 flex 容器剩余 mainSpace，添加进行 </span></span><br><span class=\"line\">    flexLine.push(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理交叉轴，只需要取 flex 子项最大 crossSize</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    crossSpace = <span class=\"built_in\">Math</span>.max(crossSpace, itemStyle[crossSize])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// flex 容器剩余 mainSpace</span></span><br><span class=\"line\">mainSpace -= itemStyle[mainSize]</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout2.js\" target=\"_blank\" rel=\"noopener\">layout2.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h3 id=\"第三步：计算主轴\"><a href=\"#第三步：计算主轴\" class=\"headerlink\" title=\"第三步：计算主轴\"></a>第三步：计算主轴</h3><ul>\n<li><p>计算主轴方向</p>\n<ul>\n<li><p>找出所有 flex 子项也为 flex 元素</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((itemStyle.flex !== <span class=\"literal\">null</span>) &amp;&amp; (itemStyle.flex !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">      flexTotal += itemStyle.flex</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>存在 flex 子项也为 flex</p>\n<ul>\n<li><p>填充 flexLine 剩余 mainSpace 空间</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentMain = mainBase</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">    itemStyle[mainSize] = (mainSpace / flexTotal) * itemStyle.flex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  itemStyle[mainStart] = currentMain</span><br><span class=\"line\">  itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">  currentMain = itemStyle[mainEnd]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>不存在 flex 子项也为 flex，把主轴方向剩余尺寸按比例分配给这些元素</p>\n</li>\n<li><p>justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;</p>\n<ul>\n<li><p>justify-content: flex-start</p>\n<ul>\n<li><p>默认值</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style.justifyContent || style.justifyContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.justifyContent = <span class=\"string\">'flex-start'</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: flex-end</p>\n<ul>\n<li><p>逻辑CSS属性值，与默认文档流方向相反</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainSpace * mainSign + mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: center</p>\n<ul>\n<li><p>居中对齐</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'center'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainSpace / <span class=\"number\">2</span> * mainSign + mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-between</p>\n<ul>\n<li><p>表现为两端对齐。between 是中间的意思，意思是多余的空白间距只在元素中间区域分配</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-between'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / (items.length - <span class=\"number\">1</span>) * mainSign</span><br><span class=\"line\">  currentMain = mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-around</p>\n<ul>\n<li><p>around 是环绕的意思，意思是每个 flex 子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-around'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / items.length * mainSign</span><br><span class=\"line\">  currentMain = gap / <span class=\"number\">2</span> + mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-evenly</p>\n<ul>\n<li><p>evenly 是匀称、平等的意思。也就是视觉上，每个 flex 子项两侧空白间距完全相等</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-evenly'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / (items.length + <span class=\"number\">1</span>) * mainSign</span><br><span class=\"line\">  currentMain = gap + mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>循环计算 flex 子项位置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">  itemStyle[mainStart] = currentMain</span><br><span class=\"line\">  itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">  currentMain = itemStyle[mainEnd] + gap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>若剩余空间为负数，所有 flex 元素为 0，等比压缩剩余元素</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mainSpace &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对负的 mainSpace， 所有该行 flex 子项等比例缩放（未设置 flex-shrink 默认值是1，也就是默认所有的 flex 子项都会收缩）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = style[mainSize] / (style[mainSize] - mainSpace)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentMain = mainBase</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">        itemStyle[mainSize] = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">      itemStyle[mainSize] = itemStyle[mainSize] * scale</span><br><span class=\"line\">\t</span><br><span class=\"line\">      <span class=\"comment\">// flex 容器这一行内，flex 子项排布</span></span><br><span class=\"line\">      itemStyle[mainStart] = currentMain</span><br><span class=\"line\">      itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">      currentMain = itemStyle[mainEnd]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout3.js\" target=\"_blank\" rel=\"noopener\">layout3.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h3 id=\"第四步：计算交叉轴\"><a href=\"#第四步：计算交叉轴\" class=\"headerlink\" title=\"第四步：计算交叉轴\"></a>第四步：计算交叉轴</h3><ul>\n<li><p>计算交叉轴方向</p>\n<ul>\n<li><p>根据每一行中最大元素尺寸计算行高</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style[crossSize]) &#123; <span class=\"comment\">// 交叉轴，crossSize 未设定时默认为 count flexLines 每行最大 crossSpace 之和 </span></span><br><span class=\"line\">    crossSpace = <span class=\"number\">0</span></span><br><span class=\"line\">    elementStyle[crossSize] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; flexLines.length; i ++) &#123;</span><br><span class=\"line\">      elementStyle[crossSize] = elementStyle[crossSize] + flexLines[i].crossSpace</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 设定后，计算出 最终的 crossSpace，为 crossSpace 减去每行最大 crossSpace，剩余空间，用作分配</span></span><br><span class=\"line\">    crossSpace = style[crossSize]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; flexLines.length; i ++) &#123;</span><br><span class=\"line\">      crossSpace -= flexLines[i].crossSpace</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>根据行高 flex-align 和 item-align，确定元素具体位置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">flexLines.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lineCrossSize = style.alignContent === <span class=\"string\">'stretch'</span> ? <span class=\"comment\">// 拉伸 flex 子项，填满交叉轴</span></span><br><span class=\"line\">      items.crossSpace + crossSpace / flexLines.length :</span><br><span class=\"line\">      item.crossSpace</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> align = itemStyle.alignSelf || style.alignItems <span class=\"comment\">// align-self指控制单独某一个flex子项的垂直对齐方式</span></span><br><span class=\"line\">      <span class=\"comment\">// align-items属性，表示子项们</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (itemStyle[crossSize] === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossSize] = (align === <span class=\"string\">'stretch'</span>) ?</span><br><span class=\"line\">          lineCrossSize : <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase</span><br><span class=\"line\">        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'flex-end'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossEnd] = crossBase + crossSign * lineCrossSize</span><br><span class=\"line\">        itemStyle[crossStart] = itemStyle[crossEnd] - crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'center'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase + crossSign * (lineCrossSize - itemStyle[crossSize]) / <span class=\"number\">2</span></span><br><span class=\"line\">        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'stretch'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase</span><br><span class=\"line\">        itemStyle[crossEnd] = crossBase + crossSign * ((itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) ?</span><br><span class=\"line\">          itemStyle[crossSize] : lineCrossSize)</span><br><span class=\"line\"></span><br><span class=\"line\">        itemStyle[crossSize] = crossSign * (itemStyle[crossEnd] - itemStyle[crossStart])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    crossBase += crossSign * (lineCrossSize + step)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0e488c9e6c482d1d67f2a1872a58aa0d231450.png\" alt=\"第四步运行结果\"></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout4.js\" target=\"_blank\" rel=\"noopener\">layout4.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/#justify-content\" target=\"_blank\" rel=\"noopener\">display: flex 教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Flex\" target=\"_blank\" rel=\"noopener\">MDN Flex</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>嘻嘻嘻，我们将要在做 toy-browser 浏览器相关排版问题啦</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6d5c67d3d5d0633bf667bd680f6dfb9489753.png\" alt=\"DOM with CSS\"></li>\n</ul>","more":"<h3 id=\"第一步：初始化\"><a href=\"#第一步：初始化\" class=\"headerlink\" title=\"第一步：初始化\"></a>第一步：初始化</h3><ul>\n<li><p>我们采用以下 html 代码段</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">maaa</span>=<span class=\"string\">a</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:500px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:flex</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,255,255);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span> <span class=\"selector-id\">#myid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(255</span>,0,0)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#container</span> <span class=\"selector-class\">.c1</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">flex</span><span class=\"selector-pseudo\">:1</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span><span class=\"selector-pseudo\">:rgb(0</span>,255,0)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myid\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>代码逻辑自顶向下</p>\n</li>\n<li><p>首先，我们在 endTag 的时候进行 layout</p>\n<ul>\n<li>我们只处理 flex，可以简化成在 endTag 时，进行 layout 即可</li>\n</ul>\n</li>\n<li><p>computeCSS7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> layout = <span class=\"built_in\">require</span>(<span class=\"string\">\"./layout.js\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      <span class=\"comment\">/** 遇到 style 标签时，执行添加 CCS 规则的操作 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (top.tagName === <span class=\"string\">\"style\"</span>) &#123;</span><br><span class=\"line\">        addCSSRules(top.children[<span class=\"number\">0</span>].content)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      layout(top)</span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"flex-布局基础概念\"><a href=\"#flex-布局基础概念\" class=\"headerlink\" title=\"flex 布局基础概念\"></a>flex 布局基础概念</h4></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/1e160d5f7cbdc299f68d432dcb19cca1137896.png\" alt=\"flex 排版解释图\"></p>\n<blockquote>\n<p>给 div 这类块状元素元素设置 display: flex 或者给 span 这类内联元素设置 display: inline-flex ，flex 布局即创建！其中，直接设置 display: flex 或者 display: inline-flex 的元素称为 flex 容器，里面的子元素称为 flex 子项。</p>\n</blockquote>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/0f5622ba2bab24f882be6007f6761a4422506.png\" alt=\"flex 相关方法概览\"></li>\n</ul>\n</li>\n<li><p>由上 felx 布局中的 主轴，交叉轴图示，我们可以先定义变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainSize, <span class=\"comment\">// 主轴size width / height</span></span><br><span class=\"line\">mainStart, <span class=\"comment\">// 主轴起点 left / right / top / bottom</span></span><br><span class=\"line\">mainEnd, <span class=\"comment\">// 主轴终点 left / right / top / bottom</span></span><br><span class=\"line\">mainSign, <span class=\"comment\">// 主轴符号位，用于 是否 reverse +1 / -1</span></span><br><span class=\"line\">mainBase, <span class=\"comment\">// 主轴开始的位置 0 / style.width</span></span><br><span class=\"line\">crossSize, <span class=\"comment\">// 交叉轴size width / height</span></span><br><span class=\"line\">crossStart, <span class=\"comment\">// 交叉轴坐标起点 left / right / top / bottom</span></span><br><span class=\"line\">crossEnd, <span class=\"comment\">// 交叉轴坐标终点 left / right / top / bottom</span></span><br><span class=\"line\">crossSign, <span class=\"comment\">// 交叉轴符号位，用于 是否 reverse +1 / -1</span></span><br><span class=\"line\">crossBase; <span class=\"comment\">// 交叉轴开始的位置 0 / style.width</span></span><br></pre></td></tr></table></figure></li>\n<li><p>处理 flex 布局中属性默认值</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style.flexDirection || style.flexDirection === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.flexDirection = <span class=\"string\">'row'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.alignItems || style.alignItems === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.alignItems = <span class=\"string\">'stretch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.justifyContent || style.justifyContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.justifyContent = <span class=\"string\">'flex-start'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.flexWrap || style.flexWrap === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.flexWrap = <span class=\"string\">'nowrap'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style.alignContent || style.alignContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.alignContent = <span class=\"string\">'center'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h4></li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/bec69e2fc98cf7ebfaad21b5d166030361399.png\" alt=\"MDN flex-direction 语法解释\"></p>\n<ul>\n<li><p>flex-direction: row</p>\n<ul>\n<li><p>默认值，显示为行。方向为当前文档水平流方向，默认情况下是从左往右。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'row'</span>) &#123;</span><br><span class=\"line\">\tmainSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">\tmainStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">\tmainEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">\tmainSign = +<span class=\"number\">1</span></span><br><span class=\"line\">\tmainBase = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tcrossSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">\tcrossStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">\tcrossEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: row-reverse</p>\n<ul>\n<li><p>显示为行。但方向和row属性值是反的。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'row-reverse'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'right'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'left'</span></span><br><span class=\"line\">    mainSign = <span class=\"number\">-1</span></span><br><span class=\"line\">    mainBase = style.width</span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: column</p>\n<ul>\n<li><p>显示为列。方向为当前文档垂直流方向，默认情况下是从上至下。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'column'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'top'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">    mainSign = +<span class=\"number\">1</span></span><br><span class=\"line\">    mainBase = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex-direction: column-reverse</p>\n<ul>\n<li><p>显示为列。但方向和column属性值是反的。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexDirection === <span class=\"string\">'column-reverse'</span>) &#123;</span><br><span class=\"line\">    mainSize = <span class=\"string\">'height'</span></span><br><span class=\"line\">    mainStart = <span class=\"string\">'bottom'</span></span><br><span class=\"line\">    mainEnd = <span class=\"string\">'top'</span></span><br><span class=\"line\">    mainSign = <span class=\"number\">-1</span></span><br><span class=\"line\">    mainBase = style.height</span><br><span class=\"line\"></span><br><span class=\"line\">    crossSize = <span class=\"string\">'width'</span></span><br><span class=\"line\">    crossStart = <span class=\"string\">'left'</span></span><br><span class=\"line\">    crossEnd = <span class=\"string\">'right'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h4><ul>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/137acf28be957d3b145c9571e3af265462518.png\" alt=\"MDN flex-wrap语法解释\"></p>\n<ul>\n<li><p>flex-wrap: nowrap</p>\n<ul>\n<li><p>默认值，表示单行显示，不换行。于是很容易出现宽度溢出的场景，其渲染表现比较复杂，需要对CSS3宽度有一定了解。这边我们简单处理为：（以水平布局举例）</p>\n<ul>\n<li><p>flex 子项宽度 width 之和大于 flex 容器宽度，则内容溢出，表现和 white-space: nowrap 类似。</p>\n</li>\n<li><p>flex 子项宽度 width 之和大于 flex 容器宽度，则内容不溢出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crossBase = <span class=\"number\">0</span></span><br><span class=\"line\">crossSign = +<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>flex-wrap: wrap</p>\n<ul>\n<li><p>宽度不足换行显示</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crossBase = <span class=\"number\">0</span></span><br><span class=\"line\">crossSign = +<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>flex-wrap: wrap-reverse</p>\n<ul>\n<li><p>宽度不足换行显示，但是是从下往上开始，也就是原本换行在下面的子项现在跑到上面</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexWrap === <span class=\"string\">'wrap-reverse'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = crossStart</span><br><span class=\"line\">    crossStart = crossEnd</span><br><span class=\"line\">    crossEnd = temp</span><br><span class=\"line\">    crossSign = <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout1.js\" target=\"_blank\" rel=\"noopener\">layout1.js 完整代码-点击一下</a></li>\n</ul>\n<h3 id=\"第二步：收集元素进行\"><a href=\"#第二步：收集元素进行\" class=\"headerlink\" title=\"第二步：收集元素进行\"></a>第二步：收集元素进行</h3><ul>\n<li><p>flex 容器没有设置 mainSize，直接撑开，count flex 子项 mainSize</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isAutoMainSize = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 没有设置 mainSize 直接撑开</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!style[mainSize]) &#123; <span class=\"comment\">// auto sizing</span></span><br><span class=\"line\">elementStyle[mainSize] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = items[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itemStyle[mainSize] !== <span class=\"literal\">null</span> || itemStyle[mainSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) </span><br><span class=\"line\">      elementStyle[mainSize] = elementStyle[mainSize] + itemStyle[mainSize]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isAutoMainSize = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex 容器 flex-wrap: no-wrap &amp;&amp; isAutoMainSize，mainSpace 为0，允许撑大，<strong>强行分进第一行</strong></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.flexWrap === <span class=\"string\">'nowrap'</span> &amp;&amp; isAutoMainSize) &#123;</span><br><span class=\"line\">     mainSpace -= itemStyle[mainSize]</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">       crossSpace = <span class=\"built_in\">Math</span>.max(crossSpace, itemStyle[crossSize])</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     flexLine.push(item)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>flex 子项 display 为 flex，直接塞进当前行，mainSpace 不作处理，后续自适应</p>\n<ul>\n<li><p>flex: none | auto | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">   flexLine.push(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>flex 容器是否换行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当前flex 子项，大于 flex mainSize,自适应</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle[mainSize] &gt; style[mainSize]) &#123;</span><br><span class=\"line\">    itemStyle[mainSize] = style[mainSize]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当前flex 子项，大于 flex 容器剩余 mainSpace，另起新行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mainSpace &lt; itemStyle[mainSize]) &#123;</span><br><span class=\"line\">    flexLine.mainSpace = mainSpace</span><br><span class=\"line\">    flexLine.crossSpace = crossSpace</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新行</span></span><br><span class=\"line\">    flexLine = []</span><br><span class=\"line\">    flexLines.push(flexLine)</span><br><span class=\"line\">    flexLine.push(item)</span><br><span class=\"line\"></span><br><span class=\"line\">    mainSpace = style[mainSize]</span><br><span class=\"line\">    crossSpace = <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 未超过 flex 容器剩余 mainSpace，添加进行 </span></span><br><span class=\"line\">    flexLine.push(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理交叉轴，只需要取 flex 子项最大 crossSize</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    crossSpace = <span class=\"built_in\">Math</span>.max(crossSpace, itemStyle[crossSize])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// flex 容器剩余 mainSpace</span></span><br><span class=\"line\">mainSpace -= itemStyle[mainSize]</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout2.js\" target=\"_blank\" rel=\"noopener\">layout2.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h3 id=\"第三步：计算主轴\"><a href=\"#第三步：计算主轴\" class=\"headerlink\" title=\"第三步：计算主轴\"></a>第三步：计算主轴</h3><ul>\n<li><p>计算主轴方向</p>\n<ul>\n<li><p>找出所有 flex 子项也为 flex 元素</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((itemStyle.flex !== <span class=\"literal\">null</span>) &amp;&amp; (itemStyle.flex !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">      flexTotal += itemStyle.flex</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>存在 flex 子项也为 flex</p>\n<ul>\n<li><p>填充 flexLine 剩余 mainSpace 空间</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentMain = mainBase</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">    itemStyle[mainSize] = (mainSpace / flexTotal) * itemStyle.flex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  itemStyle[mainStart] = currentMain</span><br><span class=\"line\">  itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">  currentMain = itemStyle[mainEnd]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>不存在 flex 子项也为 flex，把主轴方向剩余尺寸按比例分配给这些元素</p>\n</li>\n<li><p>justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;</p>\n<ul>\n<li><p>justify-content: flex-start</p>\n<ul>\n<li><p>默认值</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style.justifyContent || style.justifyContent === <span class=\"string\">'auto'</span>)</span><br><span class=\"line\">    style.justifyContent = <span class=\"string\">'flex-start'</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: flex-end</p>\n<ul>\n<li><p>逻辑CSS属性值，与默认文档流方向相反</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainSpace * mainSign + mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: center</p>\n<ul>\n<li><p>居中对齐</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'center'</span>) &#123;</span><br><span class=\"line\">  currentMain = mainSpace / <span class=\"number\">2</span> * mainSign + mainBase</span><br><span class=\"line\">  gap = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-between</p>\n<ul>\n<li><p>表现为两端对齐。between 是中间的意思，意思是多余的空白间距只在元素中间区域分配</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-between'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / (items.length - <span class=\"number\">1</span>) * mainSign</span><br><span class=\"line\">  currentMain = mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-around</p>\n<ul>\n<li><p>around 是环绕的意思，意思是每个 flex 子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-around'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / items.length * mainSign</span><br><span class=\"line\">  currentMain = gap / <span class=\"number\">2</span> + mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>justify-content: space-evenly</p>\n<ul>\n<li><p>evenly 是匀称、平等的意思。也就是视觉上，每个 flex 子项两侧空白间距完全相等</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (style.justifyContent === <span class=\"string\">'space-evenly'</span>) &#123;</span><br><span class=\"line\">  gap = mainSpace / (items.length + <span class=\"number\">1</span>) * mainSign</span><br><span class=\"line\">  currentMain = gap + mainBase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>循环计算 flex 子项位置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">  itemStyle[mainStart] = currentMain</span><br><span class=\"line\">  itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">  currentMain = itemStyle[mainEnd] + gap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>若剩余空间为负数，所有 flex 元素为 0，等比压缩剩余元素</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mainSpace &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对负的 mainSpace， 所有该行 flex 子项等比例缩放（未设置 flex-shrink 默认值是1，也就是默认所有的 flex 子项都会收缩）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = style[mainSize] / (style[mainSize] - mainSpace)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentMain = mainBase</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\">\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (itemStyle.flex) &#123;</span><br><span class=\"line\">        itemStyle[mainSize] = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">      itemStyle[mainSize] = itemStyle[mainSize] * scale</span><br><span class=\"line\">\t</span><br><span class=\"line\">      <span class=\"comment\">// flex 容器这一行内，flex 子项排布</span></span><br><span class=\"line\">      itemStyle[mainStart] = currentMain</span><br><span class=\"line\">      itemStyle[mainEnd] = itemStyle[mainStart] + mainSign * itemStyle[mainSize]</span><br><span class=\"line\">      currentMain = itemStyle[mainEnd]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout3.js\" target=\"_blank\" rel=\"noopener\">layout3.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h3 id=\"第四步：计算交叉轴\"><a href=\"#第四步：计算交叉轴\" class=\"headerlink\" title=\"第四步：计算交叉轴\"></a>第四步：计算交叉轴</h3><ul>\n<li><p>计算交叉轴方向</p>\n<ul>\n<li><p>根据每一行中最大元素尺寸计算行高</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!style[crossSize]) &#123; <span class=\"comment\">// 交叉轴，crossSize 未设定时默认为 count flexLines 每行最大 crossSpace 之和 </span></span><br><span class=\"line\">    crossSpace = <span class=\"number\">0</span></span><br><span class=\"line\">    elementStyle[crossSize] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; flexLines.length; i ++) &#123;</span><br><span class=\"line\">      elementStyle[crossSize] = elementStyle[crossSize] + flexLines[i].crossSpace</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 设定后，计算出 最终的 crossSpace，为 crossSpace 减去每行最大 crossSpace，剩余空间，用作分配</span></span><br><span class=\"line\">    crossSpace = style[crossSize]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; flexLines.length; i ++) &#123;</span><br><span class=\"line\">      crossSpace -= flexLines[i].crossSpace</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>根据行高 flex-align 和 item-align，确定元素具体位置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">flexLines.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lineCrossSize = style.alignContent === <span class=\"string\">'stretch'</span> ? <span class=\"comment\">// 拉伸 flex 子项，填满交叉轴</span></span><br><span class=\"line\">      items.crossSpace + crossSpace / flexLines.length :</span><br><span class=\"line\">      item.crossSpace</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> item = items[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> itemStyle = getStyle(item)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> align = itemStyle.alignSelf || style.alignItems <span class=\"comment\">// align-self指控制单独某一个flex子项的垂直对齐方式</span></span><br><span class=\"line\">      <span class=\"comment\">// align-items属性，表示子项们</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (itemStyle[crossSize] === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossSize] = (align === <span class=\"string\">'stretch'</span>) ?</span><br><span class=\"line\">          lineCrossSize : <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'flex-start'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase</span><br><span class=\"line\">        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'flex-end'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossEnd] = crossBase + crossSign * lineCrossSize</span><br><span class=\"line\">        itemStyle[crossStart] = itemStyle[crossEnd] - crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'center'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase + crossSign * (lineCrossSize - itemStyle[crossSize]) / <span class=\"number\">2</span></span><br><span class=\"line\">        itemStyle[crossEnd] = itemStyle[crossStart] + crossSign * itemStyle[crossSize]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (align === <span class=\"string\">'stretch'</span>) &#123;</span><br><span class=\"line\">        itemStyle[crossStart] = crossBase</span><br><span class=\"line\">        itemStyle[crossEnd] = crossBase + crossSign * ((itemStyle[crossSize] !== <span class=\"literal\">null</span> &amp;&amp; itemStyle[crossSize] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>)) ?</span><br><span class=\"line\">          itemStyle[crossSize] : lineCrossSize)</span><br><span class=\"line\"></span><br><span class=\"line\">        itemStyle[crossSize] = crossSign * (itemStyle[crossEnd] - itemStyle[crossStart])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    crossBase += crossSign * (lineCrossSize + step)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0e488c9e6c482d1d67f2a1872a58aa0d231450.png\" alt=\"第四步运行结果\"></li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/Ele-Peng/toy-browser/blob/master/layout4.js\" target=\"_blank\" rel=\"noopener\">layout4.js 完整代码-点击一下</a></p>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/#justify-content\" target=\"_blank\" rel=\"noopener\">display: flex 教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Flex\" target=\"_blank\" rel=\"noopener\">MDN Flex</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"Javascript-convertStringToNumber","date":"2020-04-24T12:49:31.000Z","description":["是的我要折腾一下 Javascript parseInt+parseFloat 内部实现，convertStringToNumber 了🙆"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 简单记录一下，Javascript parseInt+parseFloat 内部实现，并实现 convertStringToNumber\n\n<!-- more -->\n\n## 实践准备\n- 首先我们需要简单梳理一下我们的实现过程，再根据 [ECMAScript-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm) 标准完善实现\n- input: @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数\n- 对 input 的简单处理 StringNumericLiteral\n\t- 规格化 str\n\t- ![StringNumericLiteral BNF](http://p0.meituan.net/myvideodistribute/6f4d129d30fe4d0b45743d72da9760ca14615.png)\n\t\t- 将 str 中可能出现的 StrWhiteSpace 去掉\n\t\t\t- ![StrWhiteSpace BNF](http://p0.meituan.net/myvideodistribute/3ab76a2ee0627ddeeec42e093ae8307717214.png)\n\t\t\t\t- ![LineTerminator BNF](http://p0.meituan.net/myvideodistribute/d9ba181d676994f053ba3ba067279cf48592.png)\n\t- 判断 radix 是否合法，仅支持 Decimal / BinaryInteger / OctalInteger / HexInteger radix\n\t\t- Decimal: 10\n\t\t- BinaryInteger: 2\n\t\t- OctalInteger: 8\n\t\t- HexInteger: 16\n- 简单算法处理过程\n\t- 十进制数\n\t\t- ![StrDecimalLiteral BNF](http://p0.meituan.net/myvideodistribute/dbb89c490f4cbe92ce1e7b1025912cde51542.png)\n\t\t- 处理 Infinity 情况\n\t\t- 符号位处理\n\t\t- 小数点\n\t\t- 科学计数法\n\t- 二进制数\n\t\t- ![BinaryInteger](http://p1.meituan.net/myvideodistribute/f12e98da62b6529c1d3781a6c1dc36a86760.png)\n\t- 八进制数\n\t\t- ![OctalInteger](http://p1.meituan.net/myvideodistribute/e11bf633f8350bb17f761b719762ed038371.png)\n\t- 十六进制数\n\t\t- ![HexInteger](http://p0.meituan.net/myvideodistribute/274e704676b7d52093ac555c4b43f61013946.png)\n- output: return number\n\n## 详细实践\n- 根据上面的实践准备\n\n```javascript\n/*\n* @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数\n* return: number\n*/\nfunction convertStringToNumber(str, radix) {\n  const noWhiteSpaceStr = replaceWhiteSpaceInStr(str) /** 将 str 中的 whitespace 进行匹配 */\n  const checkedRadixStr = formatStrByRadix(str, radix) /** 将 str 根据指定基数进行转换 */\n  let resNum = 0\n  switch (radix) {\n    case 10:\n      resNum = converStringToDeciaml(str) /** 将 str 转成十进制 */\n      break;\n    case 2:\n      resNum = converStringToBinaryInteger(str) /** 将 str 转成二进制*/\n      break;\n    case 8:\n      resNum = converStringToOctalInteger(str) /** 将 str 转成八进制*/\n      break;\n    case 16:\n      resNum = converStringToHexIntegers(str) /** 将 str 转成十六进制*/\n      break;\n    default:\n      return NaN\n  }\n  return resNum\n}\n```\n- 将 str 中的 whitespace 进行匹配\n\t\n\t```javascript\n\t/*\n\t* @params: { str } 输入需要替换的字符串\n\t* return: resStr 无 whitespace 字符串\n\t*/\n\tfunction replaceWhiteSpaceInStr(str) {\n\t  let resStr = str.replace(/\\s*/g, '') // 去除空格\n\t  // resStr = resStr.replace(/^[\\u000A|\\u000D|\\u2028|\\u2029]/g, '') // 去除 LineTerminator unicode输入方式\n\t  resStr =  resStr.replace(/[\\r|\\n]/g, '') // 去除换行\n\t  return resStr\n\t}\n\t```\n\t- 单元测试\n\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/a70fa86dd4d8261537f8cbf5c0e5bc2c71147.png)\n- 将 str 根据指定基数进行转换\n\t- [正则表达式匹配 Number 字面量](https://ele-peng.github.io/2020/04/20/Reg-Number/)\n\t\n\t```javascript\n\t/*\n\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t* return: resStr 根据指定基数转换过得字符串\n\t*/\n\tfunction formatStrByRadix(str, radix) {\n\t  let resStr = ''\n\t  let testReg = null\n\t  switch (radix) {\n\t    case 10:\n\t      testReg = /^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?/\n\t      break;\n\t    case 2:\n\t      // 根据 ECMA-262 是 /^0(b|B)(0|1)+$/\n\t      // 但是我在 Chrome 浏览器上测了，二进制没有 'b' or 'B'\n\t      testReg = /^(0|1)+/\n\t      break;\n\t    case 8:\n\t      // 根据 ECMA-262 是 /^0(O|o)[0-7]+$/\n\t      // 但是我在 Chrome 浏览器上测了，二进制没有 'o' or 'O'\n\t      testReg = /^[0-7]+/\n\t      break;\n\t    case 16:\n\t      // 根据 ECMA-262 是 /^0(x|X)([0-9a-fA-F])+/\n\t      // 但是我在 Chrome 浏览器自测中发现，没有表示符 'x' or 'X'也可\n\t      testReg = /^0(x|X)?([0-9a-fA-F])+/\n\t      break;\n\t    default:\n\t      console.log(`radix: ${radix}, str:  ${str} illegal radix`)\n\t      return false\n\t  }\n\t  resStr = (testReg.exec(str) && testReg.exec(str)['0']) || 'convert fail'\n\t  console.log(`radix: ${radix}, ${str} --> resStr: `, resStr)\n\t}\n\tformatStrByRadix('001010101', 3)\n\tformatStrByRadix('001010101', 2)\n\tformatStrByRadix('001010101', 8)\n\tformatStrByRadix('0b01010101', 2)\n\tformatStrByRadix('012345677', 8)\n\tformatStrByRadix('012345677', 2)\n\tformatStrByRadix('0o12345677', 8)\n\tformatStrByRadix('1.01E+23', 10)\n\tformatStrByRadix('.012345677', 10)\n\tformatStrByRadix('.012345677', 10)\n\tformatStrByRadix('0123acfACF', 16)\n\tformatStrByRadix('0x123acfACF', 16)\n\tformatStrByRadix('0x123acfACFG', 16)\n\t```\n\t- 单元测试\n\t\t- ![单元测试](http://p0.meituan.net/myvideodistribute/ff9d3e6a3cd279427f8873f91911290774369.png)\n\n- 根据指定基数进行相应算法转换\n\t- 二进制：\n\t\t\n\t\t```javascript\n\t\t\n\t\t// 将 str 转成二进制\n\t\tfunction converStringToBinaryInteger(str, radix) {\n\t\t  return strMultipleRadix(str, radix)\n\t\t}\n\t\t\n\t\t/*\n\t\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t* return: resStr 乘以指定基数转换过得字符串\n\t\t*/\n\t\tfunction strMultipleRadix(str, radix) {\n\t\t  let tempStrArr = str.split('')\n\t\t  let res = 0\n\t\t  for (let i = tempStrArr.length - 1; i > 0; i --) {\n\t\t    res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t  }\n\t\t  return res\n\t\t}\n\t\tconverStringToBinaryInteger('001010101', 2)\n\t\t```\n\t\t\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/5f3f3d1a2d0851eddaa1e258a182831864745.png)\n\t- 八进制\n\t\t- 同上\n\n\t\t\t```javascript\n\t\t\t// 将 str 转成八进制\n\t\t\tfunction converStringToBinaryInteger(str, radix) {\n\t\t\t  return strMultipleRadix(str, radix)\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t\t* return: resStr 乘以指定基数转换过得字符串\n\t\t\t*/\n\t\t\tfunction strMultipleRadix(str, radix) {\n\t\t\t  let tempStrArr = str.split('')\n\t\t\t  let res = 0\n\t\t\t  for (let i = tempStrArr.length - 1; i > 0; i --) {\n\t\t\t    res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t  }\n\t\t\t  return res\n\t\t\t}\n\t\t\tconverStringToBinaryInteger('001010101', 2)\n\t\t\t```\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p1.meituan.net/myvideodistribute/e9db13d824513d4e72509cd571f90dc069034.png)\n\t- 十六进制\n\t\t- 需要对 a-f A-F 进行判断，别忘了+10\n\n\t\t\t```javascript\n\t\t\t  // 将 str 转成十六进制\n\t\t\t  function converStringToBinaryInteger(str, radix) {\n\t\t\t    return strMultipleRadix(str, radix)\n\t\t\t  }\n\t\t\t\n\t\t\t  /*\n\t\t\t  * @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t\t  * return: resStr 乘以指定基数转换过得字符串\n\t\t\t  */\n\t\t\t  function strMultipleRadix(str, radix) {\n\t\t\t    let tempStrArr = str.split('')\n\t\t\t    let res = 0\n\t\t\t    for (let i = tempStrArr.length - 1; i > 0; i--) {\n\t\t\t      if (radix === 16) {\n\t\t\t        if ((tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) < 10)) {\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        } else if ((tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) < 6)) {\n\t\t\t          console.log('(tempStrArr[i].codePointAt(0)a', tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0))\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        } else if ((tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) < 6)) {\n\t\t\t          console.log('(tempStrArr[i].codePointAt(0)A', tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0))\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        }\n\t\t\t      } else {\n\t\t\t        res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t      }\n\t\t\t    }\n\t\t\t    return res\n\t\t\t  }\n\t\t\t  console.log(converStringToBinaryInteger('001010101', 16))\n\t\t\t  console.log(converStringToBinaryInteger('00101acfAFF', 16))\n\t\t\t```\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/e2e319f170fe2334f7b589cfc0f77b06205824.png)\n- 最终二/八/十六进制根据指定基数进行相应算法转换方法为：\n\t\n\t```javascript\n\t\t/*\n\t  * @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t  * return: resStr 乘以指定基数转换过得字符串\n\t  */\n\t  function strMultipleRadix(str, radix) {\n\t    let tempStrArr = str.split('')\n\t    let res = 0\n\t    for (let i = tempStrArr.length - 1; i > 0; i--) {\n\t      if (radix === 16) {\n\t        if ((tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) < 10)) {\n\t          res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        } else if ((tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) < 6)) {\n\t          res += (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        } else if ((tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) < 6)) {\n\t          res += (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        }\n\t      } else {\n\t        res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t      }\n\t    }\n\t    return res\n\t  }\n\t```\n### 转换成十进制\n- 实践思路\n\t1. 判断正负符号位\n\t2. 判断是否为 Infinity\n\t3. 判断是否为 整数\n\t\t1. 整数\n\t\t\t1. 是否为科学计数法表示\n\t\t\t\t1. 是，通过指数位置分成两部分：整数部分+指数部分\n\t\t\t\t2. 否，只需处理整数部分\n\t\t2. 小数\n\t\t\t1. 是否为科学计数法表示\n\t\t\t\t1. 是，通过分割成小数点到指数，分成三部分：整数部分+小数部分+指数部分\n\t\t\t\t2. 否，通过小数点位置，分成两部分：整数部分+小数部分\n\t\n- 代码大致为：\n\n\n```javascript \n  function converStringToDeciaml(str) {\n    // console.log('str-=-=--=-==-=', str)\n    const sign = getSign(str)\n    const strFormatBySign = formatStrBySign(str)\n    if (isInfinity(strFormatBySign)) return (1 / 0) * sign // 如果为 Inifity,乘以符号位输出Infinity\n    const numberObject = splitStr(strFormatBySign)\n    const {int, float, exponentSign, exponent} = numberObject\n    // console.log('numberObject', numberObject)\n    const resInt = calculateInt(int) // 计算整数部分\n    // console.log('resInt', resInt)\n    const resFloat = calculateFloat(float) // 计算小数部分\n    // console.log('resFloat', resFloat)\n    const resExponent = calculateExponent(resInt, resFloat, exponentSign, exponent) // 计算（整数+小数）*  指数部分\n    const res = sign * resExponent // 最后乘以符号位\n    return res\n  }\n```\n\t\n#### 判断正负，并根据符号位格式化字符串\n\n```javascript\n\n  // 获取符号位\n  function getSign(str) {\n    // 如果S的首字符为'-'\n    if(str.indexOf('-') == 0) { \n      return -1\n    }\n    return 1\n  }\n```\n#### 根据符号位格式化字符串（移除字符号位）\n\n```javascript\n  // 根据符号位格式化字符串\n  function formatStrBySign(str) {\n    // 如果 str 的首字符为‘+’或'-'，则移除首字符\n    if (str.indexOf('-') == 0 || str.indexOf('+') == 0) {\n      str = str.substring(1, str.length)\n    }\n    return str\n  }\n```\n\n#### 判断是否为Infinity\n\n```javascript\n  // 是否为 Infinity\n  function isInfinity(str) {\n    const testReg = /^Infinity/\n    let resReg = testReg.exec(str)\n    return resReg && resReg[0]\n  }\n```\n\n#### 切割字符串，分成整数+小数+指数位符号+指数部分\n\n```javascript\n  // 切割字符串\n  /*\n  * @params: { str } 输入需要切割的字符串\n  * return: res: Object {\n  *   int: 整数位,\n  *   float: 小数位,\n  *   exponentSign: 指数位符号,\n  *   exponent: 指数位\n  * }\n  */\n  function splitStr(str) {\n    const testReg = /^((0)|([1-9][0-9]*))?.?([0-9]*)(e|E)?((\\+|\\-)?([0-9]*))?/\n    let resReg = testReg.exec(str)\n    let res = {\n      int: resReg['1'] || 0,\n      float: resReg['4'] || 0,\n      exponentSign: resReg['7'] || '+',\n      exponent: resReg['8'] || 0\n    }\n    return res\n  }\n```\n\n#### 整数部分运算\n\n```javascript\n\n  // 整数部分运算\n  function calculateInt(str) {\n    let res = 0\n    const radix = 10\n    for (let i = str.length - 1; i >= 0; i--) {\n      res += (str[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, str.length - i - 1)\n    }\n    return res\n  }\n```\n\n\n#### 小数部分运算\n\n```javascript\n\n  // 小数部分运算\n  function calculateFloat(str) {\n    let res = 0\n    const radix = 10\n    for (let i = 0; i < str.length; i++) {\n      res += (str[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, i * -1)\n    }\n    return res\n  }\n```\n\n\n#### 指数部分运算\n\n```javascript\n\n  // 指数部分运算\n  function calculateExponent(int, float, exponentSign, exponent) {\n    // if (float)\n    let str = int + 0.1 * float\n    const radix = 10\n    const exponentInt = calculateInt(exponent)\n    if (exponentSign === '+') {\n      str = str * Math.pow(radix, exponentInt)\n    } else {\n      str = str * Math.pow(radix, exponentInt * -1)\n    }\n    // console.log('Math.abs(str)', Math.abs(str) -  Math.floor(str))\n    // // console.log('Number.EPSILON', Number.EPSILON)\n    // if (Math.abs(str) -  Math.floor(str)) {\n    //   return str.toFixed(1)\n    // }\n    return str\n  }\n```\n\n#### 单元测试\n- 测试用例\n\n```javascript\n  console.log(converStringToDeciaml('1.0e+10'))\n  console.log('parseFloat 结果', parseFloat('1.0e+10', 10))\n  console.log(converStringToDeciaml('-1.0e+10'))\n  console.log('parseFloat 结果', parseFloat('-1.0e+10', 10))\n  console.log(converStringToDeciaml('1.012e+10'))\n  console.log('parseFloat 结果', parseFloat('1.012e+10', 10))\n  console.log(converStringToDeciaml('-1.012e+10'))\n  console.log('parseFloat 结果', parseFloat('-1.012e+10', 10))\n  console.log(converStringToDeciaml('.012e+10'))\n  console.log('parseFloat 结果', parseFloat('.012e+10', 10))\n  console.log(converStringToDeciaml('-.012e+10'))\n  console.log('parseFloat 结果', parseFloat('-.012e+10', 10))\n  console.log(converStringToDeciaml('0.12e+10'))\n  console.log('parseFloat 结果', parseFloat('0.12e+10', 10))\n  console.log(converStringToDeciaml('-0.12e+10'))\n  console.log('parseFloat 结果', parseFloat('-0.12e+10', 10))\n  console.log(converStringToDeciaml('1.2e-10'))\n  console.log('parseFloat 结果', parseFloat('1.2e-10', 10))\n  console.log(converStringToDeciaml('-1.2e-10'))\n  console.log('parseFloat 结果', parseFloat('-1.2e-10', 10))\n  console.log(converStringToDeciaml('-1.22'))\n  console.log('parseFloat 结果', parseFloat('-1.22', 10))\n  console.log(converStringToDeciaml('Infinity'))\n  console.log('parseFloat 结果', parseFloat('Infinity', 10))\n  console.log(converStringToDeciaml('Infinity2222'))\n  console.log('parseFloat 结果', parseFloat('Infinity2222', 10))\n  console.log(converStringToDeciaml('22Infinity2222'))\n  console.log('parseFloat 结果', parseFloat('22Infinity2222', 10))\n```\n\n- 测试截图\n- ![第一部分测试截图](http://p1.meituan.net/myvideodistribute/f3bc45ab42eea92318ad58711d21a666220332.png)\n- ![第二部分测试截图](http://p1.meituan.net/myvideodistribute/2cf7b8c0ae63f2009cbd77d83dec1e2c176792.png)\n\n## 待解决问题\n- 是的 😭 它的浮点数的舍入，我没有想到好的方法，哭唧唧\n- [代码地址](https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertStringToNumber.html)\n\n\n## 写在后面\n- 等我有空把博客评论搞一下，欢迎大家来告诉我的遗留问题该怎么解决，以及你们在参考我的实现时，有测试用例过不去的地方，也可以评论告诉我，我优化代码。\n- 大家等不及的话，可以去我的 [csdn](https://blog.csdn.net/Elle_Peng/article/details/105748022) 评论告诉我，卑微小彭，在线求解\n- 祝大家多多发财\n","source":"_posts/convertStringToNumber.md","raw":"---\ntitle: Javascript-convertStringToNumber\ndate: 2020-04-24 20:49:31\ntags: \n- 前端概念\n- 算法\ncategories:\n- [前端概念]\ndescription:\n- 是的我要折腾一下 Javascript parseInt+parseFloat 内部实现，convertStringToNumber 了🙆\n\n\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 简单记录一下，Javascript parseInt+parseFloat 内部实现，并实现 convertStringToNumber\n\n<!-- more -->\n\n## 实践准备\n- 首先我们需要简单梳理一下我们的实现过程，再根据 [ECMAScript-262](https://www.ecma-international.org/publications/standards/Ecma-262.htm) 标准完善实现\n- input: @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数\n- 对 input 的简单处理 StringNumericLiteral\n\t- 规格化 str\n\t- ![StringNumericLiteral BNF](http://p0.meituan.net/myvideodistribute/6f4d129d30fe4d0b45743d72da9760ca14615.png)\n\t\t- 将 str 中可能出现的 StrWhiteSpace 去掉\n\t\t\t- ![StrWhiteSpace BNF](http://p0.meituan.net/myvideodistribute/3ab76a2ee0627ddeeec42e093ae8307717214.png)\n\t\t\t\t- ![LineTerminator BNF](http://p0.meituan.net/myvideodistribute/d9ba181d676994f053ba3ba067279cf48592.png)\n\t- 判断 radix 是否合法，仅支持 Decimal / BinaryInteger / OctalInteger / HexInteger radix\n\t\t- Decimal: 10\n\t\t- BinaryInteger: 2\n\t\t- OctalInteger: 8\n\t\t- HexInteger: 16\n- 简单算法处理过程\n\t- 十进制数\n\t\t- ![StrDecimalLiteral BNF](http://p0.meituan.net/myvideodistribute/dbb89c490f4cbe92ce1e7b1025912cde51542.png)\n\t\t- 处理 Infinity 情况\n\t\t- 符号位处理\n\t\t- 小数点\n\t\t- 科学计数法\n\t- 二进制数\n\t\t- ![BinaryInteger](http://p1.meituan.net/myvideodistribute/f12e98da62b6529c1d3781a6c1dc36a86760.png)\n\t- 八进制数\n\t\t- ![OctalInteger](http://p1.meituan.net/myvideodistribute/e11bf633f8350bb17f761b719762ed038371.png)\n\t- 十六进制数\n\t\t- ![HexInteger](http://p0.meituan.net/myvideodistribute/274e704676b7d52093ac555c4b43f61013946.png)\n- output: return number\n\n## 详细实践\n- 根据上面的实践准备\n\n```javascript\n/*\n* @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数\n* return: number\n*/\nfunction convertStringToNumber(str, radix) {\n  const noWhiteSpaceStr = replaceWhiteSpaceInStr(str) /** 将 str 中的 whitespace 进行匹配 */\n  const checkedRadixStr = formatStrByRadix(str, radix) /** 将 str 根据指定基数进行转换 */\n  let resNum = 0\n  switch (radix) {\n    case 10:\n      resNum = converStringToDeciaml(str) /** 将 str 转成十进制 */\n      break;\n    case 2:\n      resNum = converStringToBinaryInteger(str) /** 将 str 转成二进制*/\n      break;\n    case 8:\n      resNum = converStringToOctalInteger(str) /** 将 str 转成八进制*/\n      break;\n    case 16:\n      resNum = converStringToHexIntegers(str) /** 将 str 转成十六进制*/\n      break;\n    default:\n      return NaN\n  }\n  return resNum\n}\n```\n- 将 str 中的 whitespace 进行匹配\n\t\n\t```javascript\n\t/*\n\t* @params: { str } 输入需要替换的字符串\n\t* return: resStr 无 whitespace 字符串\n\t*/\n\tfunction replaceWhiteSpaceInStr(str) {\n\t  let resStr = str.replace(/\\s*/g, '') // 去除空格\n\t  // resStr = resStr.replace(/^[\\u000A|\\u000D|\\u2028|\\u2029]/g, '') // 去除 LineTerminator unicode输入方式\n\t  resStr =  resStr.replace(/[\\r|\\n]/g, '') // 去除换行\n\t  return resStr\n\t}\n\t```\n\t- 单元测试\n\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/a70fa86dd4d8261537f8cbf5c0e5bc2c71147.png)\n- 将 str 根据指定基数进行转换\n\t- [正则表达式匹配 Number 字面量](https://ele-peng.github.io/2020/04/20/Reg-Number/)\n\t\n\t```javascript\n\t/*\n\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t* return: resStr 根据指定基数转换过得字符串\n\t*/\n\tfunction formatStrByRadix(str, radix) {\n\t  let resStr = ''\n\t  let testReg = null\n\t  switch (radix) {\n\t    case 10:\n\t      testReg = /^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?/\n\t      break;\n\t    case 2:\n\t      // 根据 ECMA-262 是 /^0(b|B)(0|1)+$/\n\t      // 但是我在 Chrome 浏览器上测了，二进制没有 'b' or 'B'\n\t      testReg = /^(0|1)+/\n\t      break;\n\t    case 8:\n\t      // 根据 ECMA-262 是 /^0(O|o)[0-7]+$/\n\t      // 但是我在 Chrome 浏览器上测了，二进制没有 'o' or 'O'\n\t      testReg = /^[0-7]+/\n\t      break;\n\t    case 16:\n\t      // 根据 ECMA-262 是 /^0(x|X)([0-9a-fA-F])+/\n\t      // 但是我在 Chrome 浏览器自测中发现，没有表示符 'x' or 'X'也可\n\t      testReg = /^0(x|X)?([0-9a-fA-F])+/\n\t      break;\n\t    default:\n\t      console.log(`radix: ${radix}, str:  ${str} illegal radix`)\n\t      return false\n\t  }\n\t  resStr = (testReg.exec(str) && testReg.exec(str)['0']) || 'convert fail'\n\t  console.log(`radix: ${radix}, ${str} --> resStr: `, resStr)\n\t}\n\tformatStrByRadix('001010101', 3)\n\tformatStrByRadix('001010101', 2)\n\tformatStrByRadix('001010101', 8)\n\tformatStrByRadix('0b01010101', 2)\n\tformatStrByRadix('012345677', 8)\n\tformatStrByRadix('012345677', 2)\n\tformatStrByRadix('0o12345677', 8)\n\tformatStrByRadix('1.01E+23', 10)\n\tformatStrByRadix('.012345677', 10)\n\tformatStrByRadix('.012345677', 10)\n\tformatStrByRadix('0123acfACF', 16)\n\tformatStrByRadix('0x123acfACF', 16)\n\tformatStrByRadix('0x123acfACFG', 16)\n\t```\n\t- 单元测试\n\t\t- ![单元测试](http://p0.meituan.net/myvideodistribute/ff9d3e6a3cd279427f8873f91911290774369.png)\n\n- 根据指定基数进行相应算法转换\n\t- 二进制：\n\t\t\n\t\t```javascript\n\t\t\n\t\t// 将 str 转成二进制\n\t\tfunction converStringToBinaryInteger(str, radix) {\n\t\t  return strMultipleRadix(str, radix)\n\t\t}\n\t\t\n\t\t/*\n\t\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t* return: resStr 乘以指定基数转换过得字符串\n\t\t*/\n\t\tfunction strMultipleRadix(str, radix) {\n\t\t  let tempStrArr = str.split('')\n\t\t  let res = 0\n\t\t  for (let i = tempStrArr.length - 1; i > 0; i --) {\n\t\t    res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t  }\n\t\t  return res\n\t\t}\n\t\tconverStringToBinaryInteger('001010101', 2)\n\t\t```\n\t\t\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/5f3f3d1a2d0851eddaa1e258a182831864745.png)\n\t- 八进制\n\t\t- 同上\n\n\t\t\t```javascript\n\t\t\t// 将 str 转成八进制\n\t\t\tfunction converStringToBinaryInteger(str, radix) {\n\t\t\t  return strMultipleRadix(str, radix)\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t* @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t\t* return: resStr 乘以指定基数转换过得字符串\n\t\t\t*/\n\t\t\tfunction strMultipleRadix(str, radix) {\n\t\t\t  let tempStrArr = str.split('')\n\t\t\t  let res = 0\n\t\t\t  for (let i = tempStrArr.length - 1; i > 0; i --) {\n\t\t\t    res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t  }\n\t\t\t  return res\n\t\t\t}\n\t\t\tconverStringToBinaryInteger('001010101', 2)\n\t\t\t```\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p1.meituan.net/myvideodistribute/e9db13d824513d4e72509cd571f90dc069034.png)\n\t- 十六进制\n\t\t- 需要对 a-f A-F 进行判断，别忘了+10\n\n\t\t\t```javascript\n\t\t\t  // 将 str 转成十六进制\n\t\t\t  function converStringToBinaryInteger(str, radix) {\n\t\t\t    return strMultipleRadix(str, radix)\n\t\t\t  }\n\t\t\t\n\t\t\t  /*\n\t\t\t  * @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t\t\t  * return: resStr 乘以指定基数转换过得字符串\n\t\t\t  */\n\t\t\t  function strMultipleRadix(str, radix) {\n\t\t\t    let tempStrArr = str.split('')\n\t\t\t    let res = 0\n\t\t\t    for (let i = tempStrArr.length - 1; i > 0; i--) {\n\t\t\t      if (radix === 16) {\n\t\t\t        if ((tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) < 10)) {\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        } else if ((tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) < 6)) {\n\t\t\t          console.log('(tempStrArr[i].codePointAt(0)a', tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0))\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        } else if ((tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) < 6)) {\n\t\t\t          console.log('(tempStrArr[i].codePointAt(0)A', tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0))\n\t\t\t          res += (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t        }\n\t\t\t      } else {\n\t\t\t        res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t\t\t      }\n\t\t\t    }\n\t\t\t    return res\n\t\t\t  }\n\t\t\t  console.log(converStringToBinaryInteger('001010101', 16))\n\t\t\t  console.log(converStringToBinaryInteger('00101acfAFF', 16))\n\t\t\t```\n\t\t- 单元测试\n\t\t\t- ![单元测试截图](http://p0.meituan.net/myvideodistribute/e2e319f170fe2334f7b589cfc0f77b06205824.png)\n- 最终二/八/十六进制根据指定基数进行相应算法转换方法为：\n\t\n\t```javascript\n\t\t/*\n\t  * @params: { str } 输入需要替换的字符串, { radix } 转换的指定基数\n\t  * return: resStr 乘以指定基数转换过得字符串\n\t  */\n\t  function strMultipleRadix(str, radix) {\n\t    let tempStrArr = str.split('')\n\t    let res = 0\n\t    for (let i = tempStrArr.length - 1; i > 0; i--) {\n\t      if (radix === 16) {\n\t        if ((tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0) < 10)) {\n\t          res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        } else if ((tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) < 6)) {\n\t          res += (tempStrArr[i].codePointAt(0) - 'a'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        } else if ((tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) >= 0) && (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) < 6)) {\n\t          res += (tempStrArr[i].codePointAt(0) - 'A'.codePointAt(0) + 10) * Math.pow(radix, tempStrArr.length - i - 1)\n\t        }\n\t      } else {\n\t        res += (tempStrArr[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, tempStrArr.length - i - 1)\n\t      }\n\t    }\n\t    return res\n\t  }\n\t```\n### 转换成十进制\n- 实践思路\n\t1. 判断正负符号位\n\t2. 判断是否为 Infinity\n\t3. 判断是否为 整数\n\t\t1. 整数\n\t\t\t1. 是否为科学计数法表示\n\t\t\t\t1. 是，通过指数位置分成两部分：整数部分+指数部分\n\t\t\t\t2. 否，只需处理整数部分\n\t\t2. 小数\n\t\t\t1. 是否为科学计数法表示\n\t\t\t\t1. 是，通过分割成小数点到指数，分成三部分：整数部分+小数部分+指数部分\n\t\t\t\t2. 否，通过小数点位置，分成两部分：整数部分+小数部分\n\t\n- 代码大致为：\n\n\n```javascript \n  function converStringToDeciaml(str) {\n    // console.log('str-=-=--=-==-=', str)\n    const sign = getSign(str)\n    const strFormatBySign = formatStrBySign(str)\n    if (isInfinity(strFormatBySign)) return (1 / 0) * sign // 如果为 Inifity,乘以符号位输出Infinity\n    const numberObject = splitStr(strFormatBySign)\n    const {int, float, exponentSign, exponent} = numberObject\n    // console.log('numberObject', numberObject)\n    const resInt = calculateInt(int) // 计算整数部分\n    // console.log('resInt', resInt)\n    const resFloat = calculateFloat(float) // 计算小数部分\n    // console.log('resFloat', resFloat)\n    const resExponent = calculateExponent(resInt, resFloat, exponentSign, exponent) // 计算（整数+小数）*  指数部分\n    const res = sign * resExponent // 最后乘以符号位\n    return res\n  }\n```\n\t\n#### 判断正负，并根据符号位格式化字符串\n\n```javascript\n\n  // 获取符号位\n  function getSign(str) {\n    // 如果S的首字符为'-'\n    if(str.indexOf('-') == 0) { \n      return -1\n    }\n    return 1\n  }\n```\n#### 根据符号位格式化字符串（移除字符号位）\n\n```javascript\n  // 根据符号位格式化字符串\n  function formatStrBySign(str) {\n    // 如果 str 的首字符为‘+’或'-'，则移除首字符\n    if (str.indexOf('-') == 0 || str.indexOf('+') == 0) {\n      str = str.substring(1, str.length)\n    }\n    return str\n  }\n```\n\n#### 判断是否为Infinity\n\n```javascript\n  // 是否为 Infinity\n  function isInfinity(str) {\n    const testReg = /^Infinity/\n    let resReg = testReg.exec(str)\n    return resReg && resReg[0]\n  }\n```\n\n#### 切割字符串，分成整数+小数+指数位符号+指数部分\n\n```javascript\n  // 切割字符串\n  /*\n  * @params: { str } 输入需要切割的字符串\n  * return: res: Object {\n  *   int: 整数位,\n  *   float: 小数位,\n  *   exponentSign: 指数位符号,\n  *   exponent: 指数位\n  * }\n  */\n  function splitStr(str) {\n    const testReg = /^((0)|([1-9][0-9]*))?.?([0-9]*)(e|E)?((\\+|\\-)?([0-9]*))?/\n    let resReg = testReg.exec(str)\n    let res = {\n      int: resReg['1'] || 0,\n      float: resReg['4'] || 0,\n      exponentSign: resReg['7'] || '+',\n      exponent: resReg['8'] || 0\n    }\n    return res\n  }\n```\n\n#### 整数部分运算\n\n```javascript\n\n  // 整数部分运算\n  function calculateInt(str) {\n    let res = 0\n    const radix = 10\n    for (let i = str.length - 1; i >= 0; i--) {\n      res += (str[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, str.length - i - 1)\n    }\n    return res\n  }\n```\n\n\n#### 小数部分运算\n\n```javascript\n\n  // 小数部分运算\n  function calculateFloat(str) {\n    let res = 0\n    const radix = 10\n    for (let i = 0; i < str.length; i++) {\n      res += (str[i].codePointAt(0) - '0'.codePointAt(0)) * Math.pow(radix, i * -1)\n    }\n    return res\n  }\n```\n\n\n#### 指数部分运算\n\n```javascript\n\n  // 指数部分运算\n  function calculateExponent(int, float, exponentSign, exponent) {\n    // if (float)\n    let str = int + 0.1 * float\n    const radix = 10\n    const exponentInt = calculateInt(exponent)\n    if (exponentSign === '+') {\n      str = str * Math.pow(radix, exponentInt)\n    } else {\n      str = str * Math.pow(radix, exponentInt * -1)\n    }\n    // console.log('Math.abs(str)', Math.abs(str) -  Math.floor(str))\n    // // console.log('Number.EPSILON', Number.EPSILON)\n    // if (Math.abs(str) -  Math.floor(str)) {\n    //   return str.toFixed(1)\n    // }\n    return str\n  }\n```\n\n#### 单元测试\n- 测试用例\n\n```javascript\n  console.log(converStringToDeciaml('1.0e+10'))\n  console.log('parseFloat 结果', parseFloat('1.0e+10', 10))\n  console.log(converStringToDeciaml('-1.0e+10'))\n  console.log('parseFloat 结果', parseFloat('-1.0e+10', 10))\n  console.log(converStringToDeciaml('1.012e+10'))\n  console.log('parseFloat 结果', parseFloat('1.012e+10', 10))\n  console.log(converStringToDeciaml('-1.012e+10'))\n  console.log('parseFloat 结果', parseFloat('-1.012e+10', 10))\n  console.log(converStringToDeciaml('.012e+10'))\n  console.log('parseFloat 结果', parseFloat('.012e+10', 10))\n  console.log(converStringToDeciaml('-.012e+10'))\n  console.log('parseFloat 结果', parseFloat('-.012e+10', 10))\n  console.log(converStringToDeciaml('0.12e+10'))\n  console.log('parseFloat 结果', parseFloat('0.12e+10', 10))\n  console.log(converStringToDeciaml('-0.12e+10'))\n  console.log('parseFloat 结果', parseFloat('-0.12e+10', 10))\n  console.log(converStringToDeciaml('1.2e-10'))\n  console.log('parseFloat 结果', parseFloat('1.2e-10', 10))\n  console.log(converStringToDeciaml('-1.2e-10'))\n  console.log('parseFloat 结果', parseFloat('-1.2e-10', 10))\n  console.log(converStringToDeciaml('-1.22'))\n  console.log('parseFloat 结果', parseFloat('-1.22', 10))\n  console.log(converStringToDeciaml('Infinity'))\n  console.log('parseFloat 结果', parseFloat('Infinity', 10))\n  console.log(converStringToDeciaml('Infinity2222'))\n  console.log('parseFloat 结果', parseFloat('Infinity2222', 10))\n  console.log(converStringToDeciaml('22Infinity2222'))\n  console.log('parseFloat 结果', parseFloat('22Infinity2222', 10))\n```\n\n- 测试截图\n- ![第一部分测试截图](http://p1.meituan.net/myvideodistribute/f3bc45ab42eea92318ad58711d21a666220332.png)\n- ![第二部分测试截图](http://p1.meituan.net/myvideodistribute/2cf7b8c0ae63f2009cbd77d83dec1e2c176792.png)\n\n## 待解决问题\n- 是的 😭 它的浮点数的舍入，我没有想到好的方法，哭唧唧\n- [代码地址](https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertStringToNumber.html)\n\n\n## 写在后面\n- 等我有空把博客评论搞一下，欢迎大家来告诉我的遗留问题该怎么解决，以及你们在参考我的实现时，有测试用例过不去的地方，也可以评论告诉我，我优化代码。\n- 大家等不及的话，可以去我的 [csdn](https://blog.csdn.net/Elle_Peng/article/details/105748022) 评论告诉我，卑微小彭，在线求解\n- 祝大家多多发财\n","slug":"convertStringToNumber","published":1,"updated":"2020-04-27T04:03:44.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xe00351wp32p43860k","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>简单记录一下，Javascript parseInt+parseFloat 内部实现，并实现 convertStringToNumber</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><ul>\n<li>首先我们需要简单梳理一下我们的实现过程，再根据 <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMAScript-262</a> 标准完善实现</li>\n<li>input: @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数</li>\n<li>对 input 的简单处理 StringNumericLiteral<ul>\n<li>规格化 str</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6f4d129d30fe4d0b45743d72da9760ca14615.png\" alt=\"StringNumericLiteral BNF\"><ul>\n<li>将 str 中可能出现的 StrWhiteSpace 去掉<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ab76a2ee0627ddeeec42e093ae8307717214.png\" alt=\"StrWhiteSpace BNF\"><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d9ba181d676994f053ba3ba067279cf48592.png\" alt=\"LineTerminator BNF\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断 radix 是否合法，仅支持 Decimal / BinaryInteger / OctalInteger / HexInteger radix<ul>\n<li>Decimal: 10</li>\n<li>BinaryInteger: 2</li>\n<li>OctalInteger: 8</li>\n<li>HexInteger: 16</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>简单算法处理过程<ul>\n<li>十进制数<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/dbb89c490f4cbe92ce1e7b1025912cde51542.png\" alt=\"StrDecimalLiteral BNF\"></li>\n<li>处理 Infinity 情况</li>\n<li>符号位处理</li>\n<li>小数点</li>\n<li>科学计数法</li>\n</ul>\n</li>\n<li>二进制数<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f12e98da62b6529c1d3781a6c1dc36a86760.png\" alt=\"BinaryInteger\"></li>\n</ul>\n</li>\n<li>八进制数<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e11bf633f8350bb17f761b719762ed038371.png\" alt=\"OctalInteger\"></li>\n</ul>\n</li>\n<li>十六进制数<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/274e704676b7d52093ac555c4b43f61013946.png\" alt=\"HexInteger\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>output: return number</li>\n</ul>\n<h2 id=\"详细实践\"><a href=\"#详细实践\" class=\"headerlink\" title=\"详细实践\"></a>详细实践</h2><ul>\n<li>根据上面的实践准备</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要转换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: number</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertStringToNumber</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> noWhiteSpaceStr = replaceWhiteSpaceInStr(str) <span class=\"comment\">/** 将 str 中的 whitespace 进行匹配 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> checkedRadixStr = formatStrByRadix(str, radix) <span class=\"comment\">/** 将 str 根据指定基数进行转换 */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resNum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (radix) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      resNum = converStringToDeciaml(str) <span class=\"comment\">/** 将 str 转成十进制 */</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      resNum = converStringToBinaryInteger(str) <span class=\"comment\">/** 将 str 转成二进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      resNum = converStringToOctalInteger(str) <span class=\"comment\">/** 将 str 转成八进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">16</span>:</span><br><span class=\"line\">      resNum = converStringToHexIntegers(str) <span class=\"comment\">/** 将 str 转成十六进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resNum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>将 str 中的 whitespace 进行匹配</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 无 whitespace 字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceWhiteSpaceInStr</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resStr = str.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">''</span>) <span class=\"comment\">// 去除空格</span></span><br><span class=\"line\">  <span class=\"comment\">// resStr = resStr.replace(/^[\\u000A|\\u000D|\\u2028|\\u2029]/g, '') // 去除 LineTerminator unicode输入方式</span></span><br><span class=\"line\">  resStr =  resStr.replace(<span class=\"regexp\">/[\\r|\\n]/g</span>, <span class=\"string\">''</span>) <span class=\"comment\">// 去除换行</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> resStr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单元测试<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a70fa86dd4d8261537f8cbf5c0e5bc2c71147.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将 str 根据指定基数进行转换</p>\n<ul>\n<li><p><a href=\"https://ele-peng.github.io/2020/04/20/Reg-Number/\" target=\"_blank\" rel=\"noopener\">正则表达式匹配 Number 字面量</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 根据指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatStrByRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resStr = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> testReg = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (radix) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(b|B)(0|1)+$/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器上测了，二进制没有 'b' or 'B'</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^(0|1)+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(O|o)[0-7]+$/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器上测了，二进制没有 'o' or 'O'</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^[0-7]+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">16</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(x|X)([0-9a-fA-F])+/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器自测中发现，没有表示符 'x' or 'X'也可</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^0(x|X)?([0-9a-fA-F])+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`radix: <span class=\"subst\">$&#123;radix&#125;</span>, str:  <span class=\"subst\">$&#123;str&#125;</span> illegal radix`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resStr = (testReg.exec(str) &amp;&amp; testReg.exec(str)[<span class=\"string\">'0'</span>]) || <span class=\"string\">'convert fail'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`radix: <span class=\"subst\">$&#123;radix&#125;</span>, <span class=\"subst\">$&#123;str&#125;</span> --&gt; resStr: `</span>, resStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0b01010101'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'012345677'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'012345677'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0o12345677'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'1.01E+23'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'.012345677'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'.012345677'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0123acfACF'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0x123acfACF'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0x123acfACFG'</span>, <span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ff9d3e6a3cd279427f8873f91911290774369.png\" alt=\"单元测试\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>根据指定基数进行相应算法转换</p>\n<ul>\n<li><p>二进制：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 str 转成二进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单元测试<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5f3f3d1a2d0851eddaa1e258a182831864745.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>八进制</p>\n<ul>\n<li><p>同上</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 str 转成八进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e9db13d824513d4e72509cd571f90dc069034.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>十六进制</p>\n<ul>\n<li><p>需要对 a-f A-F 进行判断，别忘了+10</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 str 转成十六进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix === <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'(tempStrArr[i].codePointAt(0)a'</span>, tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'(tempStrArr[i].codePointAt(0)A'</span>, tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">16</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToBinaryInteger(<span class=\"string\">'00101acfAFF'</span>, <span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e2e319f170fe2334f7b589cfc0f77b06205824.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最终二/八/十六进制根据指定基数进行相应算法转换方法为：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\"> * return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">   <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (radix === <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换成十进制\"><a href=\"#转换成十进制\" class=\"headerlink\" title=\"转换成十进制\"></a>转换成十进制</h3></li>\n<li><p>实践思路</p>\n<ol>\n<li>判断正负符号位</li>\n<li>判断是否为 Infinity</li>\n<li>判断是否为 整数<ol>\n<li>整数<ol>\n<li>是否为科学计数法表示<ol>\n<li>是，通过指数位置分成两部分：整数部分+指数部分</li>\n<li>否，只需处理整数部分</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>小数<ol>\n<li>是否为科学计数法表示<ol>\n<li>是，通过分割成小数点到指数，分成三部分：整数部分+小数部分+指数部分</li>\n<li>否，通过小数点位置，分成两部分：整数部分+小数部分</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>代码大致为：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToDeciaml</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('str-=-=--=-==-=', str)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sign = getSign(str)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> strFormatBySign = formatStrBySign(str)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInfinity(strFormatBySign)) <span class=\"keyword\">return</span> (<span class=\"number\">1</span> / <span class=\"number\">0</span>) * sign <span class=\"comment\">// 如果为 Inifity,乘以符号位输出Infinity</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> numberObject = splitStr(strFormatBySign)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;int, float, exponentSign, exponent&#125; = numberObject</span><br><span class=\"line\">  <span class=\"comment\">// console.log('numberObject', numberObject)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resInt = calculateInt(int) <span class=\"comment\">// 计算整数部分</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log('resInt', resInt)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resFloat = calculateFloat(float) <span class=\"comment\">// 计算小数部分</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log('resFloat', resFloat)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resExponent = calculateExponent(resInt, resFloat, exponentSign, exponent) <span class=\"comment\">// 计算（整数+小数）*  指数部分</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = sign * resExponent <span class=\"comment\">// 最后乘以符号位</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断正负，并根据符号位格式化字符串\"><a href=\"#判断正负，并根据符号位格式化字符串\" class=\"headerlink\" title=\"判断正负，并根据符号位格式化字符串\"></a>判断正负，并根据符号位格式化字符串</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取符号位</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果S的首字符为'-'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(<span class=\"string\">'-'</span>) == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据符号位格式化字符串（移除字符号位）\"><a href=\"#根据符号位格式化字符串（移除字符号位）\" class=\"headerlink\" title=\"根据符号位格式化字符串（移除字符号位）\"></a>根据符号位格式化字符串（移除字符号位）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据符号位格式化字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatStrBySign</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 str 的首字符为‘+’或'-'，则移除首字符</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'-'</span>) == <span class=\"number\">0</span> || str.indexOf(<span class=\"string\">'+'</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = str.substring(<span class=\"number\">1</span>, str.length)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断是否为Infinity\"><a href=\"#判断是否为Infinity\" class=\"headerlink\" title=\"判断是否为Infinity\"></a>判断是否为Infinity</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否为 Infinity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInfinity</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> testReg = <span class=\"regexp\">/^Infinity/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resReg = testReg.exec(str)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resReg &amp;&amp; resReg[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切割字符串，分成整数-小数-指数位符号-指数部分\"><a href=\"#切割字符串，分成整数-小数-指数位符号-指数部分\" class=\"headerlink\" title=\"切割字符串，分成整数+小数+指数位符号+指数部分\"></a>切割字符串，分成整数+小数+指数位符号+指数部分</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切割字符串</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要切割的字符串</span></span><br><span class=\"line\"><span class=\"comment\">* return: res: Object &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*   int: 整数位,</span></span><br><span class=\"line\"><span class=\"comment\">*   float: 小数位,</span></span><br><span class=\"line\"><span class=\"comment\">*   exponentSign: 指数位符号,</span></span><br><span class=\"line\"><span class=\"comment\">*   exponent: 指数位</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitStr</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> testReg = <span class=\"regexp\">/^((0)|([1-9][0-9]*))?.?([0-9]*)(e|E)?((\\+|\\-)?([0-9]*))?/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resReg = testReg.exec(str)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;</span><br><span class=\"line\">    int: resReg[<span class=\"string\">'1'</span>] || <span class=\"number\">0</span>,</span><br><span class=\"line\">    float: resReg[<span class=\"string\">'4'</span>] || <span class=\"number\">0</span>,</span><br><span class=\"line\">    exponentSign: resReg[<span class=\"string\">'7'</span>] || <span class=\"string\">'+'</span>,</span><br><span class=\"line\">    exponent: resReg[<span class=\"string\">'8'</span>] || <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数部分运算\"><a href=\"#整数部分运算\" class=\"headerlink\" title=\"整数部分运算\"></a>整数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 整数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateInt</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = str.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    res += (str[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, str.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"小数部分运算\"><a href=\"#小数部分运算\" class=\"headerlink\" title=\"小数部分运算\"></a>小数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 小数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateFloat</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    res += (str[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, i * <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"指数部分运算\"><a href=\"#指数部分运算\" class=\"headerlink\" title=\"指数部分运算\"></a>指数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateExponent</span>(<span class=\"params\">int, float, exponentSign, exponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// if (float)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = int + <span class=\"number\">0.1</span> * float</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> exponentInt = calculateInt(exponent)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exponentSign === <span class=\"string\">'+'</span>) &#123;</span><br><span class=\"line\">    str = str * <span class=\"built_in\">Math</span>.pow(radix, exponentInt)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    str = str * <span class=\"built_in\">Math</span>.pow(radix, exponentInt * <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('Math.abs(str)', Math.abs(str) -  Math.floor(str))</span></span><br><span class=\"line\">  <span class=\"comment\">// // console.log('Number.EPSILON', Number.EPSILON)</span></span><br><span class=\"line\">  <span class=\"comment\">// if (Math.abs(str) -  Math.floor(str)) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return str.toFixed(1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><ul>\n<li>测试用例</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.0e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.0e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.0e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.0e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'0.12e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'0.12e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-0.12e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-0.12e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.2e-10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.2e-10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.2e-10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.2e-10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.22'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.22'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'Infinity'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'Infinity'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'Infinity2222'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'Infinity2222'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'22Infinity2222'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'22Infinity2222'</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试截图</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f3bc45ab42eea92318ad58711d21a666220332.png\" alt=\"第一部分测试截图\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/2cf7b8c0ae63f2009cbd77d83dec1e2c176792.png\" alt=\"第二部分测试截图\"></li>\n</ul>\n<h2 id=\"待解决问题\"><a href=\"#待解决问题\" class=\"headerlink\" title=\"待解决问题\"></a>待解决问题</h2><ul>\n<li>是的 😭 它的浮点数的舍入，我没有想到好的方法，哭唧唧</li>\n<li><a href=\"https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertStringToNumber.html\" target=\"_blank\" rel=\"noopener\">代码地址</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>等我有空把博客评论搞一下，欢迎大家来告诉我的遗留问题该怎么解决，以及你们在参考我的实现时，有测试用例过不去的地方，也可以评论告诉我，我优化代码。</li>\n<li>大家等不及的话，可以去我的 <a href=\"https://blog.csdn.net/Elle_Peng/article/details/105748022\" target=\"_blank\" rel=\"noopener\">csdn</a> 评论告诉我，卑微小彭，在线求解</li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>简单记录一下，Javascript parseInt+parseFloat 内部实现，并实现 convertStringToNumber</li>\n</ul>","more":"<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><ul>\n<li>首先我们需要简单梳理一下我们的实现过程，再根据 <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" target=\"_blank\" rel=\"noopener\">ECMAScript-262</a> 标准完善实现</li>\n<li>input: @params: { str } 输入需要转换的字符串, { radix } 转换的指定基数</li>\n<li>对 input 的简单处理 StringNumericLiteral<ul>\n<li>规格化 str</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6f4d129d30fe4d0b45743d72da9760ca14615.png\" alt=\"StringNumericLiteral BNF\"><ul>\n<li>将 str 中可能出现的 StrWhiteSpace 去掉<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ab76a2ee0627ddeeec42e093ae8307717214.png\" alt=\"StrWhiteSpace BNF\"><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d9ba181d676994f053ba3ba067279cf48592.png\" alt=\"LineTerminator BNF\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断 radix 是否合法，仅支持 Decimal / BinaryInteger / OctalInteger / HexInteger radix<ul>\n<li>Decimal: 10</li>\n<li>BinaryInteger: 2</li>\n<li>OctalInteger: 8</li>\n<li>HexInteger: 16</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>简单算法处理过程<ul>\n<li>十进制数<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/dbb89c490f4cbe92ce1e7b1025912cde51542.png\" alt=\"StrDecimalLiteral BNF\"></li>\n<li>处理 Infinity 情况</li>\n<li>符号位处理</li>\n<li>小数点</li>\n<li>科学计数法</li>\n</ul>\n</li>\n<li>二进制数<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f12e98da62b6529c1d3781a6c1dc36a86760.png\" alt=\"BinaryInteger\"></li>\n</ul>\n</li>\n<li>八进制数<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e11bf633f8350bb17f761b719762ed038371.png\" alt=\"OctalInteger\"></li>\n</ul>\n</li>\n<li>十六进制数<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/274e704676b7d52093ac555c4b43f61013946.png\" alt=\"HexInteger\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>output: return number</li>\n</ul>\n<h2 id=\"详细实践\"><a href=\"#详细实践\" class=\"headerlink\" title=\"详细实践\"></a>详细实践</h2><ul>\n<li>根据上面的实践准备</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要转换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: number</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertStringToNumber</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> noWhiteSpaceStr = replaceWhiteSpaceInStr(str) <span class=\"comment\">/** 将 str 中的 whitespace 进行匹配 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> checkedRadixStr = formatStrByRadix(str, radix) <span class=\"comment\">/** 将 str 根据指定基数进行转换 */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resNum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (radix) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      resNum = converStringToDeciaml(str) <span class=\"comment\">/** 将 str 转成十进制 */</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      resNum = converStringToBinaryInteger(str) <span class=\"comment\">/** 将 str 转成二进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      resNum = converStringToOctalInteger(str) <span class=\"comment\">/** 将 str 转成八进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">16</span>:</span><br><span class=\"line\">      resNum = converStringToHexIntegers(str) <span class=\"comment\">/** 将 str 转成十六进制*/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resNum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>将 str 中的 whitespace 进行匹配</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 无 whitespace 字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceWhiteSpaceInStr</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resStr = str.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">''</span>) <span class=\"comment\">// 去除空格</span></span><br><span class=\"line\">  <span class=\"comment\">// resStr = resStr.replace(/^[\\u000A|\\u000D|\\u2028|\\u2029]/g, '') // 去除 LineTerminator unicode输入方式</span></span><br><span class=\"line\">  resStr =  resStr.replace(<span class=\"regexp\">/[\\r|\\n]/g</span>, <span class=\"string\">''</span>) <span class=\"comment\">// 去除换行</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> resStr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单元测试<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a70fa86dd4d8261537f8cbf5c0e5bc2c71147.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将 str 根据指定基数进行转换</p>\n<ul>\n<li><p><a href=\"https://ele-peng.github.io/2020/04/20/Reg-Number/\" target=\"_blank\" rel=\"noopener\">正则表达式匹配 Number 字面量</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 根据指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatStrByRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resStr = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> testReg = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (radix) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^((0)|([1-9][0-9]*))?.?([0-9]*)((e|E)?(\\+|\\-)?([0-9]*))?/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(b|B)(0|1)+$/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器上测了，二进制没有 'b' or 'B'</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^(0|1)+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(O|o)[0-7]+$/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器上测了，二进制没有 'o' or 'O'</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^[0-7]+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">16</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 根据 ECMA-262 是 /^0(x|X)([0-9a-fA-F])+/</span></span><br><span class=\"line\">      <span class=\"comment\">// 但是我在 Chrome 浏览器自测中发现，没有表示符 'x' or 'X'也可</span></span><br><span class=\"line\">      testReg = <span class=\"regexp\">/^0(x|X)?([0-9a-fA-F])+/</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`radix: <span class=\"subst\">$&#123;radix&#125;</span>, str:  <span class=\"subst\">$&#123;str&#125;</span> illegal radix`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resStr = (testReg.exec(str) &amp;&amp; testReg.exec(str)[<span class=\"string\">'0'</span>]) || <span class=\"string\">'convert fail'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`radix: <span class=\"subst\">$&#123;radix&#125;</span>, <span class=\"subst\">$&#123;str&#125;</span> --&gt; resStr: `</span>, resStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'001010101'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0b01010101'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'012345677'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'012345677'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0o12345677'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'1.01E+23'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'.012345677'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'.012345677'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0123acfACF'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0x123acfACF'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">formatStrByRadix(<span class=\"string\">'0x123acfACFG'</span>, <span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ff9d3e6a3cd279427f8873f91911290774369.png\" alt=\"单元测试\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>根据指定基数进行相应算法转换</p>\n<ul>\n<li><p>二进制：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 str 转成二进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单元测试<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5f3f3d1a2d0851eddaa1e258a182831864745.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>八进制</p>\n<ul>\n<li><p>同上</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 str 转成八进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i --) &#123;</span><br><span class=\"line\">    res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e9db13d824513d4e72509cd571f90dc069034.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>十六进制</p>\n<ul>\n<li><p>需要对 a-f A-F 进行判断，别忘了+10</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 str 转成十六进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToBinaryInteger</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strMultipleRadix(str, radix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\">* return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix === <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'(tempStrArr[i].codePointAt(0)a'</span>, tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'(tempStrArr[i].codePointAt(0)A'</span>, tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">        res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToBinaryInteger(<span class=\"string\">'001010101'</span>, <span class=\"number\">16</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToBinaryInteger(<span class=\"string\">'00101acfAFF'</span>, <span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure></li>\n<li><p>单元测试</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/e2e319f170fe2334f7b589cfc0f77b06205824.png\" alt=\"单元测试截图\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最终二/八/十六进制根据指定基数进行相应算法转换方法为：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @params: &#123; str &#125; 输入需要替换的字符串, &#123; radix &#125; 转换的指定基数</span></span><br><span class=\"line\"><span class=\"comment\"> * return: resStr 乘以指定基数转换过得字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strMultipleRadix</span>(<span class=\"params\">str, radix</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> tempStrArr = str.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">   <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = tempStrArr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (radix === <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &gt;= <span class=\"number\">0</span>) &amp;&amp; (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) &lt; <span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">         res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'A'</span>.codePointAt(<span class=\"number\">0</span>) + <span class=\"number\">10</span>) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       res += (tempStrArr[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, tempStrArr.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换成十进制\"><a href=\"#转换成十进制\" class=\"headerlink\" title=\"转换成十进制\"></a>转换成十进制</h3></li>\n<li><p>实践思路</p>\n<ol>\n<li>判断正负符号位</li>\n<li>判断是否为 Infinity</li>\n<li>判断是否为 整数<ol>\n<li>整数<ol>\n<li>是否为科学计数法表示<ol>\n<li>是，通过指数位置分成两部分：整数部分+指数部分</li>\n<li>否，只需处理整数部分</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>小数<ol>\n<li>是否为科学计数法表示<ol>\n<li>是，通过分割成小数点到指数，分成三部分：整数部分+小数部分+指数部分</li>\n<li>否，通过小数点位置，分成两部分：整数部分+小数部分</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>代码大致为：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">converStringToDeciaml</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('str-=-=--=-==-=', str)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sign = getSign(str)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> strFormatBySign = formatStrBySign(str)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInfinity(strFormatBySign)) <span class=\"keyword\">return</span> (<span class=\"number\">1</span> / <span class=\"number\">0</span>) * sign <span class=\"comment\">// 如果为 Inifity,乘以符号位输出Infinity</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> numberObject = splitStr(strFormatBySign)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;int, float, exponentSign, exponent&#125; = numberObject</span><br><span class=\"line\">  <span class=\"comment\">// console.log('numberObject', numberObject)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resInt = calculateInt(int) <span class=\"comment\">// 计算整数部分</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log('resInt', resInt)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resFloat = calculateFloat(float) <span class=\"comment\">// 计算小数部分</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log('resFloat', resFloat)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resExponent = calculateExponent(resInt, resFloat, exponentSign, exponent) <span class=\"comment\">// 计算（整数+小数）*  指数部分</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = sign * resExponent <span class=\"comment\">// 最后乘以符号位</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断正负，并根据符号位格式化字符串\"><a href=\"#判断正负，并根据符号位格式化字符串\" class=\"headerlink\" title=\"判断正负，并根据符号位格式化字符串\"></a>判断正负，并根据符号位格式化字符串</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取符号位</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果S的首字符为'-'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(<span class=\"string\">'-'</span>) == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据符号位格式化字符串（移除字符号位）\"><a href=\"#根据符号位格式化字符串（移除字符号位）\" class=\"headerlink\" title=\"根据符号位格式化字符串（移除字符号位）\"></a>根据符号位格式化字符串（移除字符号位）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据符号位格式化字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatStrBySign</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 str 的首字符为‘+’或'-'，则移除首字符</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'-'</span>) == <span class=\"number\">0</span> || str.indexOf(<span class=\"string\">'+'</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = str.substring(<span class=\"number\">1</span>, str.length)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断是否为Infinity\"><a href=\"#判断是否为Infinity\" class=\"headerlink\" title=\"判断是否为Infinity\"></a>判断是否为Infinity</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否为 Infinity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInfinity</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> testReg = <span class=\"regexp\">/^Infinity/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resReg = testReg.exec(str)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resReg &amp;&amp; resReg[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切割字符串，分成整数-小数-指数位符号-指数部分\"><a href=\"#切割字符串，分成整数-小数-指数位符号-指数部分\" class=\"headerlink\" title=\"切割字符串，分成整数+小数+指数位符号+指数部分\"></a>切割字符串，分成整数+小数+指数位符号+指数部分</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切割字符串</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params: &#123; str &#125; 输入需要切割的字符串</span></span><br><span class=\"line\"><span class=\"comment\">* return: res: Object &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*   int: 整数位,</span></span><br><span class=\"line\"><span class=\"comment\">*   float: 小数位,</span></span><br><span class=\"line\"><span class=\"comment\">*   exponentSign: 指数位符号,</span></span><br><span class=\"line\"><span class=\"comment\">*   exponent: 指数位</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitStr</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> testReg = <span class=\"regexp\">/^((0)|([1-9][0-9]*))?.?([0-9]*)(e|E)?((\\+|\\-)?([0-9]*))?/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resReg = testReg.exec(str)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;</span><br><span class=\"line\">    int: resReg[<span class=\"string\">'1'</span>] || <span class=\"number\">0</span>,</span><br><span class=\"line\">    float: resReg[<span class=\"string\">'4'</span>] || <span class=\"number\">0</span>,</span><br><span class=\"line\">    exponentSign: resReg[<span class=\"string\">'7'</span>] || <span class=\"string\">'+'</span>,</span><br><span class=\"line\">    exponent: resReg[<span class=\"string\">'8'</span>] || <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数部分运算\"><a href=\"#整数部分运算\" class=\"headerlink\" title=\"整数部分运算\"></a>整数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 整数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateInt</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = str.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    res += (str[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, str.length - i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"小数部分运算\"><a href=\"#小数部分运算\" class=\"headerlink\" title=\"小数部分运算\"></a>小数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 小数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateFloat</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    res += (str[i].codePointAt(<span class=\"number\">0</span>) - <span class=\"string\">'0'</span>.codePointAt(<span class=\"number\">0</span>)) * <span class=\"built_in\">Math</span>.pow(radix, i * <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"指数部分运算\"><a href=\"#指数部分运算\" class=\"headerlink\" title=\"指数部分运算\"></a>指数部分运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指数部分运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateExponent</span>(<span class=\"params\">int, float, exponentSign, exponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// if (float)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = int + <span class=\"number\">0.1</span> * float</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radix = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> exponentInt = calculateInt(exponent)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exponentSign === <span class=\"string\">'+'</span>) &#123;</span><br><span class=\"line\">    str = str * <span class=\"built_in\">Math</span>.pow(radix, exponentInt)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    str = str * <span class=\"built_in\">Math</span>.pow(radix, exponentInt * <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('Math.abs(str)', Math.abs(str) -  Math.floor(str))</span></span><br><span class=\"line\">  <span class=\"comment\">// // console.log('Number.EPSILON', Number.EPSILON)</span></span><br><span class=\"line\">  <span class=\"comment\">// if (Math.abs(str) -  Math.floor(str)) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return str.toFixed(1)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><ul>\n<li>测试用例</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.0e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.0e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.0e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.0e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-.012e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-.012e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'0.12e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'0.12e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-0.12e+10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-0.12e+10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'1.2e-10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'1.2e-10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.2e-10'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.2e-10'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'-1.22'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'-1.22'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'Infinity'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'Infinity'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'Infinity2222'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'Infinity2222'</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(converStringToDeciaml(<span class=\"string\">'22Infinity2222'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'parseFloat 结果'</span>, <span class=\"built_in\">parseFloat</span>(<span class=\"string\">'22Infinity2222'</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试截图</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f3bc45ab42eea92318ad58711d21a666220332.png\" alt=\"第一部分测试截图\"></li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/2cf7b8c0ae63f2009cbd77d83dec1e2c176792.png\" alt=\"第二部分测试截图\"></li>\n</ul>\n<h2 id=\"待解决问题\"><a href=\"#待解决问题\" class=\"headerlink\" title=\"待解决问题\"></a>待解决问题</h2><ul>\n<li>是的 😭 它的浮点数的舍入，我没有想到好的方法，哭唧唧</li>\n<li><a href=\"https://github.com/Ele-Peng/Frontend-01-Template/blob/master/week03/convertStringToNumber.html\" target=\"_blank\" rel=\"noopener\">代码地址</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>等我有空把博客评论搞一下，欢迎大家来告诉我的遗留问题该怎么解决，以及你们在参考我的实现时，有测试用例过不去的地方，也可以评论告诉我，我优化代码。</li>\n<li>大家等不及的话，可以去我的 <a href=\"https://blog.csdn.net/Elle_Peng/article/details/105748022\" target=\"_blank\" rel=\"noopener\">csdn</a> 评论告诉我，卑微小彭，在线求解</li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"【未完】从URL输入到...（一）","date":"2020-05-12T08:51:50.000Z","description":["从URL输入到..."],"_content":"\n\n## 写在前面\n- 嘿嘿嘿 😱\n- 别想歪，我们这个系列要做的是从经典面试题入手\n\t- 从 URL 输入 https://ele-peng.github.io/ 到页面展现到底发生了什么？\n- 简单了解一下计算机网络相关知识。是的，Elle 很惨😭 计算机网络学得稀烂\n\t\n\n<!-- more -->\n\n## 简单过程\n- 你先在浏览器里面输入 https://ele-peng.github.io/ ，这是一个 URL。浏览器只知道名字是“ele-peng.github.io”，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查找。可以使用一般的地址簿协议 DNS 去查找，还可以使用另一种更加精准的地址簿查找协议 HTTPDNS 。\n- 无论用哪一种方法查找，最终都会得到这个地址：52.74.223.119。这个是 IP 地址，是互联网世界的“门牌号”。\n- 知道了目标地址，浏览器就开始打包它的请求。这里会使用HTTPS协议。无论是什么协议，里面都会写明“你要请求什么”。﻿\n- DNS、HTTP、HTTPS 所在的层我们称为**应用层**。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，**通过 socket 编程来实现**。下一层是**传输层**。传输层有两种协议，一种是无连接的协议UDP，一种是面向连接的协议TCP。这里使用 TCP 协议。所谓的面向连接就是，TCP 会保证这个包能够到达目的地。如果不能到达，就会重新发送，直至到达。\n- TCP 协议里面会有两个端口，一个是浏览器监听的端口，一个是 github 的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。\n- 传输层封装完毕后，浏览器会将包交给操作系统的**网络层**。网络层的协议是 IP 协议。在 IP 协议里面会有源 IP 地址，即浏览器所在机器的 IP 地址和目标 IP 地址，也即 github 所在服务器的 IP 地址。\n- 操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然 github 网站不在本地，而在遥远的地方。\n- 操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去网关。而操作系统启动的时候，就会被 DHCP 协议配置 IP 地址，以及默认的网关的 IP 地址 192.168.1.1。\n- 操作系统如何将 IP 地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1 啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是 MAC 地址，而大吼的那一声是 ARP 协议。\n- 于是操作系统将 IP 包交给了下一层，也就是 **MAC 层**。网卡再将包发出去。由于这个包里面是有 MAC 地址的，因而它能够到达网关。\n- 网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个 IP 地址应该怎么走，这个叫作路由表。\n- 路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。\n- 一旦跨越城关，就需要拿出 IP 头来问，目标 IP 地址怎么走？\n- 城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为路由协议，常用的有 OSP F和 BGP 。﻿\n- 城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的 MAC 地址，通过下一个城关的 MAC 地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。\n- 最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。\n- 目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。\n- 在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次查询请求的结果，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。\n- 如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。这个重试绝非你的浏览器重新请求 github 个人主页。对于浏览器来讲，就发送了一次 github 个人主页请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送 github 个人主页请求。\n- 当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到 github 网站的进程正在监听这个端口号，假设一个 Tomcat，将这个包发给 github 网站。﻿\n- github 网站的进程得到 HTTP 请求的内容，知道了要响应啥。往往一个电商网站最初接待请求的这个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理 GitHub 个人主页的进程，要响应啥等等。\n- 如何告诉相关的进程呢？往往通过 RPC 调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理 GitHub 个人主页的进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。\n- 当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知查询成功。这个 HTTPS 的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示个人主页。\n\n## 网络分层模型\n### TCP/IP 协议栈\n- ![TCP/IP 协议栈](http://p0.meituan.net/myvideodistribute/6fea0628affaf34d09b59d845ffeb60a75766.png)\n- **link layer 链接层**：负责在以太网、WiFi 这样的底层网络上发送原始数据包（frame 帧），工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。\n- **internet layer 网际层**：IP 协议就处在这一层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。传输单位是包（packet）\n- **transport layer 传输层**：TCP/UDP 协议工作的层次\n\t- TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。\n\t- TCP 层的传输单位是段（segment）\n- **application layer 应用层**：各种面向具体应用的协议，例如 DHCP、HTTP、HTTPS、RTMP、DNS、P2P、GTP、RPC、Telnet、SSH、FTP、SMTP 等等。\n\t- HTTP 的传输单位则是消息或报文（message）\n\n### OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型\n- ![OSI参考模型](http://p1.meituan.net/myvideodistribute/53145af5e2b1d0846761c3382cce24c5104243.png)\n- **physical layer 物理层**：网络的物理形式，例如电缆、光纤、网卡、集线器等等\n- **data link layer 数据链路层**：基本相当于 TCP/IP 的链接层\n- **network layer 网络层**：相当于 TCP/IP 里的网际层\n- **transport layer 传输层**：相当于 TCP/IP 里的传输层\n- **session layer 会话层**：维护网络中的连接状态，即保持会话和同步\n- **presentation layer 表示层**：把数据转换为合适、可理解的语法和语义\n- **application layer 应用层**：面向具体的应用传输数据\n\n### 两个分层模型的映射关系\n- ![两个分层模型的映射关系](http://p0.meituan.net/myvideodistribute/0042adbffe9810c7913862252fa27662164155.png)\n- 第一层：物理层，TCP/IP 里无对应\n- 第二层：数据链路层，对应 TCP/IP 的链接层\n- 第三层：网络层，对应 TCP/IP 的网际层\n- 第四层：传输层，对应 TCP/IP 的传输层\n- 第五、六、七层：统一对应到 TCP/IP 的应用层\n\t-  TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开\n\n\t\n\n## HTTP - HyperText Transfer Protocol\n- ![HTTP概览图](http://p0.meituan.net/myvideodistribute/0eac1c72dc8c7c0ac87363d73f51b19b30633.png)\n- Protocol\n\t- 协议必须要有两个或多个参与者，也就是“协”\n\t- 协议是对参与者的一种行为约定和规范，也就是“议”，包括语法、语义、同步规则和错误处理\n\t- 总结：**HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。**\n- Transfer\n\t- HTTP 协议是一个“双向协议”\n\t- 数据虽然是在 A 和 B 之间传输，但并没有限制只有 A 和 B 这两个角色，允许中间有“中转”或者“接力”\n\t\t- 传输方式从“A<===>B” 可以变成了 “A<=>X<=>Y<=>Z<=>B”\n\t\t- A 到 B 的传输过程中可以存在任意多个“中间人”，而这些中间人也都遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意的额外功能，例如安全认证、数据压缩、编码转换等等，优化整个传输过程。\n\t- 总结：**HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。**\n- HyperText\n\t- Text\n\t\t- 表示 HTTP 传输的不是 TCP/UDP 这些底层协议里被切分的杂乱无章的二进制包（datagram），而是完整的、有意义的数据，可以被浏览器、服务器这样的上层应用程序处理。\n\t- 超文本：文字、图片、音频和视频等的混合体，最关键的是含有“超链接”，能够从一个“超文本”跳跃到另一个“超文本”，形成复杂的非线性、网状的结构关系。\n- 总结：**HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范**\n\n### HTTP不是？\n- **不存在“单独的实体”**，但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。\n- **HTTP 不是互联网**\n\t- 互联网（Internet）是遍布于全球的许多网络互相连接而形成的一个巨大的国际网络，在它上面存放着各式各样的资源，也对应着各式各样的协议，例如超文本资源使用 HTTP，普通文件使用 FTP，电子邮件使用 SMTP 和 POP3 等。\n- **HTTP 不是编程语言**\n\t- 编程语言是人与计算机沟通交流所使用的语言，而 HTTP 是计算机与计算机沟通交流的语言\n\t- 无法使用 HTTP 来编程，但可以反过来，用编程语言去实现 HTTP，告诉计算机如何用 HTTP 来与外界通信\n- **HTTP 不是用于从互联网服务器传输超文本到本地浏览器的协议**\n\t- 过于片面，HTTP 发生在两点之间，即服务端与客户端，客户端不是只包括本地浏览器，服务器也可以作为客户端，客户端也不仅仅只有浏览器，还可以有 App、小程序，浏览器只能作为客户端\n- **HTTP 不是一个孤立的协议**\n\t- HTTP 通常跑在 TCP/IP 协议栈之上，依靠 IP 协议实现寻址和路由、TCP 协议实现可靠数据传输、DNS 协议实现域名查找、SSL/TLS 协议实现安全通信\n\t- 还有一些协议依赖于 HTTP，例如 WebSocket、HTTPDNS 等\n- 总结：**HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。**\n\n\n## Domain\n### Domain 形式\n- 域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。\n- 本质上还是个名字空间系统\n\n### DNS Domain Name System\n- 就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是“域名解析”。\n- DNS 使用 TCP 和 UDP 端口53\n- DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：\n\t- 根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址\n\t\t- 全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到\n\t- 级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址\n\t- 权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 www.apple.com 的 IP 地址\n\t- ![DNS 三层的树状](http://p0.meituan.net/myvideodistribute/5ac55ff4d8109df28c9afb3fbfc27208625512.png)\n- 所以我们访问 https://ele-peng.github.io/ 就需要进行下面的三次查询\n\t- 访问根域名服务器，它会告诉你 \"io\" 顶级域名服务器的地址\n\t- 访问 \"io\" 顶级域名服务器，它再告诉你 \"github.io\" 域名服务器的地址\n\t- 最后访问 \"github.io\" 域名服务器，就得到了 \"ele-peng.github.io\" 的地址\n- DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存（非权威域名服务器、操作系统缓存和 hosts 文件等手段）用来减轻域名解析的压力，并且能够更快地获取结果，基本思路都是**“缓存”**\n\t- 许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些“野生”服务器被称为“非权威域名服务器”，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址\n\t\t- 这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的“8.8.8.8”，Microsoft 的“4.2.2.1”，还有 CloudFlare 的“1.1.1.1”等等。\n\t- 其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过“ele-peng.github.io”，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址\n\t- 另外，操作系统里还有一个特殊的“主机映射”文件\n- 假如访问 www.不存在.com \n\t- www.不存在.com -> Hosts 文件 -> 操作系统本地缓存 -> 非权威域名服务器查询其缓存 -> 查询根域名、顶级域名、以及域名服务器，当后面的查询得到结果时，将会写入本地缓存\n- 现在的 DNS 架构\n\t- ![现在的 DNS 架构](http://p0.meituan.net/myvideodistribute/3ba7d376ea3f43fcb761deeb78932622389661.png)\n- **使用 DNS 可以实现基于域名的负载均衡，既可以在内网，也可以在外网**\n\n\n\n\n## 写在后面\n- 学而不思则罔 互勉\n- 祝大家多多发财ee","source":"_posts/从URL输入到.md","raw":"---\ntitle: 【未完】从URL输入到...（一）\ndate: 2020-05-12 16:51:50\ntags:\n- 计算机网络\ncategories:\n- 计算机网络\ndescription:\n- 从URL输入到...\n---\n\n\n## 写在前面\n- 嘿嘿嘿 😱\n- 别想歪，我们这个系列要做的是从经典面试题入手\n\t- 从 URL 输入 https://ele-peng.github.io/ 到页面展现到底发生了什么？\n- 简单了解一下计算机网络相关知识。是的，Elle 很惨😭 计算机网络学得稀烂\n\t\n\n<!-- more -->\n\n## 简单过程\n- 你先在浏览器里面输入 https://ele-peng.github.io/ ，这是一个 URL。浏览器只知道名字是“ele-peng.github.io”，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查找。可以使用一般的地址簿协议 DNS 去查找，还可以使用另一种更加精准的地址簿查找协议 HTTPDNS 。\n- 无论用哪一种方法查找，最终都会得到这个地址：52.74.223.119。这个是 IP 地址，是互联网世界的“门牌号”。\n- 知道了目标地址，浏览器就开始打包它的请求。这里会使用HTTPS协议。无论是什么协议，里面都会写明“你要请求什么”。﻿\n- DNS、HTTP、HTTPS 所在的层我们称为**应用层**。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，**通过 socket 编程来实现**。下一层是**传输层**。传输层有两种协议，一种是无连接的协议UDP，一种是面向连接的协议TCP。这里使用 TCP 协议。所谓的面向连接就是，TCP 会保证这个包能够到达目的地。如果不能到达，就会重新发送，直至到达。\n- TCP 协议里面会有两个端口，一个是浏览器监听的端口，一个是 github 的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。\n- 传输层封装完毕后，浏览器会将包交给操作系统的**网络层**。网络层的协议是 IP 协议。在 IP 协议里面会有源 IP 地址，即浏览器所在机器的 IP 地址和目标 IP 地址，也即 github 所在服务器的 IP 地址。\n- 操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然 github 网站不在本地，而在遥远的地方。\n- 操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去网关。而操作系统启动的时候，就会被 DHCP 协议配置 IP 地址，以及默认的网关的 IP 地址 192.168.1.1。\n- 操作系统如何将 IP 地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1 啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是 MAC 地址，而大吼的那一声是 ARP 协议。\n- 于是操作系统将 IP 包交给了下一层，也就是 **MAC 层**。网卡再将包发出去。由于这个包里面是有 MAC 地址的，因而它能够到达网关。\n- 网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个 IP 地址应该怎么走，这个叫作路由表。\n- 路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。\n- 一旦跨越城关，就需要拿出 IP 头来问，目标 IP 地址怎么走？\n- 城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为路由协议，常用的有 OSP F和 BGP 。﻿\n- 城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的 MAC 地址，通过下一个城关的 MAC 地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。\n- 最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。\n- 目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。\n- 在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次查询请求的结果，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。\n- 如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。这个重试绝非你的浏览器重新请求 github 个人主页。对于浏览器来讲，就发送了一次 github 个人主页请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送 github 个人主页请求。\n- 当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到 github 网站的进程正在监听这个端口号，假设一个 Tomcat，将这个包发给 github 网站。﻿\n- github 网站的进程得到 HTTP 请求的内容，知道了要响应啥。往往一个电商网站最初接待请求的这个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理 GitHub 个人主页的进程，要响应啥等等。\n- 如何告诉相关的进程呢？往往通过 RPC 调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理 GitHub 个人主页的进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。\n- 当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知查询成功。这个 HTTPS 的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示个人主页。\n\n## 网络分层模型\n### TCP/IP 协议栈\n- ![TCP/IP 协议栈](http://p0.meituan.net/myvideodistribute/6fea0628affaf34d09b59d845ffeb60a75766.png)\n- **link layer 链接层**：负责在以太网、WiFi 这样的底层网络上发送原始数据包（frame 帧），工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。\n- **internet layer 网际层**：IP 协议就处在这一层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。传输单位是包（packet）\n- **transport layer 传输层**：TCP/UDP 协议工作的层次\n\t- TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。\n\t- TCP 层的传输单位是段（segment）\n- **application layer 应用层**：各种面向具体应用的协议，例如 DHCP、HTTP、HTTPS、RTMP、DNS、P2P、GTP、RPC、Telnet、SSH、FTP、SMTP 等等。\n\t- HTTP 的传输单位则是消息或报文（message）\n\n### OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型\n- ![OSI参考模型](http://p1.meituan.net/myvideodistribute/53145af5e2b1d0846761c3382cce24c5104243.png)\n- **physical layer 物理层**：网络的物理形式，例如电缆、光纤、网卡、集线器等等\n- **data link layer 数据链路层**：基本相当于 TCP/IP 的链接层\n- **network layer 网络层**：相当于 TCP/IP 里的网际层\n- **transport layer 传输层**：相当于 TCP/IP 里的传输层\n- **session layer 会话层**：维护网络中的连接状态，即保持会话和同步\n- **presentation layer 表示层**：把数据转换为合适、可理解的语法和语义\n- **application layer 应用层**：面向具体的应用传输数据\n\n### 两个分层模型的映射关系\n- ![两个分层模型的映射关系](http://p0.meituan.net/myvideodistribute/0042adbffe9810c7913862252fa27662164155.png)\n- 第一层：物理层，TCP/IP 里无对应\n- 第二层：数据链路层，对应 TCP/IP 的链接层\n- 第三层：网络层，对应 TCP/IP 的网际层\n- 第四层：传输层，对应 TCP/IP 的传输层\n- 第五、六、七层：统一对应到 TCP/IP 的应用层\n\t-  TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开\n\n\t\n\n## HTTP - HyperText Transfer Protocol\n- ![HTTP概览图](http://p0.meituan.net/myvideodistribute/0eac1c72dc8c7c0ac87363d73f51b19b30633.png)\n- Protocol\n\t- 协议必须要有两个或多个参与者，也就是“协”\n\t- 协议是对参与者的一种行为约定和规范，也就是“议”，包括语法、语义、同步规则和错误处理\n\t- 总结：**HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。**\n- Transfer\n\t- HTTP 协议是一个“双向协议”\n\t- 数据虽然是在 A 和 B 之间传输，但并没有限制只有 A 和 B 这两个角色，允许中间有“中转”或者“接力”\n\t\t- 传输方式从“A<===>B” 可以变成了 “A<=>X<=>Y<=>Z<=>B”\n\t\t- A 到 B 的传输过程中可以存在任意多个“中间人”，而这些中间人也都遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意的额外功能，例如安全认证、数据压缩、编码转换等等，优化整个传输过程。\n\t- 总结：**HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。**\n- HyperText\n\t- Text\n\t\t- 表示 HTTP 传输的不是 TCP/UDP 这些底层协议里被切分的杂乱无章的二进制包（datagram），而是完整的、有意义的数据，可以被浏览器、服务器这样的上层应用程序处理。\n\t- 超文本：文字、图片、音频和视频等的混合体，最关键的是含有“超链接”，能够从一个“超文本”跳跃到另一个“超文本”，形成复杂的非线性、网状的结构关系。\n- 总结：**HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范**\n\n### HTTP不是？\n- **不存在“单独的实体”**，但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。\n- **HTTP 不是互联网**\n\t- 互联网（Internet）是遍布于全球的许多网络互相连接而形成的一个巨大的国际网络，在它上面存放着各式各样的资源，也对应着各式各样的协议，例如超文本资源使用 HTTP，普通文件使用 FTP，电子邮件使用 SMTP 和 POP3 等。\n- **HTTP 不是编程语言**\n\t- 编程语言是人与计算机沟通交流所使用的语言，而 HTTP 是计算机与计算机沟通交流的语言\n\t- 无法使用 HTTP 来编程，但可以反过来，用编程语言去实现 HTTP，告诉计算机如何用 HTTP 来与外界通信\n- **HTTP 不是用于从互联网服务器传输超文本到本地浏览器的协议**\n\t- 过于片面，HTTP 发生在两点之间，即服务端与客户端，客户端不是只包括本地浏览器，服务器也可以作为客户端，客户端也不仅仅只有浏览器，还可以有 App、小程序，浏览器只能作为客户端\n- **HTTP 不是一个孤立的协议**\n\t- HTTP 通常跑在 TCP/IP 协议栈之上，依靠 IP 协议实现寻址和路由、TCP 协议实现可靠数据传输、DNS 协议实现域名查找、SSL/TLS 协议实现安全通信\n\t- 还有一些协议依赖于 HTTP，例如 WebSocket、HTTPDNS 等\n- 总结：**HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。**\n\n\n## Domain\n### Domain 形式\n- 域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。\n- 本质上还是个名字空间系统\n\n### DNS Domain Name System\n- 就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是“域名解析”。\n- DNS 使用 TCP 和 UDP 端口53\n- DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：\n\t- 根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址\n\t\t- 全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到\n\t- 级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址\n\t- 权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 www.apple.com 的 IP 地址\n\t- ![DNS 三层的树状](http://p0.meituan.net/myvideodistribute/5ac55ff4d8109df28c9afb3fbfc27208625512.png)\n- 所以我们访问 https://ele-peng.github.io/ 就需要进行下面的三次查询\n\t- 访问根域名服务器，它会告诉你 \"io\" 顶级域名服务器的地址\n\t- 访问 \"io\" 顶级域名服务器，它再告诉你 \"github.io\" 域名服务器的地址\n\t- 最后访问 \"github.io\" 域名服务器，就得到了 \"ele-peng.github.io\" 的地址\n- DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存（非权威域名服务器、操作系统缓存和 hosts 文件等手段）用来减轻域名解析的压力，并且能够更快地获取结果，基本思路都是**“缓存”**\n\t- 许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些“野生”服务器被称为“非权威域名服务器”，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址\n\t\t- 这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的“8.8.8.8”，Microsoft 的“4.2.2.1”，还有 CloudFlare 的“1.1.1.1”等等。\n\t- 其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过“ele-peng.github.io”，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址\n\t- 另外，操作系统里还有一个特殊的“主机映射”文件\n- 假如访问 www.不存在.com \n\t- www.不存在.com -> Hosts 文件 -> 操作系统本地缓存 -> 非权威域名服务器查询其缓存 -> 查询根域名、顶级域名、以及域名服务器，当后面的查询得到结果时，将会写入本地缓存\n- 现在的 DNS 架构\n\t- ![现在的 DNS 架构](http://p0.meituan.net/myvideodistribute/3ba7d376ea3f43fcb761deeb78932622389661.png)\n- **使用 DNS 可以实现基于域名的负载均衡，既可以在内网，也可以在外网**\n\n\n\n\n## 写在后面\n- 学而不思则罔 互勉\n- 祝大家多多发财ee","slug":"从URL输入到","published":1,"updated":"2020-05-27T16:17:09.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xf00381wp300pkagxh","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>嘿嘿嘿 😱</li>\n<li>别想歪，我们这个系列要做的是从经典面试题入手<ul>\n<li>从 URL 输入 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> 到页面展现到底发生了什么？</li>\n</ul>\n</li>\n<li>简单了解一下计算机网络相关知识。是的，Elle 很惨😭 计算机网络学得稀烂</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><ul>\n<li>你先在浏览器里面输入 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> ，这是一个 URL。浏览器只知道名字是“ele-peng.github.io”，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查找。可以使用一般的地址簿协议 DNS 去查找，还可以使用另一种更加精准的地址簿查找协议 HTTPDNS 。</li>\n<li>无论用哪一种方法查找，最终都会得到这个地址：52.74.223.119。这个是 IP 地址，是互联网世界的“门牌号”。</li>\n<li>知道了目标地址，浏览器就开始打包它的请求。这里会使用HTTPS协议。无论是什么协议，里面都会写明“你要请求什么”。﻿</li>\n<li>DNS、HTTP、HTTPS 所在的层我们称为<strong>应用层</strong>。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，<strong>通过 socket 编程来实现</strong>。下一层是<strong>传输层</strong>。传输层有两种协议，一种是无连接的协议UDP，一种是面向连接的协议TCP。这里使用 TCP 协议。所谓的面向连接就是，TCP 会保证这个包能够到达目的地。如果不能到达，就会重新发送，直至到达。</li>\n<li>TCP 协议里面会有两个端口，一个是浏览器监听的端口，一个是 github 的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。</li>\n<li>传输层封装完毕后，浏览器会将包交给操作系统的<strong>网络层</strong>。网络层的协议是 IP 协议。在 IP 协议里面会有源 IP 地址，即浏览器所在机器的 IP 地址和目标 IP 地址，也即 github 所在服务器的 IP 地址。</li>\n<li>操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然 github 网站不在本地，而在遥远的地方。</li>\n<li>操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去网关。而操作系统启动的时候，就会被 DHCP 协议配置 IP 地址，以及默认的网关的 IP 地址 192.168.1.1。</li>\n<li>操作系统如何将 IP 地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1 啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是 MAC 地址，而大吼的那一声是 ARP 协议。</li>\n<li>于是操作系统将 IP 包交给了下一层，也就是 <strong>MAC 层</strong>。网卡再将包发出去。由于这个包里面是有 MAC 地址的，因而它能够到达网关。</li>\n<li>网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个 IP 地址应该怎么走，这个叫作路由表。</li>\n<li>路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。</li>\n<li>一旦跨越城关，就需要拿出 IP 头来问，目标 IP 地址怎么走？</li>\n<li>城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为路由协议，常用的有 OSP F和 BGP 。﻿</li>\n<li>城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的 MAC 地址，通过下一个城关的 MAC 地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。</li>\n<li>最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。</li>\n<li>目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。</li>\n<li>在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次查询请求的结果，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。</li>\n<li>如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。这个重试绝非你的浏览器重新请求 github 个人主页。对于浏览器来讲，就发送了一次 github 个人主页请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送 github 个人主页请求。</li>\n<li>当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到 github 网站的进程正在监听这个端口号，假设一个 Tomcat，将这个包发给 github 网站。﻿</li>\n<li>github 网站的进程得到 HTTP 请求的内容，知道了要响应啥。往往一个电商网站最初接待请求的这个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理 GitHub 个人主页的进程，要响应啥等等。</li>\n<li>如何告诉相关的进程呢？往往通过 RPC 调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理 GitHub 个人主页的进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。</li>\n<li>当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知查询成功。这个 HTTPS 的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示个人主页。</li>\n</ul>\n<h2 id=\"网络分层模型\"><a href=\"#网络分层模型\" class=\"headerlink\" title=\"网络分层模型\"></a>网络分层模型</h2><h3 id=\"TCP-IP-协议栈\"><a href=\"#TCP-IP-协议栈\" class=\"headerlink\" title=\"TCP/IP 协议栈\"></a>TCP/IP 协议栈</h3><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6fea0628affaf34d09b59d845ffeb60a75766.png\" alt=\"TCP/IP 协议栈\"></li>\n<li><strong>link layer 链接层</strong>：负责在以太网、WiFi 这样的底层网络上发送原始数据包（frame 帧），工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。</li>\n<li><strong>internet layer 网际层</strong>：IP 协议就处在这一层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。传输单位是包（packet）</li>\n<li><strong>transport layer 传输层</strong>：TCP/UDP 协议工作的层次<ul>\n<li>TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。</li>\n<li>TCP 层的传输单位是段（segment）</li>\n</ul>\n</li>\n<li><strong>application layer 应用层</strong>：各种面向具体应用的协议，例如 DHCP、HTTP、HTTPS、RTMP、DNS、P2P、GTP、RPC、Telnet、SSH、FTP、SMTP 等等。<ul>\n<li>HTTP 的传输单位则是消息或报文（message）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"OSI-Open-System-Interconnection-Reference-Model-开放式系统互联通信参考模型\"><a href=\"#OSI-Open-System-Interconnection-Reference-Model-开放式系统互联通信参考模型\" class=\"headerlink\" title=\"OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型\"></a>OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型</h3><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/53145af5e2b1d0846761c3382cce24c5104243.png\" alt=\"OSI参考模型\"></li>\n<li><strong>physical layer 物理层</strong>：网络的物理形式，例如电缆、光纤、网卡、集线器等等</li>\n<li><strong>data link layer 数据链路层</strong>：基本相当于 TCP/IP 的链接层</li>\n<li><strong>network layer 网络层</strong>：相当于 TCP/IP 里的网际层</li>\n<li><strong>transport layer 传输层</strong>：相当于 TCP/IP 里的传输层</li>\n<li><strong>session layer 会话层</strong>：维护网络中的连接状态，即保持会话和同步</li>\n<li><strong>presentation layer 表示层</strong>：把数据转换为合适、可理解的语法和语义</li>\n<li><strong>application layer 应用层</strong>：面向具体的应用传输数据</li>\n</ul>\n<h3 id=\"两个分层模型的映射关系\"><a href=\"#两个分层模型的映射关系\" class=\"headerlink\" title=\"两个分层模型的映射关系\"></a>两个分层模型的映射关系</h3><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0042adbffe9810c7913862252fa27662164155.png\" alt=\"两个分层模型的映射关系\"></li>\n<li>第一层：物理层，TCP/IP 里无对应</li>\n<li>第二层：数据链路层，对应 TCP/IP 的链接层</li>\n<li>第三层：网络层，对应 TCP/IP 的网际层</li>\n<li>第四层：传输层，对应 TCP/IP 的传输层</li>\n<li>第五、六、七层：统一对应到 TCP/IP 的应用层<ul>\n<li>TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP-HyperText-Transfer-Protocol\"><a href=\"#HTTP-HyperText-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP - HyperText Transfer Protocol\"></a>HTTP - HyperText Transfer Protocol</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0eac1c72dc8c7c0ac87363d73f51b19b30633.png\" alt=\"HTTP概览图\"></li>\n<li>Protocol<ul>\n<li>协议必须要有两个或多个参与者，也就是“协”</li>\n<li>协议是对参与者的一种行为约定和规范，也就是“议”，包括语法、语义、同步规则和错误处理</li>\n<li>总结：<strong>HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</strong></li>\n</ul>\n</li>\n<li>Transfer<ul>\n<li>HTTP 协议是一个“双向协议”</li>\n<li>数据虽然是在 A 和 B 之间传输，但并没有限制只有 A 和 B 这两个角色，允许中间有“中转”或者“接力”<ul>\n<li>传输方式从“A&lt;===&gt;B” 可以变成了 “A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B”</li>\n<li>A 到 B 的传输过程中可以存在任意多个“中间人”，而这些中间人也都遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意的额外功能，例如安全认证、数据压缩、编码转换等等，优化整个传输过程。</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。</strong></li>\n</ul>\n</li>\n<li>HyperText<ul>\n<li>Text<ul>\n<li>表示 HTTP 传输的不是 TCP/UDP 这些底层协议里被切分的杂乱无章的二进制包（datagram），而是完整的、有意义的数据，可以被浏览器、服务器这样的上层应用程序处理。</li>\n</ul>\n</li>\n<li>超文本：文字、图片、音频和视频等的混合体，最关键的是含有“超链接”，能够从一个“超文本”跳跃到另一个“超文本”，形成复杂的非线性、网状的结构关系。</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</strong></li>\n</ul>\n<h3 id=\"HTTP不是？\"><a href=\"#HTTP不是？\" class=\"headerlink\" title=\"HTTP不是？\"></a>HTTP不是？</h3><ul>\n<li><strong>不存在“单独的实体”</strong>，但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。</li>\n<li><strong>HTTP 不是互联网</strong><ul>\n<li>互联网（Internet）是遍布于全球的许多网络互相连接而形成的一个巨大的国际网络，在它上面存放着各式各样的资源，也对应着各式各样的协议，例如超文本资源使用 HTTP，普通文件使用 FTP，电子邮件使用 SMTP 和 POP3 等。</li>\n</ul>\n</li>\n<li><strong>HTTP 不是编程语言</strong><ul>\n<li>编程语言是人与计算机沟通交流所使用的语言，而 HTTP 是计算机与计算机沟通交流的语言</li>\n<li>无法使用 HTTP 来编程，但可以反过来，用编程语言去实现 HTTP，告诉计算机如何用 HTTP 来与外界通信</li>\n</ul>\n</li>\n<li><strong>HTTP 不是用于从互联网服务器传输超文本到本地浏览器的协议</strong><ul>\n<li>过于片面，HTTP 发生在两点之间，即服务端与客户端，客户端不是只包括本地浏览器，服务器也可以作为客户端，客户端也不仅仅只有浏览器，还可以有 App、小程序，浏览器只能作为客户端</li>\n</ul>\n</li>\n<li><strong>HTTP 不是一个孤立的协议</strong><ul>\n<li>HTTP 通常跑在 TCP/IP 协议栈之上，依靠 IP 协议实现寻址和路由、TCP 协议实现可靠数据传输、DNS 协议实现域名查找、SSL/TLS 协议实现安全通信</li>\n<li>还有一些协议依赖于 HTTP，例如 WebSocket、HTTPDNS 等</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。</strong></li>\n</ul>\n<h2 id=\"Domain\"><a href=\"#Domain\" class=\"headerlink\" title=\"Domain\"></a>Domain</h2><h3 id=\"Domain-形式\"><a href=\"#Domain-形式\" class=\"headerlink\" title=\"Domain 形式\"></a>Domain 形式</h3><ul>\n<li>域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。</li>\n<li>本质上还是个名字空间系统</li>\n</ul>\n<h3 id=\"DNS-Domain-Name-System\"><a href=\"#DNS-Domain-Name-System\" class=\"headerlink\" title=\"DNS Domain Name System\"></a>DNS Domain Name System</h3><ul>\n<li>就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是“域名解析”。</li>\n<li>DNS 使用 TCP 和 UDP 端口53</li>\n<li>DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：<ul>\n<li>根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址<ul>\n<li>全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到</li>\n</ul>\n</li>\n<li>级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址</li>\n<li>权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 <a href=\"http://www.apple.com\" target=\"_blank\" rel=\"noopener\">www.apple.com</a> 的 IP 地址</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5ac55ff4d8109df28c9afb3fbfc27208625512.png\" alt=\"DNS 三层的树状\"></li>\n</ul>\n</li>\n<li>所以我们访问 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> 就需要进行下面的三次查询<ul>\n<li>访问根域名服务器，它会告诉你 “io” 顶级域名服务器的地址</li>\n<li>访问 “io” 顶级域名服务器，它再告诉你 “github.io” 域名服务器的地址</li>\n<li>最后访问 “github.io” 域名服务器，就得到了 “ele-peng.github.io” 的地址</li>\n</ul>\n</li>\n<li>DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存（非权威域名服务器、操作系统缓存和 hosts 文件等手段）用来减轻域名解析的压力，并且能够更快地获取结果，基本思路都是<strong>“缓存”</strong><ul>\n<li>许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些“野生”服务器被称为“非权威域名服务器”，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址<ul>\n<li>这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的“8.8.8.8”，Microsoft 的“4.2.2.1”，还有 CloudFlare 的“1.1.1.1”等等。</li>\n</ul>\n</li>\n<li>其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过“ele-peng.github.io”，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址</li>\n<li>另外，操作系统里还有一个特殊的“主机映射”文件</li>\n</ul>\n</li>\n<li>假如访问 www.不存在.com <ul>\n<li>www.不存在.com -&gt; Hosts 文件 -&gt; 操作系统本地缓存 -&gt; 非权威域名服务器查询其缓存 -&gt; 查询根域名、顶级域名、以及域名服务器，当后面的查询得到结果时，将会写入本地缓存</li>\n</ul>\n</li>\n<li>现在的 DNS 架构<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ba7d376ea3f43fcb761deeb78932622389661.png\" alt=\"现在的 DNS 架构\"></li>\n</ul>\n</li>\n<li><strong>使用 DNS 可以实现基于域名的负载均衡，既可以在内网，也可以在外网</strong></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>学而不思则罔 互勉</li>\n<li>祝大家多多发财ee</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>嘿嘿嘿 😱</li>\n<li>别想歪，我们这个系列要做的是从经典面试题入手<ul>\n<li>从 URL 输入 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> 到页面展现到底发生了什么？</li>\n</ul>\n</li>\n<li>简单了解一下计算机网络相关知识。是的，Elle 很惨😭 计算机网络学得稀烂</li>\n</ul>","more":"<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><ul>\n<li>你先在浏览器里面输入 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> ，这是一个 URL。浏览器只知道名字是“ele-peng.github.io”，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查找。可以使用一般的地址簿协议 DNS 去查找，还可以使用另一种更加精准的地址簿查找协议 HTTPDNS 。</li>\n<li>无论用哪一种方法查找，最终都会得到这个地址：52.74.223.119。这个是 IP 地址，是互联网世界的“门牌号”。</li>\n<li>知道了目标地址，浏览器就开始打包它的请求。这里会使用HTTPS协议。无论是什么协议，里面都会写明“你要请求什么”。﻿</li>\n<li>DNS、HTTP、HTTPS 所在的层我们称为<strong>应用层</strong>。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，<strong>通过 socket 编程来实现</strong>。下一层是<strong>传输层</strong>。传输层有两种协议，一种是无连接的协议UDP，一种是面向连接的协议TCP。这里使用 TCP 协议。所谓的面向连接就是，TCP 会保证这个包能够到达目的地。如果不能到达，就会重新发送，直至到达。</li>\n<li>TCP 协议里面会有两个端口，一个是浏览器监听的端口，一个是 github 的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。</li>\n<li>传输层封装完毕后，浏览器会将包交给操作系统的<strong>网络层</strong>。网络层的协议是 IP 协议。在 IP 协议里面会有源 IP 地址，即浏览器所在机器的 IP 地址和目标 IP 地址，也即 github 所在服务器的 IP 地址。</li>\n<li>操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然 github 网站不在本地，而在遥远的地方。</li>\n<li>操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去网关。而操作系统启动的时候，就会被 DHCP 协议配置 IP 地址，以及默认的网关的 IP 地址 192.168.1.1。</li>\n<li>操作系统如何将 IP 地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1 啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是 MAC 地址，而大吼的那一声是 ARP 协议。</li>\n<li>于是操作系统将 IP 包交给了下一层，也就是 <strong>MAC 层</strong>。网卡再将包发出去。由于这个包里面是有 MAC 地址的，因而它能够到达网关。</li>\n<li>网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个 IP 地址应该怎么走，这个叫作路由表。</li>\n<li>路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。</li>\n<li>一旦跨越城关，就需要拿出 IP 头来问，目标 IP 地址怎么走？</li>\n<li>城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为路由协议，常用的有 OSP F和 BGP 。﻿</li>\n<li>城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的 MAC 地址，通过下一个城关的 MAC 地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。</li>\n<li>最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。</li>\n<li>目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。</li>\n<li>在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次查询请求的结果，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。</li>\n<li>如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。这个重试绝非你的浏览器重新请求 github 个人主页。对于浏览器来讲，就发送了一次 github 个人主页请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送 github 个人主页请求。</li>\n<li>当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到 github 网站的进程正在监听这个端口号，假设一个 Tomcat，将这个包发给 github 网站。﻿</li>\n<li>github 网站的进程得到 HTTP 请求的内容，知道了要响应啥。往往一个电商网站最初接待请求的这个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理 GitHub 个人主页的进程，要响应啥等等。</li>\n<li>如何告诉相关的进程呢？往往通过 RPC 调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理 GitHub 个人主页的进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。</li>\n<li>当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知查询成功。这个 HTTPS 的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示个人主页。</li>\n</ul>\n<h2 id=\"网络分层模型\"><a href=\"#网络分层模型\" class=\"headerlink\" title=\"网络分层模型\"></a>网络分层模型</h2><h3 id=\"TCP-IP-协议栈\"><a href=\"#TCP-IP-协议栈\" class=\"headerlink\" title=\"TCP/IP 协议栈\"></a>TCP/IP 协议栈</h3><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/6fea0628affaf34d09b59d845ffeb60a75766.png\" alt=\"TCP/IP 协议栈\"></li>\n<li><strong>link layer 链接层</strong>：负责在以太网、WiFi 这样的底层网络上发送原始数据包（frame 帧），工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。</li>\n<li><strong>internet layer 网际层</strong>：IP 协议就处在这一层。因为 IP 协议定义了“IP 地址”的概念，所以就可以在“链接层”的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。传输单位是包（packet）</li>\n<li><strong>transport layer 传输层</strong>：TCP/UDP 协议工作的层次<ul>\n<li>TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。</li>\n<li>TCP 层的传输单位是段（segment）</li>\n</ul>\n</li>\n<li><strong>application layer 应用层</strong>：各种面向具体应用的协议，例如 DHCP、HTTP、HTTPS、RTMP、DNS、P2P、GTP、RPC、Telnet、SSH、FTP、SMTP 等等。<ul>\n<li>HTTP 的传输单位则是消息或报文（message）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"OSI-Open-System-Interconnection-Reference-Model-开放式系统互联通信参考模型\"><a href=\"#OSI-Open-System-Interconnection-Reference-Model-开放式系统互联通信参考模型\" class=\"headerlink\" title=\"OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型\"></a>OSI (Open System Interconnection Reference Model) 开放式系统互联通信参考模型</h3><ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/53145af5e2b1d0846761c3382cce24c5104243.png\" alt=\"OSI参考模型\"></li>\n<li><strong>physical layer 物理层</strong>：网络的物理形式，例如电缆、光纤、网卡、集线器等等</li>\n<li><strong>data link layer 数据链路层</strong>：基本相当于 TCP/IP 的链接层</li>\n<li><strong>network layer 网络层</strong>：相当于 TCP/IP 里的网际层</li>\n<li><strong>transport layer 传输层</strong>：相当于 TCP/IP 里的传输层</li>\n<li><strong>session layer 会话层</strong>：维护网络中的连接状态，即保持会话和同步</li>\n<li><strong>presentation layer 表示层</strong>：把数据转换为合适、可理解的语法和语义</li>\n<li><strong>application layer 应用层</strong>：面向具体的应用传输数据</li>\n</ul>\n<h3 id=\"两个分层模型的映射关系\"><a href=\"#两个分层模型的映射关系\" class=\"headerlink\" title=\"两个分层模型的映射关系\"></a>两个分层模型的映射关系</h3><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0042adbffe9810c7913862252fa27662164155.png\" alt=\"两个分层模型的映射关系\"></li>\n<li>第一层：物理层，TCP/IP 里无对应</li>\n<li>第二层：数据链路层，对应 TCP/IP 的链接层</li>\n<li>第三层：网络层，对应 TCP/IP 的网际层</li>\n<li>第四层：传输层，对应 TCP/IP 的传输层</li>\n<li>第五、六、七层：统一对应到 TCP/IP 的应用层<ul>\n<li>TCP/IP 实际应用时的会话管理、编码转换、压缩等和具体应用经常联系的很紧密，很难分开</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP-HyperText-Transfer-Protocol\"><a href=\"#HTTP-HyperText-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP - HyperText Transfer Protocol\"></a>HTTP - HyperText Transfer Protocol</h2><ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/0eac1c72dc8c7c0ac87363d73f51b19b30633.png\" alt=\"HTTP概览图\"></li>\n<li>Protocol<ul>\n<li>协议必须要有两个或多个参与者，也就是“协”</li>\n<li>协议是对参与者的一种行为约定和规范，也就是“议”，包括语法、语义、同步规则和错误处理</li>\n<li>总结：<strong>HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</strong></li>\n</ul>\n</li>\n<li>Transfer<ul>\n<li>HTTP 协议是一个“双向协议”</li>\n<li>数据虽然是在 A 和 B 之间传输，但并没有限制只有 A 和 B 这两个角色，允许中间有“中转”或者“接力”<ul>\n<li>传输方式从“A&lt;===&gt;B” 可以变成了 “A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B”</li>\n<li>A 到 B 的传输过程中可以存在任意多个“中间人”，而这些中间人也都遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意的额外功能，例如安全认证、数据压缩、编码转换等等，优化整个传输过程。</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。</strong></li>\n</ul>\n</li>\n<li>HyperText<ul>\n<li>Text<ul>\n<li>表示 HTTP 传输的不是 TCP/UDP 这些底层协议里被切分的杂乱无章的二进制包（datagram），而是完整的、有意义的数据，可以被浏览器、服务器这样的上层应用程序处理。</li>\n</ul>\n</li>\n<li>超文本：文字、图片、音频和视频等的混合体，最关键的是含有“超链接”，能够从一个“超文本”跳跃到另一个“超文本”，形成复杂的非线性、网状的结构关系。</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</strong></li>\n</ul>\n<h3 id=\"HTTP不是？\"><a href=\"#HTTP不是？\" class=\"headerlink\" title=\"HTTP不是？\"></a>HTTP不是？</h3><ul>\n<li><strong>不存在“单独的实体”</strong>，但 HTTP 又与应用程序、操作系统、Web 服务器密切相关，在它们之间的通信过程中存在，而且是一种“动态的存在”，是发生在网络连接、传输超文本数据时的一个“动态过程”。</li>\n<li><strong>HTTP 不是互联网</strong><ul>\n<li>互联网（Internet）是遍布于全球的许多网络互相连接而形成的一个巨大的国际网络，在它上面存放着各式各样的资源，也对应着各式各样的协议，例如超文本资源使用 HTTP，普通文件使用 FTP，电子邮件使用 SMTP 和 POP3 等。</li>\n</ul>\n</li>\n<li><strong>HTTP 不是编程语言</strong><ul>\n<li>编程语言是人与计算机沟通交流所使用的语言，而 HTTP 是计算机与计算机沟通交流的语言</li>\n<li>无法使用 HTTP 来编程，但可以反过来，用编程语言去实现 HTTP，告诉计算机如何用 HTTP 来与外界通信</li>\n</ul>\n</li>\n<li><strong>HTTP 不是用于从互联网服务器传输超文本到本地浏览器的协议</strong><ul>\n<li>过于片面，HTTP 发生在两点之间，即服务端与客户端，客户端不是只包括本地浏览器，服务器也可以作为客户端，客户端也不仅仅只有浏览器，还可以有 App、小程序，浏览器只能作为客户端</li>\n</ul>\n</li>\n<li><strong>HTTP 不是一个孤立的协议</strong><ul>\n<li>HTTP 通常跑在 TCP/IP 协议栈之上，依靠 IP 协议实现寻址和路由、TCP 协议实现可靠数据传输、DNS 协议实现域名查找、SSL/TLS 协议实现安全通信</li>\n<li>还有一些协议依赖于 HTTP，例如 WebSocket、HTTPDNS 等</li>\n</ul>\n</li>\n<li>总结：<strong>HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。</strong></li>\n</ul>\n<h2 id=\"Domain\"><a href=\"#Domain\" class=\"headerlink\" title=\"Domain\"></a>Domain</h2><h3 id=\"Domain-形式\"><a href=\"#Domain-形式\" class=\"headerlink\" title=\"Domain 形式\"></a>Domain 形式</h3><ul>\n<li>域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。</li>\n<li>本质上还是个名字空间系统</li>\n</ul>\n<h3 id=\"DNS-Domain-Name-System\"><a href=\"#DNS-Domain-Name-System\" class=\"headerlink\" title=\"DNS Domain Name System\"></a>DNS Domain Name System</h3><ul>\n<li>就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是“域名解析”。</li>\n<li>DNS 使用 TCP 和 UDP 端口53</li>\n<li>DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：<ul>\n<li>根域名服务器（Root DNS Server）：管理顶级域名服务器，返回“com”“net”“cn”等顶级域名服务器的 IP 地址<ul>\n<li>全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到</li>\n</ul>\n</li>\n<li>级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址</li>\n<li>权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 <a href=\"http://www.apple.com\" target=\"_blank\" rel=\"noopener\">www.apple.com</a> 的 IP 地址</li>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5ac55ff4d8109df28c9afb3fbfc27208625512.png\" alt=\"DNS 三层的树状\"></li>\n</ul>\n</li>\n<li>所以我们访问 <a href=\"https://ele-peng.github.io/\" target=\"_blank\" rel=\"noopener\">https://ele-peng.github.io/</a> 就需要进行下面的三次查询<ul>\n<li>访问根域名服务器，它会告诉你 “io” 顶级域名服务器的地址</li>\n<li>访问 “io” 顶级域名服务器，它再告诉你 “github.io” 域名服务器的地址</li>\n<li>最后访问 “github.io” 域名服务器，就得到了 “ele-peng.github.io” 的地址</li>\n</ul>\n</li>\n<li>DNS 是一个树状的分布式查询系统，为了提高查询效率，外围有多级的缓存（非权威域名服务器、操作系统缓存和 hosts 文件等手段）用来减轻域名解析的压力，并且能够更快地获取结果，基本思路都是<strong>“缓存”</strong><ul>\n<li>许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些“野生”服务器被称为“非权威域名服务器”，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址<ul>\n<li>这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的“8.8.8.8”，Microsoft 的“4.2.2.1”，还有 CloudFlare 的“1.1.1.1”等等。</li>\n</ul>\n</li>\n<li>其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过“ele-peng.github.io”，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址</li>\n<li>另外，操作系统里还有一个特殊的“主机映射”文件</li>\n</ul>\n</li>\n<li>假如访问 www.不存在.com <ul>\n<li>www.不存在.com -&gt; Hosts 文件 -&gt; 操作系统本地缓存 -&gt; 非权威域名服务器查询其缓存 -&gt; 查询根域名、顶级域名、以及域名服务器，当后面的查询得到结果时，将会写入本地缓存</li>\n</ul>\n</li>\n<li>现在的 DNS 架构<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ba7d376ea3f43fcb761deeb78932622389661.png\" alt=\"现在的 DNS 架构\"></li>\n</ul>\n</li>\n<li><strong>使用 DNS 可以实现基于域名的负载均衡，既可以在内网，也可以在外网</strong></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>学而不思则罔 互勉</li>\n<li>祝大家多多发财ee</li>\n</ul>"},{"title":"Toy-Browser-DAY2","date":"2020-05-15T14:21:46.000Z","description":["浏览器 -- toy-browser"],"_content":"\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- DAY1，我们已经完成 HTTP相关解析，现在我们可以写 HTML 的解析啦，开不开心！😝\n- ![HTML 的解析](http://p1.meituan.net/myvideodistribute/6e1d35dcd8c01b557925f8d799583cb1130452.png)\n\n<!-- more -->\n\n\n\n## 实践过程\n\n### 第一步：拆分文件\n- 为了方便文件管理，我们把parse单独拆到文件中\n- parser 接受 HTML 文本作为参数，返回一颗 DOM 树\n\n\n- server.js\n\n\t```javascript\n\tconst server = http.createServer((req, res) => {\n\t\n\t  ... some code \n\t  \n\t  res.end(\n\t    `<html maaa=a >\n\t    <head>\n\t        <style>\n\t    body div #myid{\n\t        width:100px;\n\t        background-color: #ff5000;\n\t    }\n\t    body div img{\n\t        width:30px;\n\t        background-color: #ff1111;\n\t    }\n\t        </style>\n\t    </head>\n\t    <body>\n\t        <div>\n\t            <img id=\"myid\"/>\n\t            <img />\n\t        </div>\n\t    </body>\n\t    </html>`);\n\t});\n\t\n\tserver.listen(8088);\n\t```\n- client.js\n\t\n\t```javascript\n\t... some code\n\t\n\tvoid async function () {\n\t\n\t  ... some code\n\t  \n\t  let dom = parser.parseHTML(response.body)\n\t  \n\t}()\n\t```\n\n- parseHTML1.js\n\n\n\t```javascript\n\t// 拆分文件\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  console.log(html)\n\t  \n\t}\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/98a64e9c9eb9f97c01b0bb4ccb0141f976175.png)\n\t\n### 第二步：创建状态机\n- 我们用 FSM 来实现 HTML 的分析\n- 在 HTML 标准中，已经规定了 HTML 的状态\n- Toy-Browser 只挑选其中的一部分状态，完成一个最简版本\n\n\n- parseHTML2.js\n\n\t```javascript\n\t// 初始化 FSM - Finite State Machine\n\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(c)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n### 第三步：解析标签\n- 主要的标签有：开始标签，结束标签和自封闭标签\n- 在这一步我们暂时忽略属性\n\n- 【未完：状态图分析】\n- parseHTML3.js\n\n\t```javascript\n\t// 解析标签\n\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    return tagName(char)\n\t  } else {\n\t    return \n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t\n\t  } else if(char == EOF) {\n\t\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\") {\n\t    return data\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeName\n\t  } else {\n\t    return beforeAttributeName\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\") {\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t\n\t  } else {\n\t\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n### 第四步：创建元素\n- 在状态中，除了状态迁移，我们还会要加入业务逻辑\n- 我们在标签结束状态提交标签 token\n- parseHTML4.js\n\n\t```javascript\n\t// emitToken 创建元素\n\n\tlet currentToken = null\n\t\n\tfunction emit(token) {\n\t  if (token.type != \"text\") \n\t    console.log(token)\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    return \n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t\n\t  } else if(char == EOF) {\n\t\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\") {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else if (char == \"=\") {\n\t    return data\n\t  } else {\n\t    return beforeAttributeName\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    currentToken.type = \"selfClosingTag\"\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t\n\t  } else {\n\t\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n- 运行结果\n\t- ![第四步运行结果](http://p0.meituan.net/myvideodistribute/5c4078e02702211bbe87ca75d2044cdb106832.png)\n\n\t\n### 第五步：处理属性\n- 属性分为单引号、双引号、无引号三种写法，因此需要较多状态处理\n- 处理属性的方式跟标签类似\n- 属性结束时，我们把属性加到标签 token 上\n\n- parseHTML5.js\n\n\t```javascript\n\t// 处理属性 attribute\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\t\n\tfunction emit(token) {\n\t  if (token.type != \"text\") \n\t    console.log(token)\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    currentToken.type = \"selfClosingTag\"\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t    // console.log(state)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\n- 运行结果\n\t- ![第五步运行结果](http://p0.meituan.net/myvideodistribute/3b45aac402868fe1c62c7d7debbcfd24114412.png)\n\n\t\n### 第六步：构建 DOM 树\n- 从标签创建 DOM 树的基本技巧是使用栈\n- 遇到开始标签时创建元素并入栈，遇到结束标签时出栈\n- 自封闭节点可视为入栈后立刻出栈\n- 任何元素的父元素是它入栈前的栈顶\n- parseHTML6.js\n\n\t```javascript\n\t// 处理属性 constructTree\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\t\n\tlet stack = [{type: \"document\", children: []}]\n\t\n\tfunction emit(token) {\n\t  if (token.type == \"text\") \n\t    return\n\t\n\t  let top = stack[stack.length - 1]\n\t\n\t\n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t\n\t    console.log('push', element)\n\t\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      console.log('pop', stack.pop())\n\t    }\n\t  }\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t    // console.log(state)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t  console.log(stack)\n\t}\n\t```\n\t\n- 运行结果：这边我在每次对栈操作时(push/pop)时，添加了 console\n\t- ![第六步运行结果](http://p1.meituan.net/myvideodistribute/f83a95f5afec8c5ad34c8df0a34a6ff8116344.png)\n- 这边推荐使用 [vs-code debugger 使用方法](https://code.visualstudio.com/docs/editor/debugging)\n\t- ![第六步运行结果 vscode debugger](http://p0.meituan.net/myvideodistribute/7a4cb0d87ac89cb3a5ae4252c3a5d6a7321211.png)\n\n\n### 第七步：文本节点\n- 文本节点与自封闭标签处理类似\n- 多个文本节点需要合并\n\n- parseHTML7.js\n\n\t```javascript\n\t// 处理文本节点 combineText\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\tlet currentTextNode = null\n\t\n\tlet stack = [{type: \"document\", children: []}]\n\t\n\tfunction emit(token) {\n\t\n\t  let top = stack[stack.length - 1]\n\t\n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t    \n\t    currentTextNode = null\n\t    // console.log('push', element)\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  } else if (token.type == \"text\") {\n\t    if (currentTextNode == null) {\n\t      currentTextNode = {\n\t        type: \"text\",\n\t        content: \"\"\n\t      }\n\t      top.children.push(currentTextNode)\n\t    }\n\t    currentTextNode.content += token.content\n\t    // console.log(top.children)\n\t  }\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\n- 运行结果\n\t- ![第六步运行结果 vscode debugger](http://p0.meituan.net/myvideodistribute/1d00a3a9aa02bd2ff5eb52805c38768b345257.png)\n\n\n\n## 参考文献\n- [HTML standard docs](https://html.spec.whatwg.org/multipage/)\n- [VSCODE debugger](https://code.visualstudio.com/docs/editor/debugging)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 学而不思则罔 互勉\n- 祝大家多多发财","source":"_posts/Toy-Browser-DAY2.md","raw":"---\ntitle: Toy-Browser-DAY2\ndate: 2020-05-15 22:21:46\ntags:\n- 浏览器\ncategories:\n- 浏览器\ndescription:\n- 浏览器 -- toy-browser\n---\n\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n## 写在前面\n- implementation of a toy-browser 🙆\n- DAY1，我们已经完成 HTTP相关解析，现在我们可以写 HTML 的解析啦，开不开心！😝\n- ![HTML 的解析](http://p1.meituan.net/myvideodistribute/6e1d35dcd8c01b557925f8d799583cb1130452.png)\n\n<!-- more -->\n\n\n\n## 实践过程\n\n### 第一步：拆分文件\n- 为了方便文件管理，我们把parse单独拆到文件中\n- parser 接受 HTML 文本作为参数，返回一颗 DOM 树\n\n\n- server.js\n\n\t```javascript\n\tconst server = http.createServer((req, res) => {\n\t\n\t  ... some code \n\t  \n\t  res.end(\n\t    `<html maaa=a >\n\t    <head>\n\t        <style>\n\t    body div #myid{\n\t        width:100px;\n\t        background-color: #ff5000;\n\t    }\n\t    body div img{\n\t        width:30px;\n\t        background-color: #ff1111;\n\t    }\n\t        </style>\n\t    </head>\n\t    <body>\n\t        <div>\n\t            <img id=\"myid\"/>\n\t            <img />\n\t        </div>\n\t    </body>\n\t    </html>`);\n\t});\n\t\n\tserver.listen(8088);\n\t```\n- client.js\n\t\n\t```javascript\n\t... some code\n\t\n\tvoid async function () {\n\t\n\t  ... some code\n\t  \n\t  let dom = parser.parseHTML(response.body)\n\t  \n\t}()\n\t```\n\n- parseHTML1.js\n\n\n\t```javascript\n\t// 拆分文件\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  console.log(html)\n\t  \n\t}\n\t```\n\t\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/98a64e9c9eb9f97c01b0bb4ccb0141f976175.png)\n\t\n### 第二步：创建状态机\n- 我们用 FSM 来实现 HTML 的分析\n- 在 HTML 标准中，已经规定了 HTML 的状态\n- Toy-Browser 只挑选其中的一部分状态，完成一个最简版本\n\n\n- parseHTML2.js\n\n\t```javascript\n\t// 初始化 FSM - Finite State Machine\n\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(c)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n### 第三步：解析标签\n- 主要的标签有：开始标签，结束标签和自封闭标签\n- 在这一步我们暂时忽略属性\n\n- 【未完：状态图分析】\n- parseHTML3.js\n\n\t```javascript\n\t// 解析标签\n\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    return tagName(char)\n\t  } else {\n\t    return \n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t\n\t  } else if(char == EOF) {\n\t\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\") {\n\t    return data\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeName\n\t  } else {\n\t    return beforeAttributeName\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\") {\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t\n\t  } else {\n\t\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n### 第四步：创建元素\n- 在状态中，除了状态迁移，我们还会要加入业务逻辑\n- 我们在标签结束状态提交标签 token\n- parseHTML4.js\n\n\t```javascript\n\t// emitToken 创建元素\n\n\tlet currentToken = null\n\t\n\tfunction emit(token) {\n\t  if (token.type != \"text\") \n\t    console.log(token)\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    return \n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t\n\t  } else if(char == EOF) {\n\t\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\") {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else if (char == \"=\") {\n\t    return data\n\t  } else {\n\t    return beforeAttributeName\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    currentToken.type = \"selfClosingTag\"\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t\n\t  } else {\n\t\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\t\n- 运行结果\n\t- ![第四步运行结果](http://p0.meituan.net/myvideodistribute/5c4078e02702211bbe87ca75d2044cdb106832.png)\n\n\t\n### 第五步：处理属性\n- 属性分为单引号、双引号、无引号三种写法，因此需要较多状态处理\n- 处理属性的方式跟标签类似\n- 属性结束时，我们把属性加到标签 token 上\n\n- parseHTML5.js\n\n\t```javascript\n\t// 处理属性 attribute\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\t\n\tfunction emit(token) {\n\t  if (token.type != \"text\") \n\t    console.log(token)\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    currentToken.type = \"selfClosingTag\"\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t    // console.log(state)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\n- 运行结果\n\t- ![第五步运行结果](http://p0.meituan.net/myvideodistribute/3b45aac402868fe1c62c7d7debbcfd24114412.png)\n\n\t\n### 第六步：构建 DOM 树\n- 从标签创建 DOM 树的基本技巧是使用栈\n- 遇到开始标签时创建元素并入栈，遇到结束标签时出栈\n- 自封闭节点可视为入栈后立刻出栈\n- 任何元素的父元素是它入栈前的栈顶\n- parseHTML6.js\n\n\t```javascript\n\t// 处理属性 constructTree\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\t\n\tlet stack = [{type: \"document\", children: []}]\n\t\n\tfunction emit(token) {\n\t  if (token.type == \"text\") \n\t    return\n\t\n\t  let top = stack[stack.length - 1]\n\t\n\t\n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t\n\t    console.log('push', element)\n\t\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      console.log('pop', stack.pop())\n\t    }\n\t  }\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t    // console.log(state)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t  console.log(stack)\n\t}\n\t```\n\t\n- 运行结果：这边我在每次对栈操作时(push/pop)时，添加了 console\n\t- ![第六步运行结果](http://p1.meituan.net/myvideodistribute/f83a95f5afec8c5ad34c8df0a34a6ff8116344.png)\n- 这边推荐使用 [vs-code debugger 使用方法](https://code.visualstudio.com/docs/editor/debugging)\n\t- ![第六步运行结果 vscode debugger](http://p0.meituan.net/myvideodistribute/7a4cb0d87ac89cb3a5ae4252c3a5d6a7321211.png)\n\n\n### 第七步：文本节点\n- 文本节点与自封闭标签处理类似\n- 多个文本节点需要合并\n\n- parseHTML7.js\n\n\t```javascript\n\t// 处理文本节点 combineText\n\n\tlet currentToken = null\n\tlet currentAttribute = null\n\tlet currentTextNode = null\n\t\n\tlet stack = [{type: \"document\", children: []}]\n\t\n\tfunction emit(token) {\n\t\n\t  let top = stack[stack.length - 1]\n\t\n\t  if (token.type == \"startTag\") {\n\t    let element = {\n\t      type: \"element\",\n\t      children: [],\n\t      attributes: []\n\t    }\n\t\n\t    element.tagName = token.tagName\n\t\n\t    for (let p in token) {\n\t      if (p != \"type\" && p != \"tagName\") {\n\t        element.attributes.push({\n\t          name: p,\n\t          value: token[p]\n\t        })\n\t      }\n\t    }\n\t\n\t    top.children.push(element)\n\t    element.parent = top\n\t\n\t    if (!token.isSelfClosing)\n\t      stack.push(element)\n\t    \n\t    currentTextNode = null\n\t    // console.log('push', element)\n\t  } else if (token.type == \"endTag\") {\n\t    if (top.tagName != token.tagName) {\n\t      throw new Error(\"Tag start end doesn't match\")\n\t    } else {\n\t      // console.log('pop', stack.pop())\n\t      stack.pop()\n\t    }\n\t    currentTextNode = null\n\t  } else if (token.type == \"text\") {\n\t    if (currentTextNode == null) {\n\t      currentTextNode = {\n\t        type: \"text\",\n\t        content: \"\"\n\t      }\n\t      top.children.push(currentTextNode)\n\t    }\n\t    currentTextNode.content += token.content\n\t    // console.log(top.children)\n\t  }\n\t}\n\t\n\tconst EOF = Symbol(\"EOF\")\n\t\n\tfunction data(char) {\n\t  if (char == \"<\") {\n\t    return tagOpen\n\t  } else if (char == EOF) {\n\t    emit({\n\t      type: \"EOF\"\n\t    })\n\t    return \n\t  } else {\n\t    emit({\n\t      type: \"text\",\n\t      content: char\n\t    })\n\t    return data\n\t  }\n\t}\n\t\n\t\n\t// 1. 开始标签\n\t// 2. 结束标签\n\t// 3. 自封闭标签\n\tfunction tagOpen(char) {\n\t  if (char == \"/\") { // 结束标签\n\t    return endTagOpen\n\t  } else if (char.match(/^[a-zA-Z]$/)) { // 开始标签\n\t    currentToken = {\n\t      type: \"startTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction endTagOpen(char) {\n\t  if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken = {\n\t      type: \"endTag\",\n\t      tagName: \"\"\n\t    }\n\t    return tagName(char)\n\t  } else if (char == \">\") {\n\t    // return data\n\t  } else if(char == EOF) {\n\t    // return data\n\t  }\n\t}\n\t\n\t\n\tfunction tagName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName(char)\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char.match(/^[a-zA-Z]$/)) {\n\t    currentToken.tagName += char.toLowerCase()\n\t    return tagName\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    return data\n\t  } else {\n\t    return tagName\n\t  }\n\t}\n\t\n\t\n\tfunction beforeAttributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \">\" || char == \"/\" || char == EOF) {\n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return \n\t  } else {\n\t    currentAttribute = {\n\t      name: \"\",\n\t      value: \"\"\n\t    }\n\t    return attributeName(char)\n\t  }\n\t}\n\t\n\tfunction afterAttributeName(char) {\n\t  if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char == EOF) {\n\t    return \n\t  } else {\n\t    emit(currentToken)\n\t    return data\n\t  }\n\t}\n\t\n\tfunction attributeName(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return afterAttributeName(char)\n\t  } else if (char == \"=\") {\n\t    return beforeAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\") {\n\t    return attributeName\n\t  } else {\n\t    currentAttribute.name += char\n\t    return attributeName\n\t  }\n\t}\n\t\n\tfunction beforeAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/) || char == \"/\" || char == \">\" || char == EOF) { \n\t    return beforeAttributeValue\n\t  } else if (char == \"\\\"\") {\n\t    return doubleQuotedAttributeValue\n\t  } else if (char == \"\\'\") {\n\t    return singleQuotedAttributeValue\n\t  } else if (char == \">\") {\n\t    emit(currentToken)\n\t    // return data\n\t  } else {\n\t    return UnquotedAttributeValue(char)\n\t  }\n\t}\n\t\n\tfunction doubleQuotedAttributeValue(char) {\n\t  if (char == \"\\\"\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return doubleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction singleQuotedAttributeValue(char) {\n\t  if (char == \"\\'\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    return afterQuotedAttributeValue\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return singleQuotedAttributeValue\n\t  }\n\t}\n\t\n\tfunction afterQuotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    return selfClosingStartTag\n\t  } else if (char ==\">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tfunction UnquotedAttributeValue(char) {\n\t  if (char.match(/^[\\t\\n\\f ]$/)) {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return beforeAttributeName\n\t  } else if (char == \"/\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    // emit(currentToken)\n\t    return selfClosingStartTag\n\t  } else if (char == \">\") {\n\t    currentToken[currentAttribute.name] = currentAttribute.value\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"\\u0000\") {\n\t    // return data\n\t  } else if (char == \"\\\"\" || char == \"\\'\" || char == \"<\" || char == \"=\" || char == \"`\") {\n\t    // return data\n\t  } else if (char == EOF) {\n\t    // return data\n\t  } else {\n\t    currentAttribute.value += char\n\t    return UnquotedAttributeValue\n\t  }\n\t}\n\t\n\t\n\tfunction selfClosingStartTag(char) {\n\t  if (char == \">\" || char == \"/\") {\n\t    currentToken.isSelfClosing = true\n\t    emit(currentToken)\n\t    return data\n\t  } else if (char == \"EOF\") {\n\t    // return data\n\t  } else {\n\t    // return data\n\t  }\n\t}\n\t\n\tmodule.exports.parseHTML = function parseHTML(html){\n\t\n\t  let state = data\n\t\n\t  for (let char of html) {\n\t    state = state(char)\n\t  }\n\t\n\t  state = state(EOF)\n\t  \n\t}\n\t```\n\n- 运行结果\n\t- ![第六步运行结果 vscode debugger](http://p0.meituan.net/myvideodistribute/1d00a3a9aa02bd2ff5eb52805c38768b345257.png)\n\n\n\n## 参考文献\n- [HTML standard docs](https://html.spec.whatwg.org/multipage/)\n- [VSCODE debugger](https://code.visualstudio.com/docs/editor/debugging)\n\n\n\n## 写在后面\n- [完整代码地址-点击一下](https://github.com/Ele-Peng/toy-browser)\n- 学而不思则罔 互勉\n- 祝大家多多发财","slug":"Toy-Browser-DAY2","published":1,"updated":"2020-05-24T11:32:30.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xk003i1wp3bvri1801","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>DAY1，我们已经完成 HTTP相关解析，现在我们可以写 HTML 的解析啦，开不开心！😝</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/6e1d35dcd8c01b557925f8d799583cb1130452.png\" alt=\"HTML 的解析\"></li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h3 id=\"第一步：拆分文件\"><a href=\"#第一步：拆分文件\" class=\"headerlink\" title=\"第一步：拆分文件\"></a>第一步：拆分文件</h3><ul>\n<li>为了方便文件管理，我们把parse单独拆到文件中</li>\n<li>parser 接受 HTML 文本作为参数，返回一颗 DOM 树</li>\n</ul>\n<ul>\n<li><p>server.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code </span><br><span class=\"line\">  </span><br><span class=\"line\">  res.end(</span><br><span class=\"line\">    <span class=\"string\">`&lt;html maaa=a &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    body div #myid&#123;</span></span><br><span class=\"line\"><span class=\"string\">        width:100px;</span></span><br><span class=\"line\"><span class=\"string\">        background-color: #ff5000;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    body div img&#123;</span></span><br><span class=\"line\"><span class=\"string\">        width:30px;</span></span><br><span class=\"line\"><span class=\"string\">        background-color: #ff1111;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;img id=\"myid\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;img /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8088</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>client.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> dom = parser.parseHTML(response.body)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>parseHTML1.js</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拆分文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(html)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/98a64e9c9eb9f97c01b0bb4ccb0141f976175.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二步：创建状态机\"><a href=\"#第二步：创建状态机\" class=\"headerlink\" title=\"第二步：创建状态机\"></a>第二步：创建状态机</h3><ul>\n<li>我们用 FSM 来实现 HTML 的分析</li>\n<li>在 HTML 标准中，已经规定了 HTML 的状态</li>\n<li>Toy-Browser 只挑选其中的一部分状态，完成一个最简版本</li>\n</ul>\n<ul>\n<li><p>parseHTML2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化 FSM - Finite State Machine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"第三步：解析标签\"><a href=\"#第三步：解析标签\" class=\"headerlink\" title=\"第三步：解析标签\"></a>第三步：解析标签</h3><ul>\n<li><p>主要的标签有：开始标签，结束标签和自封闭标签</p>\n</li>\n<li><p>在这一步我们暂时忽略属性</p>\n</li>\n<li><p>【未完：状态图分析】</p>\n</li>\n<li><p>parseHTML3.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"第四步：创建元素\"><a href=\"#第四步：创建元素\" class=\"headerlink\" title=\"第四步：创建元素\"></a>第四步：创建元素</h3><ul>\n<li><p>在状态中，除了状态迁移，我们还会要加入业务逻辑</p>\n</li>\n<li><p>我们在标签结束状态提交标签 token</p>\n</li>\n<li><p>parseHTML4.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// emitToken 创建元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type != <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    currentToken.type = <span class=\"string\">\"selfClosingTag\"</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5c4078e02702211bbe87ca75d2044cdb106832.png\" alt=\"第四步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五步：处理属性\"><a href=\"#第五步：处理属性\" class=\"headerlink\" title=\"第五步：处理属性\"></a>第五步：处理属性</h3><ul>\n<li><p>属性分为单引号、双引号、无引号三种写法，因此需要较多状态处理</p>\n</li>\n<li><p>处理属性的方式跟标签类似</p>\n</li>\n<li><p>属性结束时，我们把属性加到标签 token 上</p>\n</li>\n<li><p>parseHTML5.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理属性 attribute</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type != <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    currentToken.type = <span class=\"string\">\"selfClosingTag\"</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(state)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3b45aac402868fe1c62c7d7debbcfd24114412.png\" alt=\"第五步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六步：构建-DOM-树\"><a href=\"#第六步：构建-DOM-树\" class=\"headerlink\" title=\"第六步：构建 DOM 树\"></a>第六步：构建 DOM 树</h3><ul>\n<li><p>从标签创建 DOM 树的基本技巧是使用栈</p>\n</li>\n<li><p>遇到开始标签时创建元素并入栈，遇到结束标签时出栈</p>\n</li>\n<li><p>自封闭节点可视为入栈后立刻出栈</p>\n</li>\n<li><p>任何元素的父元素是它入栈前的栈顶</p>\n</li>\n<li><p>parseHTML6.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理属性 constructTree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"document\"</span>, <span class=\"attr\">children</span>: []&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = stack[stack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'push'</span>, element)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'pop'</span>, stack.pop())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(state)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(stack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果：这边我在每次对栈操作时(push/pop)时，添加了 console</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f83a95f5afec8c5ad34c8df0a34a6ff8116344.png\" alt=\"第六步运行结果\"></li>\n</ul>\n</li>\n<li><p>这边推荐使用 <a href=\"https://code.visualstudio.com/docs/editor/debugging\" target=\"_blank\" rel=\"noopener\">vs-code debugger 使用方法</a></p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7a4cb0d87ac89cb3a5ae4252c3a5d6a7321211.png\" alt=\"第六步运行结果 vscode debugger\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七步：文本节点\"><a href=\"#第七步：文本节点\" class=\"headerlink\" title=\"第七步：文本节点\"></a>第七步：文本节点</h3><ul>\n<li><p>文本节点与自封闭标签处理类似</p>\n</li>\n<li><p>多个文本节点需要合并</p>\n</li>\n<li><p>parseHTML7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理文本节点 combineText</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"document\"</span>, <span class=\"attr\">children</span>: []&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = stack[stack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log('push', element)</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentTextNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      currentTextNode = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">        content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      top.children.push(currentTextNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode.content += token.content</span><br><span class=\"line\">    <span class=\"comment\">// console.log(top.children)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/1d00a3a9aa02bd2ff5eb52805c38768b345257.png\" alt=\"第六步运行结果 vscode debugger\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/\" target=\"_blank\" rel=\"noopener\">HTML standard docs</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/debugging\" target=\"_blank\" rel=\"noopener\">VSCODE debugger</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>学而不思则罔 互勉</li>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>implementation of a toy-browser 🙆</li>\n<li>DAY1，我们已经完成 HTTP相关解析，现在我们可以写 HTML 的解析啦，开不开心！😝</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/6e1d35dcd8c01b557925f8d799583cb1130452.png\" alt=\"HTML 的解析\"></li>\n</ul>","more":"<h2 id=\"实践过程\"><a href=\"#实践过程\" class=\"headerlink\" title=\"实践过程\"></a>实践过程</h2><h3 id=\"第一步：拆分文件\"><a href=\"#第一步：拆分文件\" class=\"headerlink\" title=\"第一步：拆分文件\"></a>第一步：拆分文件</h3><ul>\n<li>为了方便文件管理，我们把parse单独拆到文件中</li>\n<li>parser 接受 HTML 文本作为参数，返回一颗 DOM 树</li>\n</ul>\n<ul>\n<li><p>server.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code </span><br><span class=\"line\">  </span><br><span class=\"line\">  res.end(</span><br><span class=\"line\">    <span class=\"string\">`&lt;html maaa=a &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    body div #myid&#123;</span></span><br><span class=\"line\"><span class=\"string\">        width:100px;</span></span><br><span class=\"line\"><span class=\"string\">        background-color: #ff5000;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    body div img&#123;</span></span><br><span class=\"line\"><span class=\"string\">        width:30px;</span></span><br><span class=\"line\"><span class=\"string\">        background-color: #ff1111;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;img id=\"myid\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;img /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8088</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>client.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... some code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... some code</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> dom = parser.parseHTML(response.body)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>parseHTML1.js</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拆分文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(html)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/98a64e9c9eb9f97c01b0bb4ccb0141f976175.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二步：创建状态机\"><a href=\"#第二步：创建状态机\" class=\"headerlink\" title=\"第二步：创建状态机\"></a>第二步：创建状态机</h3><ul>\n<li>我们用 FSM 来实现 HTML 的分析</li>\n<li>在 HTML 标准中，已经规定了 HTML 的状态</li>\n<li>Toy-Browser 只挑选其中的一部分状态，完成一个最简版本</li>\n</ul>\n<ul>\n<li><p>parseHTML2.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化 FSM - Finite State Machine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"第三步：解析标签\"><a href=\"#第三步：解析标签\" class=\"headerlink\" title=\"第三步：解析标签\"></a>第三步：解析标签</h3><ul>\n<li><p>主要的标签有：开始标签，结束标签和自封闭标签</p>\n</li>\n<li><p>在这一步我们暂时忽略属性</p>\n</li>\n<li><p>【未完：状态图分析】</p>\n</li>\n<li><p>parseHTML3.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"第四步：创建元素\"><a href=\"#第四步：创建元素\" class=\"headerlink\" title=\"第四步：创建元素\"></a>第四步：创建元素</h3><ul>\n<li><p>在状态中，除了状态迁移，我们还会要加入业务逻辑</p>\n</li>\n<li><p>我们在标签结束状态提交标签 token</p>\n</li>\n<li><p>parseHTML4.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// emitToken 创建元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type != <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    currentToken.type = <span class=\"string\">\"selfClosingTag\"</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/5c4078e02702211bbe87ca75d2044cdb106832.png\" alt=\"第四步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五步：处理属性\"><a href=\"#第五步：处理属性\" class=\"headerlink\" title=\"第五步：处理属性\"></a>第五步：处理属性</h3><ul>\n<li><p>属性分为单引号、双引号、无引号三种写法，因此需要较多状态处理</p>\n</li>\n<li><p>处理属性的方式跟标签类似</p>\n</li>\n<li><p>属性结束时，我们把属性加到标签 token 上</p>\n</li>\n<li><p>parseHTML5.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理属性 attribute</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type != <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    currentToken.type = <span class=\"string\">\"selfClosingTag\"</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(state)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3b45aac402868fe1c62c7d7debbcfd24114412.png\" alt=\"第五步运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六步：构建-DOM-树\"><a href=\"#第六步：构建-DOM-树\" class=\"headerlink\" title=\"第六步：构建 DOM 树\"></a>第六步：构建 DOM 树</h3><ul>\n<li><p>从标签创建 DOM 树的基本技巧是使用栈</p>\n</li>\n<li><p>遇到开始标签时创建元素并入栈，遇到结束标签时出栈</p>\n</li>\n<li><p>自封闭节点可视为入栈后立刻出栈</p>\n</li>\n<li><p>任何元素的父元素是它入栈前的栈顶</p>\n</li>\n<li><p>parseHTML6.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理属性 constructTree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"document\"</span>, <span class=\"attr\">children</span>: []&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = stack[stack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'push'</span>, element)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'pop'</span>, stack.pop())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(state)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(stack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果：这边我在每次对栈操作时(push/pop)时，添加了 console</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/f83a95f5afec8c5ad34c8df0a34a6ff8116344.png\" alt=\"第六步运行结果\"></li>\n</ul>\n</li>\n<li><p>这边推荐使用 <a href=\"https://code.visualstudio.com/docs/editor/debugging\" target=\"_blank\" rel=\"noopener\">vs-code debugger 使用方法</a></p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/7a4cb0d87ac89cb3a5ae4252c3a5d6a7321211.png\" alt=\"第六步运行结果 vscode debugger\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七步：文本节点\"><a href=\"#第七步：文本节点\" class=\"headerlink\" title=\"第七步：文本节点\"></a>第七步：文本节点</h3><ul>\n<li><p>文本节点与自封闭标签处理类似</p>\n</li>\n<li><p>多个文本节点需要合并</p>\n</li>\n<li><p>parseHTML7.js</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理文本节点 combineText</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentToken = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentAttribute = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"document\"</span>, <span class=\"attr\">children</span>: []&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = stack[stack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"startTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> element = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">      children: [],</span><br><span class=\"line\">      attributes: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    element.tagName = token.tagName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"string\">\"type\"</span> &amp;&amp; p != <span class=\"string\">\"tagName\"</span>) &#123;</span><br><span class=\"line\">        element.attributes.push(&#123;</span><br><span class=\"line\">          name: p,</span><br><span class=\"line\">          value: token[p]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.children.push(element)</span><br><span class=\"line\">    element.parent = top</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token.isSelfClosing)</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log('push', element)</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"endTag\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top.tagName != token.tagName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Tag start end doesn't match\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('pop', stack.pop())</span></span><br><span class=\"line\">      stack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token.type == <span class=\"string\">\"text\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentTextNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      currentTextNode = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">        content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      top.children.push(currentTextNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentTextNode.content += token.content</span><br><span class=\"line\">    <span class=\"comment\">// console.log(top.children)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"EOF\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">      content: char</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 开始标签</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 结束标签</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 自封闭标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123; <span class=\"comment\">// 结束标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> endTagOpen</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123; <span class=\"comment\">// 开始标签</span></span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"startTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endTagOpen</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"endTag\"</span>,</span><br><span class=\"line\">      tagName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tagName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[a-zA-Z]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken.tagName += char.toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span> || char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute = &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      value: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterAttributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attributeName</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterAttributeName(char)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.name += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attributeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>) || char == <span class=\"string\">\"/\"</span> || char == <span class=\"string\">\"&gt;\"</span> || char == EOF) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singleQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\'\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterQuotedAttributeValue</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleQuotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterQuotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char ==<span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnquotedAttributeValue</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char.match(<span class=\"regexp\">/^[\\t\\n\\f ]$/</span>)) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beforeAttributeName</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    <span class=\"comment\">// emit(currentToken)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selfClosingStartTag</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span>) &#123;</span><br><span class=\"line\">    currentToken[currentAttribute.name] = currentAttribute.value</span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\u0000\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"\\\"\"</span> || char == <span class=\"string\">\"\\'\"</span> || char == <span class=\"string\">\"&lt;\"</span> || char == <span class=\"string\">\"=\"</span> || char == <span class=\"string\">\"`\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == EOF) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    currentAttribute.value += char</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UnquotedAttributeValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfClosingStartTag</span>(<span class=\"params\">char</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char == <span class=\"string\">\"&gt;\"</span> || char == <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    currentToken.isSelfClosing = <span class=\"literal\">true</span></span><br><span class=\"line\">    emit(currentToken)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char == <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return data</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.parseHTML = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseHTML</span>(<span class=\"params\">html</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> html) &#123;</span><br><span class=\"line\">    state = state(char)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  state = state(EOF)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/1d00a3a9aa02bd2ff5eb52805c38768b345257.png\" alt=\"第六步运行结果 vscode debugger\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/\" target=\"_blank\" rel=\"noopener\">HTML standard docs</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/debugging\" target=\"_blank\" rel=\"noopener\">VSCODE debugger</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li><a href=\"https://github.com/Ele-Peng/toy-browser\" target=\"_blank\" rel=\"noopener\">完整代码地址-点击一下</a></li>\n<li>学而不思则罔 互勉</li>\n<li>祝大家多多发财</li>\n</ul>"},{"title":"【未完】Javascript-运行机制（一）","date":"2020-04-30T15:55:49.000Z","description":["Javascript -- Expression"],"_content":"\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 五一假期，来写一写 Promise 的题吧，嘿嘿嘿 😃\n- 五一倒计时 3 天\n\n<!-- more -->\n\n## 实践准备\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    while(true) {\n      char sourcecode[1024];\n      \n      scanf('%s', &sourcecode);\n      NSString* code = [NSString stringWithUTF8String: sourcecode];\n      \n      result = [context evaluateScript:code];\n      \n      NSLog(@\"%@\", [result toString]);\n      \n    }\n  \n  return 0;\n\n}\n\n```\n\n- 如上实现一个简单的事件循环，用来输出 console\n- ![OC 方法](http://p1.meituan.net/myvideodistribute/a99619da1cded49f443ded2fc219b27432778.png)\n- 我们在 Javascript 中讲的微任务队列、宏任务队列，是 Javascript 调用方去使用 Javascript 的一种方式，如果仅是执行一段代码，是不需要事件循环的。通过这段代码，是可以看出来，Javascript 的事件循环，是在 JSContext 之外，事件循环相关知识，既不是 Javascript 引擎的一部分，也不是 Javascript 语言的一部分。\n- code 的传入方式\n\t- &lt;script&gt;&lt;/script&gt; 普通代码片段\n\t- &lt;script type=\"module\"&gt;&lt;/script&gt;\n\t- 函数\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    // TODO: calculate the square of arg x\n    NSString* code = @\"(function(x){ return x * x; })\";\n    \n    \n    // like: result = (function(x){ return x * x; })\n    result = [context evaluateScript:code];\n    \n    // passing the number 4 into the function\n    JSValue* arg1 = [JSValue valueWithInt32:4 inContext:context];\n    \n    // execute the function with arg of 4\n    NSLog(@\"%@\", [[result callWithArguments:@[arg1]] toString]);\n  \n  }\n  \n  return 0;\n\n}\n\n```\n\n- 上面的 Object-C 代码，可以看出来，我们是将一段一段的代码，传入 evaluateScript 中执行。\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    // TODO: calculate the square of arg x\n    NSString* code = @\"new Promise(resolve => resolve()).then(() => this.a = 3), function(){return this.a};\";\n        \n    result = [context evaluateScript:code];\n    \n    // like: result();\n    NSLog(@\"%@\", [[result callWithArguments:@[]] toString]);\n  \n  }\n  \n  return 0;\n\n}\n\n```\n\n- evaluateScript 实际上执行两步：\n\t1. 执行整个方法\n\t\t\n\t\t> new Promise(resolve => resolve()).then(() => this.a = 3), function(){return this.a};\n\t\n\t\t- 逗号表达式，永远返回后面的值，如果被调用，前面的会被执行\n\t2. 执行 Promise 中 then 后面的语句\n\t- ![evaluateScript](http://p0.meituan.net/myvideodistribute/81d945c99778450fd86a710f20355cbc269796.png)\n\t- 有 then ,可能产生一个宏任务里面有多个微任务的情况， 一切JS 代码都是微任务中执行的\n\t- 拿浏览器举例：setTimeout、setInterval 这种其实不是 JS 语法本身的 API，是 JS 的宿主浏览器提供的 API， 所以是宏任务。\n\t- 而 Promise 是 JS 本身自带的 API，这种就是微任务。\n- 总结：**宿主提供的方法是宏任务，JS 自带的是微任务**\n- **任务列表列里面有很多宏任务，然后每个宏任务里面有一个微任务列表，每个宏任务执行下一个宏任务之前会把自己内部的微任务执行完**\n- **宏任务**包括：script 、setTimeout、setInterval 、setImmediate 、I/O 、UI rendering。\n- **微任务**包括：MutationObserver、Promise.then()或catch()、Promise为基础开发的其它技术，比如fetch API、V8的垃圾回收过程、Node独有的process.nextTick。\n\t\t\n\n\n# Javascript 结构化程序设计基础设施\n\n- \n\n\n## 实践记录\n### 基础题\n\n1.1 题目一\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n})\nconsole.log('1', promise1);\n```\n\n- 分析：\n\t- 从上至下，先执行 new Promise，执行该构造函数中 console.log('promise1')\n\t\n\t> console.log('1', promise1);\n\t\n\t- 再执行同步代码\n\t- 执行完后， promise1 中并没有 resolved, rejected， 一直处在 pending 的状态\n\n- 运行结果\n\t- ![题目一执行](http://p0.meituan.net/myvideodistribute/f45e1dbe45d84e46ab2fd24703cad0c521137.png)\n\n1.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- resolve('success') 将 promise 中的状态更改为 resolved，并保存下来\n\t\t- console.log(2);\n\t- promise.then 入队微任务队列\n\t- 再执行当前宏任务中的同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，且 promise 为resolved，执行 promise.then\n\t\t- console.log(3);\n\n- 运行结果\n\t- ![题目二执行](http://p0.meituan.net/myvideodistribute/c31fd6e9ba9c9f9ac4062d6b395706f230745.png)\n\n1.3 题目三\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- console.log(2);\n\t\t- 该 promise 没有 resolved, rejected, 一直处在 pending\n\t- promise.then 入队微任务队列\n\t- 再执行当前宏任务中的同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，但 promise 为pending，不可能执行 promise.then 中方法\n\n- 运行结果\n\t- ![题目三执行](http://p0.meituan.net/myvideodistribute/b6e827ca293c65c261a83a81f1f5411227105.png)\n\n1.4 题目四\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log('promise1')\n\t\t- resolve('resolve1') 将 promise 中的状态更改为 resolved，并保存下来\n\t- promise1.then 入队微任务队列\n\t- promise2 是一个新状态为 pending 的 Promise\n\t- 执行同步代码\n\t\t- console.log('1', promise1);\n\t\t\t- promise1 中状态在上面已经更改为 resolved\n\t\t- console.log('2', promise2);\n\t\t\t- promise2 中状态为pending\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then \n\t\t- console.log(res) \n\t\t\t- 其中 promise1.then， promise1 的状态为 resolved\n\n- 运行结果\n\t- ![题目四运行结果](http://p0.meituan.net/myvideodistribute/f31e7f8db309521b5252143252eaed2551272.png)\n\n\n1.5 题目五\n\n```javascript\nconst fn = () => (new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n}))\nfn().then(res => {\n  console.log(res)\n})\nconsole.log('start')\n```\n\n- 分析\n\t- 从上至下，const fn = () => (Promise Object) 返回一个 promise 对象\n\t- fn()，执行 fn 方法\n\t\t- console.log(1);\n\t\t- resolve('success') 将 promise 中的状态更改为 resolved，并保存下来\n\t- Function.then 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then\n\t\t- console.log(res) 其中 promise 的状态为 resolved\n\n- 运行结果\n\t- ![题目五运行结果](http://p1.meituan.net/myvideodistribute/955895672615c24a4eb671617d8b739829033.png)\n\n\n1.6 题目六\n\n```javascript\nconst fn = () =>\n  new Promise((resolve, reject) => {\n    console.log(1);\n    resolve(\"success\");\n  });\nconsole.log(\"start\");\nfn().then(res => {\n  console.log(res);\n});\n```\n\n- 分析\n\t- 从上至下，const fn = () => (Promise Object) 返回一个 promise 对象\n\t- 执行同步代码\n\t\t-  console.log(\"start\");\n\t- fn(), 执行 fn 方法\n\t\t- console.log(1);\n\t\t- resolve(\"success\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t- Function.then 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then\n\t\t- console.log(res); 其中 promise 的状态为 resolved\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/ccd1a9148be91f5aa24847a0d4e23dfb31837.png)\n\n### Promise 结合 setTimeout\n\n2.1 题目一\n\n```javascript\nconsole.log('start')\nsetTimeout(() => {\n  console.log('time')\n})\nPromise.resolve().then(() => {\n  console.log('resolve')\n})\nconsole.log('end')\n```\n\n- 分析\n\t- 从上至下，先执行同步代码\n\t\t- console.log('start')\n\t- setTimeout ... 入队宏任务队列\n\t- Promise.resolve().then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('end')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Promise.resolve().then\n\t\t- console.log('resolve')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t\t- console.log('time')\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/4a9c74ab2a26cc16e55ce53f6fb765d630133.png)\n\n2.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  setTimeout(() => {\n    console.log(\"timerStart\");\n    resolve(\"success\");\n    console.log(\"timerEnd\");\n  }, 0);\n  console.log(2);\n});\npromise.then((res) => {\n  console.log(res);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- setTimeout ... 入队宏任务队列\n\t\t- console.log(2);\n\t- promise.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 其中 promise 中，并没有 resolved、rejected，一直在 pending，不可能执行 promise.then 中方法\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 第二个宏任务 setTimeout 代码从上至下执行\n\t- 执行同步代码\n\t\t- console.log(\"timerStart\");\n\t\t- resolve(\"success\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t\t- console.log(\"timerEnd\");\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/66ea5bbd68d0841ad58cac5ca771625347414.png)\n\n\t\n2.3 题目三\n\n```javascript\nsetTimeout(() => {\n  console.log('timer1');\n  setTimeout(() => {\n    console.log('timer3')\n  }, 0)\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```\n\n- 分析\n\t- 从上执行\n\t- setTimeout ... 加入宏任务队列\n\t- setTimeout ... 加入宏任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码 \n\t\t- console.log('timer1');\n\t- setTimeout ... 加入宏任务队列\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('timer2')\n\t- 第三个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('timer3')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/b5ab6578c5ba7d8d727a3bf47ba8879033812.png)\n\n```javascript\nsetTimeout(() => {\n  console.log('timer1');\n  Promise.resolve().then(() => {\n    console.log('promise')\n  })\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- setTimeout ... 加入宏任务队列\n\t- setTimeout ... 加入宏任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer1');\n\t\t- Promise.resolve().then ... 入队微任务队列\n\t\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t\t\t- console.log('promise')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer2')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/f65f2aa65848d2e8aaf5c3918509c6e934427.png)\n\n\n2.4 题目四\n\n```javascript\nPromise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n});\nconst timer1 = setTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(() => {\n    console.log('promise2')\n  })\n}, 0)\nconsole.log('start');\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.resolve().then ... 入队微任务队列\n\t- setTimeout ... 入队宏任务队列\n\t- 执行同步代码\n\t- console.log('start');\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t- 执行同步代码\n\t- console.log('promise1');\n\t- setTimeout ... 入队宏任务队列\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- console.log('timer2')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t- console.log('timer1')\n\t- Promise.resolve().then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t- console.log('promise2')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- console.log('timer2')\n\n- 运行结果\n\t- ![题目四运行结果](http://p1.meituan.net/myvideodistribute/60a22379f31bb12de055ed83a31aca0b46969.png)\n\n2.5 题目五 ** 存在和之前一样的，promise resolved 后，状态上抛至上一个 宏任务队列的问题\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconst promise2 = promise1.then(() => {\n  throw new Error('error!!!')\n})\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => {\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n}, 2000)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- 先执行 new Promise，执行该构造函数中\n\t- setTimout ... 入队宏任务队列\n\t- promise1.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('promise1', promise1)\n\t\t\t- 其中 promise1 没有 resolved、rejected,一直处在 pending 状态\n\t\t\t- promise1 Promise {\\<pending\\>}\n\t\t- console.log('promise2', promise2)\n\t\t\t- 其中 promise1 一直处在 pending 状态，直接影响到 promise2 也一直处在 pending 状态\n\t\t\t- promise2 Promise {\\<pending\\>}\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- 由于 promise1 仍处于 pending 状态，不可能执行 promise1.then ...\n\t- 第一个宏任务执行完了，开始执行下一个宏任务\n\t- resolve('success') 将 promise1 中的状态更改为 resolved，并保存下来\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('promise1', promise1)\n\t\t\t- 其中 promise1 处在 resolved 状态\n\t\t\t- promise1 Promise {\\<resolved\\>: \"success\"}\n\t\t- console.log('promise2', promise2)\n\t\t\t- promise2 Promise {\\<rejected\\>: Error: error!!! at \\<anonymous\\>:8:9}\n\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/3ad654d66c66c648a058adf29154d879107368.png)\n\n\n2.6 题目六\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"success\");\n    console.log(\"timer1\");\n  }, 1000);\n  console.log(\"promise1里的内容\");\n});\nconst promise2 = promise1.then(() => {\n  throw new Error(\"error!!!\");\n});\nconsole.log(\"promise1\", promise1);\nconsole.log(\"promise2\", promise2);\nsetTimeout(() => {\n  console.log(\"timer2\");\n  console.log(\"promise1\", promise1);\n  console.log(\"promise2\", promise2);\n}, 2000);\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t- setTimeout 入队宏任务队列\n\t- 执行同步代码\n\t\t- console.log(\"promise1里的内容\");\n\t- promise1.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(\"promise1\", promise1);\n\t\t\t- 其中 promise1 没有 resolved、rejected 掉，一直处在 pending 状态\n\t\t\t\t- promise1 Promise {\\<pending\\>}\n\t\t- console.log(\"promise2\", promise2);\n\t\t\t- primise1 的 pending 状态，直接影响 promise2 也处在 pending 状态\n\t\t\t\t- promise2 Promise {\\<pending\\>}\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- 由于 promise1 仍处于 pending 状态，不可能执行 promise1.then ...\n\t- 第一个宏任务执行完了，开始执行第二个宏任务\n\t- resolve(\"success\"); 将 promise1 中的状态更改为 resolved，并保存下来\n\t- 执行同步代码\n\t\t- console.log(\"timer1\");\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- throw new Error(\"error!!!\");\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t\t- 执行同步代码\n\t\t\t- console.log(\"timer2\");\n\t\t\t- console.log(\"promise1\", promise1);\n\t\t\t\t- 其中 promise1 的状态已经 resloved\n\t\t\t\t- promise1 Promise {\\<resolved\\>: \"success\"}\n\t\t\t- console.log(\"promise2\", promise2);\n\t\t\t\t- promise2 Promise {\\<rejected\\>: Error: error!!! at \\<anonymous\\>:8:9}\n\n- 运行结果\n\t- ![题目六运行结果](http://p1.meituan.net/myvideodistribute/88a197ec5863fcca93b072d3baecf6a0113849.png)\n\n\n### Promise 中的 then、catch、finally\n\n3.1 题目一\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  resolve(\"success1\");\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t\t- resolve(\"success1\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t- promise.then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t\t- console then:  success1\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/448d9fb1db29ba7e76762f97a9508d1e35386.png)\n- 结论\n\t- **Promise的状态一经改变就不能再改变**\n\t- **构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用**。\n\n\n3.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then1: \", res);\n  }).then(res => {\n    console.log(\"then2: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  }).then(res => {\n    console.log(\"then3: \", res);\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t\t- reject(\"error\"); 将 promise 中的状态更改为 rejected，并保存下来\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t- 由于 promise 状态为 rejected，因此触发 catch ，不管 catch 连接到哪，都能捕获上层未捕捉过的错误\n\t\t- console.log(\"catch: \", err);\n\t\t- return a new promise\n\t- 由于 新的 promise 没有返回值，因此返回 undefined\n\n- 结论\n\t- **catch不管被连接到哪里，都能捕获上层未捕捉过的错误**\n\t- 至于 then3 也会被执行，那是因为**catch()也会返回一个 Promise **，且由于这个 Promise 没有返回值，所以打印出来的是 undefined 。\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/8523408bd03cb268237e720380e1273d47036.png)\n\n\t\n3.3 题目三\n\n```javascript\nPromise.resolve(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    return 3;\n  })\n  .then(res => {\n    console.log(res);\n  });\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态为 resolved, 因此触发 then\n\t\t- console.log(res); res --> 1\n\t- 没有报错，略过 catch\n\t- 被 then 捕捉\n\t\t- console.log(2); 返回新的 promise， promise 返回 resolve(2)\n\n- 结论\n\t- **Promise 可以链式调用**，不过 promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样 return this。\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/2ca378bb1952c6fbacc3028024b1b89027624.png)\n\n\n3.4 题目四\n\n```javascript\nPromise.reject(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    console.log(err);\n    return 3\n  })\n  .then(res => {\n    console.log(res);\n  });\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态为 rejected，因此触发 catch\n\t\t- console.log(err); err --> 1\n\t\t- return resolve(3)\n\t- 被 then 捕捉\n\t\t- console.log(3) \n\n- 运行结果\n\t- ![题目四运行结果](http://p0.meituan.net/myvideodistribute/ed821dfd96ad96250140abdedf581fd930226.png)\n\n\n3.5 题目五\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('timer')\n    resolve('success')\n  }, 1000)\n})\nconst start = Date.now();\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t- setTimeout ... 入队宏任务队列\n\t- promise.then ... 入队微任务队列\n\t- promise.then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t- 因为 promise 状态并没有 resolved、rejected，一直处在 pending，并不能调用 then 方法\n\t- 同上\n\t- 第一个宏任务执行完成，开始执行第二个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer')\n\t\t- promise 状态更改为 resolved，并保存下来\n\t\t\t- 状态往上抛\n\t\t\t- console.log(res, Date.now() - start)\n\t\t\t- console.log(res, Date.now() - start))\n\n- 结论\n\t- **Promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。**\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/9ee74ca562f7c913d51c9fd5fe60680543896.png)\n\n3.6 题目六\n\n```javascript\nPromise.resolve().then(() => {\n  return new Error('error!!!')\n}).then(res => {\n  console.log(\"then: \", res)\n}).catch(err => {\n  console.log(\"catch: \", err)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态更改为 resolve，并无返回值\n\t- 执行 then\n\t\t- throw new Error('error!!!')\n\t\t- return Promise.reject(new Error('error!!!'))\n\t- 被 catch 捕捉\n\t\t- console.log(\"catch: \", err) err --> error\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/a1cb4e4f5e5ec95e2215d5b7ecc6a32428525.png)\n\t\n\t\n3.7 题目七\n\n```javascript\nconst promise = Promise.resolve().then(() => {\n  return promise;\n})\npromise.catch(console.err)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 resolve ，并无返回值\n\t- 执行 then\n\t\t- return Promise.resolve(promise)\n\t\t- Chaining cycle detected for promise\n\t- 执行同步代码\n\t\t- promise.catch promise cycle\n\n- 运行结果\n\t- ![题目七运行结果](http://p0.meituan.net/myvideodistribute/70dbed986bad1d410ad7be3de8fe963d21008.png)\n\n\t\n3.8 题目八\n\n```javascript\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 resolve， return Promise.resolve(1)\n\t- .then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传\n\t- 第一个then和第二个then中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将resolve(1) 的值直接传到最后一个then里\n\n- 结论\n\t- **.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传**\n\n- 运行结果\n\t- ![题目八运行结果](http://p1.meituan.net/myvideodistribute/68c56ed26f2845300ecba0dc6dc7a3e914382.png)\n\n\n3.9 题目九\n\n```javascript\nPromise.reject('err!!!')\n  .then((res) => {\n    console.log('success', res)\n  }, (err) => {\n    console.log('error', err)\n  }).catch(err => {\n    console.log('catch', err)\n  })\n```\n\n- 我们可以先来看看，如果 catch 住了错误，err 会一直链式传递下去被 catch嘛\n- ![是否会被一直catch](http://p1.meituan.net/myvideodistribute/f9859062c1341e2e575f952e320aba4222620.png)\n\t- 一旦 catch 住当前报错，当前报错并不会再往下传递\n- ![逐行调用catch是会一直传递下去的](http://p1.meituan.net/myvideodistribute/9846287852a98f322045973bf302c58f24992.png)\n\t- 逐行调用 then 是会一直传递下去的\n- 那我还可以看看，如果没有错误，res 会一直链式传递 then 执行嘛\n- ![是否会被一直then](http://p1.meituan.net/myvideodistribute/e2e72158c05ceee7da7528ff9a20348426425.png)\n\t- 可以看出 then 是会一直往下传递的\n- ![逐行调用then 是会一直传递下去的](http://p0.meituan.net/myvideodistribute/abb8ccf3daffdd023ce079c86cafdfd626377.png)\n\t- 逐行调用 then 是会一直传递下去的\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 rejected，return 'err!!!'\n\t- 执行 then，then 中第二个函数，相当于 catch\n\t- 因此执行\n\t- console.log('error', err) err --> err!!!\n\n- 运行结果\n\t- ![题目九运行结果](http://p0.meituan.net/myvideodistribute/05e3b86caaf2b9cbf0c6326020e3385327546.png)\n\n\n```javascript\nPromise.resolve()\n  .then(function success (res) {\n    throw new Error('error!!!')\n  }, function fail1 (err) {\n    console.log('fail1', err)\n  }).catch(function fail2 (err) {\n    console.log('fail2', err)\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态变为 resolve，\n\t- 执行 then\n\t\t- throw new Error('error!!!')\n\t- 被 catch \n\t\t- console.log('fail2', err) err --> error!!!\n\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/c8643d8fb0fd251145befd28d635ed7e33265.png)\n\n3.10 题目十\n\n```javascript\nPromise.resolve('1')\n  .then(res => {\n    console.log(res)\n  })\n  .finally(() => {\n    console.log('finally')\n  })\nPromise.resolve('2')\n  .finally(() => {\n    console.log('finally2')\n  \treturn '我是finally2返回的值'\n  })\n  .then(res => {\n    console.log('finally2后面的then函数', res)\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态变为 resolve，return 1\n\t- 执行 then\n\t\t- console.log(res) res --> return new Promise， resolve(1) 加入微任务队列\n\t- promise 状态变为 resolve, return 2\n\t\t- 执行 finally\n\t\t\t- console.log('finally2')\n\t\t\t- return new Promise， resolve('我是finally2返回的值') 加入微任务队列\n\t- 当前同步代码执行完成，开始还行微任务队列\n\t\t- console.log('finally')\n\t\t- console.log('finally2后面的then函数', res) res --> 2\n\n- 结论\n\t- .finally()方法不管Promise对象最后的状态如何都会执行\n\t- .finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道Promise最终的状态是resolved还是rejected的\n\t- 它最终返回的默认会是一个**上一次的Promise对象值**，不过如果抛出的是一个异常则返回异常的Promise对象。\n\t- **promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用** \n\t\t\n\t\n- 运行结果\n\t- ![题目十运行结果](http://p0.meituan.net/myvideodistribute/99d8936b8c5029a6786b464868666f7d47917.png)\n\n\t\n### Promise 中的 all 和 race\n\n- Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。\n- Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。\n\n\n4.1 题目一\n\n```javascript\nfunction runAsync (x) {\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n}\nPromise.all([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.all 入队微任务队列\n\t- 当前同步代码执行完成，开始执行微任务队列\n\t\t- 间隔一秒后，控制台会同时打印出1, 2, 3，还有一个数组[1, 2, 3]\n- 结论\n\t- **有了all，就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据**\n\t- .all()后面的.then()里的回调函数接收的就是所有异步操作的结果。\n\t- 而且这个结果中数组的顺序和Promise.all()接收到的数组顺序一致\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/d3a6d5f4f158de806b690af124fcec9431029.png)\n\n\t\n4.2 题目二\n\n```javascript\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nfunction runReject (x) {\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n  return p\n}\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n  .then(res => console.log(res))\n  .catch(err => console.log(err))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.all 入队微任务队列\n\t- 当前同步代码执行完成，开始执行微任务队列\n\t\t- 间隔一秒后，控制台会同时打印出 1, 3\n\t- 由于 runReject(4) 比 runReject(2) 晚入微任务队列，且 catch 只执行一次\n\t\t- 再间隔一秒后\n\t\t\t- console.log(x) x --> 2\n\t\t\t- console.log('Error: 2')\n\t\t- 再间隔2秒后\n\t\t\t- console.log(x) x --> 4\n\t\t\t- 不会再执行 catch\n\n- 运行结果\n\t- ![题目二运行结果](http://p1.meituan.net/myvideodistribute/e0e25426dc0d49c3af9acee68744760d51135.png)\n\n- 等同于\n\t\n\t```javascript\n\tfunction runAsync (x) {\n\t  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n\t  return p\n\t}\n\tfunction runReject (x) {\n\t  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n\t  return p\n\t}\n\tPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n\t  .then(res => console.log(res), \n\t  err => console.log(err);\n\t```\n- 结论\n\t- all 和 race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被 then 的第二个参数或者后面的 catch 捕获；但并不会影响数组中其它的异步任务的执行。\n\n4.3 题目三\n\n```javascript\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log('result: ', res))\n  .catch(err => console.log(err))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.race 入队微任务队列\n\t- 当前宏任务中同步任务执行完成，开始执行微任务\n\t- 在间隔时间都一样的情况下，runAsync1 最先加入队列\n\t- 因此\n\t\t- console.log(x) x --> 1\n\t- 由于 race 的特殊性，只捕捉最先执行完成的那个结果\n\t\t- console.log('result: ', res) res --> 1\n\t- 再\n\t\t- console.log(x) x --> 2\n\t\t- console.log(x) x --> 3\n\t- 没有报错，不会被 catch\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/2eda438cd745e39ba934af362a80521038770.png)\n\n4.4 题目四\n\n```javascript\nfunction runAsync(x) {\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n}\nfunction runReject(x) {\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\n  );\n  return p;\n}\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(\"result: \", res))\n  .catch(err => console.log(err));\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.race 入队微任务队列\n\t- 当前宏任务中同步任务执行完成，开始执行微任务\n\t- runReject(0) 最先传入\n\t- 因此\n\t\t- console.log(x) x --> 0\n\t\t- console.log(err) err --> Error: 0\n\t- 间隔小于1秒后\n\t- runAsync(1), runAsync(2), runAsync(3)\n\t\t- 依次为\n\t\t- console.log(x) x --> 1\n\t\t- console.log(x) x --> 2\n\t\t- console.log(x) x --> 3\n\n- 运行结果\n\t- ![题目四](http://p1.meituan.net/myvideodistribute/89acbf32e7218b90c050526171bd1b3d53719.png)\n\n\n\n\n\t\n## 参考文献\n- [题目来源](https://juejin.im/post/5e58c618e51d4526ed66b5cf)\n\n\n\n## 写在后面\n- 祝大家多多发财","source":"_posts/Javascript-运行机制.md","raw":"---\ntitle: 【未完】Javascript-运行机制（一）\ndate: 2020-04-30 23:55:49\ntags: \n- 前端概念\ncategories:\n- 前端概念\ndescription:\n- Javascript -- Expression\n\n\n---\n\n\n<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n## 写在前面\n- 五一假期，来写一写 Promise 的题吧，嘿嘿嘿 😃\n- 五一倒计时 3 天\n\n<!-- more -->\n\n## 实践准备\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    while(true) {\n      char sourcecode[1024];\n      \n      scanf('%s', &sourcecode);\n      NSString* code = [NSString stringWithUTF8String: sourcecode];\n      \n      result = [context evaluateScript:code];\n      \n      NSLog(@\"%@\", [result toString]);\n      \n    }\n  \n  return 0;\n\n}\n\n```\n\n- 如上实现一个简单的事件循环，用来输出 console\n- ![OC 方法](http://p1.meituan.net/myvideodistribute/a99619da1cded49f443ded2fc219b27432778.png)\n- 我们在 Javascript 中讲的微任务队列、宏任务队列，是 Javascript 调用方去使用 Javascript 的一种方式，如果仅是执行一段代码，是不需要事件循环的。通过这段代码，是可以看出来，Javascript 的事件循环，是在 JSContext 之外，事件循环相关知识，既不是 Javascript 引擎的一部分，也不是 Javascript 语言的一部分。\n- code 的传入方式\n\t- &lt;script&gt;&lt;/script&gt; 普通代码片段\n\t- &lt;script type=\"module\"&gt;&lt;/script&gt;\n\t- 函数\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    // TODO: calculate the square of arg x\n    NSString* code = @\"(function(x){ return x * x; })\";\n    \n    \n    // like: result = (function(x){ return x * x; })\n    result = [context evaluateScript:code];\n    \n    // passing the number 4 into the function\n    JSValue* arg1 = [JSValue valueWithInt32:4 inContext:context];\n    \n    // execute the function with arg of 4\n    NSLog(@\"%@\", [[result callWithArguments:@[arg1]] toString]);\n  \n  }\n  \n  return 0;\n\n}\n\n```\n\n- 上面的 Object-C 代码，可以看出来，我们是将一段一段的代码，传入 evaluateScript 中执行。\n\n\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\nint main(int argx, const char * argv[]) {\n  @autoreleasepool {\n    // var context = new JSContext\n    \n    \n    // define a javascript context\n    JSContext* context = [[JSContext alloc] init];\n    // like:var result = null;\n    JSValue* result;\n    \n    // TODO: calculate the square of arg x\n    NSString* code = @\"new Promise(resolve => resolve()).then(() => this.a = 3), function(){return this.a};\";\n        \n    result = [context evaluateScript:code];\n    \n    // like: result();\n    NSLog(@\"%@\", [[result callWithArguments:@[]] toString]);\n  \n  }\n  \n  return 0;\n\n}\n\n```\n\n- evaluateScript 实际上执行两步：\n\t1. 执行整个方法\n\t\t\n\t\t> new Promise(resolve => resolve()).then(() => this.a = 3), function(){return this.a};\n\t\n\t\t- 逗号表达式，永远返回后面的值，如果被调用，前面的会被执行\n\t2. 执行 Promise 中 then 后面的语句\n\t- ![evaluateScript](http://p0.meituan.net/myvideodistribute/81d945c99778450fd86a710f20355cbc269796.png)\n\t- 有 then ,可能产生一个宏任务里面有多个微任务的情况， 一切JS 代码都是微任务中执行的\n\t- 拿浏览器举例：setTimeout、setInterval 这种其实不是 JS 语法本身的 API，是 JS 的宿主浏览器提供的 API， 所以是宏任务。\n\t- 而 Promise 是 JS 本身自带的 API，这种就是微任务。\n- 总结：**宿主提供的方法是宏任务，JS 自带的是微任务**\n- **任务列表列里面有很多宏任务，然后每个宏任务里面有一个微任务列表，每个宏任务执行下一个宏任务之前会把自己内部的微任务执行完**\n- **宏任务**包括：script 、setTimeout、setInterval 、setImmediate 、I/O 、UI rendering。\n- **微任务**包括：MutationObserver、Promise.then()或catch()、Promise为基础开发的其它技术，比如fetch API、V8的垃圾回收过程、Node独有的process.nextTick。\n\t\t\n\n\n# Javascript 结构化程序设计基础设施\n\n- \n\n\n## 实践记录\n### 基础题\n\n1.1 题目一\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n})\nconsole.log('1', promise1);\n```\n\n- 分析：\n\t- 从上至下，先执行 new Promise，执行该构造函数中 console.log('promise1')\n\t\n\t> console.log('1', promise1);\n\t\n\t- 再执行同步代码\n\t- 执行完后， promise1 中并没有 resolved, rejected， 一直处在 pending 的状态\n\n- 运行结果\n\t- ![题目一执行](http://p0.meituan.net/myvideodistribute/f45e1dbe45d84e46ab2fd24703cad0c521137.png)\n\n1.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- resolve('success') 将 promise 中的状态更改为 resolved，并保存下来\n\t\t- console.log(2);\n\t- promise.then 入队微任务队列\n\t- 再执行当前宏任务中的同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，且 promise 为resolved，执行 promise.then\n\t\t- console.log(3);\n\n- 运行结果\n\t- ![题目二执行](http://p0.meituan.net/myvideodistribute/c31fd6e9ba9c9f9ac4062d6b395706f230745.png)\n\n1.3 题目三\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- console.log(2);\n\t\t- 该 promise 没有 resolved, rejected, 一直处在 pending\n\t- promise.then 入队微任务队列\n\t- 再执行当前宏任务中的同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，但 promise 为pending，不可能执行 promise.then 中方法\n\n- 运行结果\n\t- ![题目三执行](http://p0.meituan.net/myvideodistribute/b6e827ca293c65c261a83a81f1f5411227105.png)\n\n1.4 题目四\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log('promise1')\n\t\t- resolve('resolve1') 将 promise 中的状态更改为 resolved，并保存下来\n\t- promise1.then 入队微任务队列\n\t- promise2 是一个新状态为 pending 的 Promise\n\t- 执行同步代码\n\t\t- console.log('1', promise1);\n\t\t\t- promise1 中状态在上面已经更改为 resolved\n\t\t- console.log('2', promise2);\n\t\t\t- promise2 中状态为pending\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then \n\t\t- console.log(res) \n\t\t\t- 其中 promise1.then， promise1 的状态为 resolved\n\n- 运行结果\n\t- ![题目四运行结果](http://p0.meituan.net/myvideodistribute/f31e7f8db309521b5252143252eaed2551272.png)\n\n\n1.5 题目五\n\n```javascript\nconst fn = () => (new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n}))\nfn().then(res => {\n  console.log(res)\n})\nconsole.log('start')\n```\n\n- 分析\n\t- 从上至下，const fn = () => (Promise Object) 返回一个 promise 对象\n\t- fn()，执行 fn 方法\n\t\t- console.log(1);\n\t\t- resolve('success') 将 promise 中的状态更改为 resolved，并保存下来\n\t- Function.then 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then\n\t\t- console.log(res) 其中 promise 的状态为 resolved\n\n- 运行结果\n\t- ![题目五运行结果](http://p1.meituan.net/myvideodistribute/955895672615c24a4eb671617d8b739829033.png)\n\n\n1.6 题目六\n\n```javascript\nconst fn = () =>\n  new Promise((resolve, reject) => {\n    console.log(1);\n    resolve(\"success\");\n  });\nconsole.log(\"start\");\nfn().then(res => {\n  console.log(res);\n});\n```\n\n- 分析\n\t- 从上至下，const fn = () => (Promise Object) 返回一个 promise 对象\n\t- 执行同步代码\n\t\t-  console.log(\"start\");\n\t- fn(), 执行 fn 方法\n\t\t- console.log(1);\n\t\t- resolve(\"success\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t- Function.then 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then\n\t\t- console.log(res); 其中 promise 的状态为 resolved\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/ccd1a9148be91f5aa24847a0d4e23dfb31837.png)\n\n### Promise 结合 setTimeout\n\n2.1 题目一\n\n```javascript\nconsole.log('start')\nsetTimeout(() => {\n  console.log('time')\n})\nPromise.resolve().then(() => {\n  console.log('resolve')\n})\nconsole.log('end')\n```\n\n- 分析\n\t- 从上至下，先执行同步代码\n\t\t- console.log('start')\n\t- setTimeout ... 入队宏任务队列\n\t- Promise.resolve().then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('end')\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Promise.resolve().then\n\t\t- console.log('resolve')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t\t- console.log('time')\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/4a9c74ab2a26cc16e55ce53f6fb765d630133.png)\n\n2.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  setTimeout(() => {\n    console.log(\"timerStart\");\n    resolve(\"success\");\n    console.log(\"timerEnd\");\n  }, 0);\n  console.log(2);\n});\npromise.then((res) => {\n  console.log(res);\n});\nconsole.log(4);\n```\n\n- 分析\n\t- 从上至下，先执行 new Promise，执行该构造函数中\n\t\t- console.log(1);\n\t\t- setTimeout ... 入队宏任务队列\n\t\t- console.log(2);\n\t- promise.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(4);\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 其中 promise 中，并没有 resolved、rejected，一直在 pending，不可能执行 promise.then 中方法\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 第二个宏任务 setTimeout 代码从上至下执行\n\t- 执行同步代码\n\t\t- console.log(\"timerStart\");\n\t\t- resolve(\"success\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t\t- console.log(\"timerEnd\");\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/66ea5bbd68d0841ad58cac5ca771625347414.png)\n\n\t\n2.3 题目三\n\n```javascript\nsetTimeout(() => {\n  console.log('timer1');\n  setTimeout(() => {\n    console.log('timer3')\n  }, 0)\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```\n\n- 分析\n\t- 从上执行\n\t- setTimeout ... 加入宏任务队列\n\t- setTimeout ... 加入宏任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码 \n\t\t- console.log('timer1');\n\t- setTimeout ... 加入宏任务队列\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('timer2')\n\t- 第三个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('timer3')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/b5ab6578c5ba7d8d727a3bf47ba8879033812.png)\n\n```javascript\nsetTimeout(() => {\n  console.log('timer1');\n  Promise.resolve().then(() => {\n    console.log('promise')\n  })\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- setTimeout ... 加入宏任务队列\n\t- setTimeout ... 加入宏任务队列\n\t- 执行同步代码\n\t\t- console.log('start')\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer1');\n\t\t- Promise.resolve().then ... 入队微任务队列\n\t\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t\t\t- console.log('promise')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer2')\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/f65f2aa65848d2e8aaf5c3918509c6e934427.png)\n\n\n2.4 题目四\n\n```javascript\nPromise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n});\nconst timer1 = setTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(() => {\n    console.log('promise2')\n  })\n}, 0)\nconsole.log('start');\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.resolve().then ... 入队微任务队列\n\t- setTimeout ... 入队宏任务队列\n\t- 执行同步代码\n\t- console.log('start');\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t- 执行同步代码\n\t- console.log('promise1');\n\t- setTimeout ... 入队宏任务队列\n\t- 第一个宏任务执行完了，开始执行下一个宏任务 setTimeout ...\n\t- console.log('timer2')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t- console.log('timer1')\n\t- Promise.resolve().then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列\n\t- console.log('promise2')\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- console.log('timer2')\n\n- 运行结果\n\t- ![题目四运行结果](http://p1.meituan.net/myvideodistribute/60a22379f31bb12de055ed83a31aca0b46969.png)\n\n2.5 题目五 ** 存在和之前一样的，promise resolved 后，状态上抛至上一个 宏任务队列的问题\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconst promise2 = promise1.then(() => {\n  throw new Error('error!!!')\n})\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => {\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n}, 2000)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- 先执行 new Promise，执行该构造函数中\n\t- setTimout ... 入队宏任务队列\n\t- promise1.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log('promise1', promise1)\n\t\t\t- 其中 promise1 没有 resolved、rejected,一直处在 pending 状态\n\t\t\t- promise1 Promise {\\<pending\\>}\n\t\t- console.log('promise2', promise2)\n\t\t\t- 其中 promise1 一直处在 pending 状态，直接影响到 promise2 也一直处在 pending 状态\n\t\t\t- promise2 Promise {\\<pending\\>}\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- 由于 promise1 仍处于 pending 状态，不可能执行 promise1.then ...\n\t- 第一个宏任务执行完了，开始执行下一个宏任务\n\t- resolve('success') 将 promise1 中的状态更改为 resolved，并保存下来\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t- 执行同步代码\n\t\t- console.log('promise1', promise1)\n\t\t\t- 其中 promise1 处在 resolved 状态\n\t\t\t- promise1 Promise {\\<resolved\\>: \"success\"}\n\t\t- console.log('promise2', promise2)\n\t\t\t- promise2 Promise {\\<rejected\\>: Error: error!!! at \\<anonymous\\>:8:9}\n\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/3ad654d66c66c648a058adf29154d879107368.png)\n\n\n2.6 题目六\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"success\");\n    console.log(\"timer1\");\n  }, 1000);\n  console.log(\"promise1里的内容\");\n});\nconst promise2 = promise1.then(() => {\n  throw new Error(\"error!!!\");\n});\nconsole.log(\"promise1\", promise1);\nconsole.log(\"promise2\", promise2);\nsetTimeout(() => {\n  console.log(\"timer2\");\n  console.log(\"promise1\", promise1);\n  console.log(\"promise2\", promise2);\n}, 2000);\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t- setTimeout 入队宏任务队列\n\t- 执行同步代码\n\t\t- console.log(\"promise1里的内容\");\n\t- promise1.then ... 入队微任务队列\n\t- 执行同步代码\n\t\t- console.log(\"promise1\", promise1);\n\t\t\t- 其中 promise1 没有 resolved、rejected 掉，一直处在 pending 状态\n\t\t\t\t- promise1 Promise {\\<pending\\>}\n\t\t- console.log(\"promise2\", promise2);\n\t\t\t- primise1 的 pending 状态，直接影响 promise2 也处在 pending 状态\n\t\t\t\t- promise2 Promise {\\<pending\\>}\n\t- setTimeout ... 入队宏任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- 由于 promise1 仍处于 pending 状态，不可能执行 promise1.then ...\n\t- 第一个宏任务执行完了，开始执行第二个宏任务\n\t- resolve(\"success\"); 将 promise1 中的状态更改为 resolved，并保存下来\n\t- 执行同步代码\n\t\t- console.log(\"timer1\");\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then ...\n\t\t- throw new Error(\"error!!!\");\n\t- 第二个宏任务执行完了，开始执行下一个宏任务\n\t\t- 执行同步代码\n\t\t\t- console.log(\"timer2\");\n\t\t\t- console.log(\"promise1\", promise1);\n\t\t\t\t- 其中 promise1 的状态已经 resloved\n\t\t\t\t- promise1 Promise {\\<resolved\\>: \"success\"}\n\t\t\t- console.log(\"promise2\", promise2);\n\t\t\t\t- promise2 Promise {\\<rejected\\>: Error: error!!! at \\<anonymous\\>:8:9}\n\n- 运行结果\n\t- ![题目六运行结果](http://p1.meituan.net/myvideodistribute/88a197ec5863fcca93b072d3baecf6a0113849.png)\n\n\n### Promise 中的 then、catch、finally\n\n3.1 题目一\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  resolve(\"success1\");\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t\t- resolve(\"success1\"); 将 promise 中的状态更改为 resolved，并保存下来\n\t- promise.then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t\t- console then:  success1\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/448d9fb1db29ba7e76762f97a9508d1e35386.png)\n- 结论\n\t- **Promise的状态一经改变就不能再改变**\n\t- **构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用**。\n\n\n3.2 题目二\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then1: \", res);\n  }).then(res => {\n    console.log(\"then2: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  }).then(res => {\n    console.log(\"then3: \", res);\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t\t- reject(\"error\"); 将 promise 中的状态更改为 rejected，并保存下来\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t- 由于 promise 状态为 rejected，因此触发 catch ，不管 catch 连接到哪，都能捕获上层未捕捉过的错误\n\t\t- console.log(\"catch: \", err);\n\t\t- return a new promise\n\t- 由于 新的 promise 没有返回值，因此返回 undefined\n\n- 结论\n\t- **catch不管被连接到哪里，都能捕获上层未捕捉过的错误**\n\t- 至于 then3 也会被执行，那是因为**catch()也会返回一个 Promise **，且由于这个 Promise 没有返回值，所以打印出来的是 undefined 。\n\n- 运行结果\n\t- ![题目二运行结果](http://p0.meituan.net/myvideodistribute/8523408bd03cb268237e720380e1273d47036.png)\n\n\t\n3.3 题目三\n\n```javascript\nPromise.resolve(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    return 3;\n  })\n  .then(res => {\n    console.log(res);\n  });\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态为 resolved, 因此触发 then\n\t\t- console.log(res); res --> 1\n\t- 没有报错，略过 catch\n\t- 被 then 捕捉\n\t\t- console.log(2); 返回新的 promise， promise 返回 resolve(2)\n\n- 结论\n\t- **Promise 可以链式调用**，不过 promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样 return this。\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/2ca378bb1952c6fbacc3028024b1b89027624.png)\n\n\n3.4 题目四\n\n```javascript\nPromise.reject(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    console.log(err);\n    return 3\n  })\n  .then(res => {\n    console.log(res);\n  });\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态为 rejected，因此触发 catch\n\t\t- console.log(err); err --> 1\n\t\t- return resolve(3)\n\t- 被 then 捕捉\n\t\t- console.log(3) \n\n- 运行结果\n\t- ![题目四运行结果](http://p0.meituan.net/myvideodistribute/ed821dfd96ad96250140abdedf581fd930226.png)\n\n\n3.5 题目五\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('timer')\n    resolve('success')\n  }, 1000)\n})\nconst start = Date.now();\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行，先执行 new Promise，执行该构造函数\n\t- setTimeout ... 入队宏任务队列\n\t- promise.then ... 入队微任务队列\n\t- promise.then ... 入队微任务队列\n\t- 当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then ...\n\t- 因为 promise 状态并没有 resolved、rejected，一直处在 pending，并不能调用 then 方法\n\t- 同上\n\t- 第一个宏任务执行完成，开始执行第二个宏任务 setTimeout ...\n\t- 执行同步代码\n\t\t- console.log('timer')\n\t\t- promise 状态更改为 resolved，并保存下来\n\t\t\t- 状态往上抛\n\t\t\t- console.log(res, Date.now() - start)\n\t\t\t- console.log(res, Date.now() - start))\n\n- 结论\n\t- **Promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。**\n- 运行结果\n\t- ![题目五运行结果](http://p0.meituan.net/myvideodistribute/9ee74ca562f7c913d51c9fd5fe60680543896.png)\n\n3.6 题目六\n\n```javascript\nPromise.resolve().then(() => {\n  return new Error('error!!!')\n}).then(res => {\n  console.log(\"then: \", res)\n}).catch(err => {\n  console.log(\"catch: \", err)\n})\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态更改为 resolve，并无返回值\n\t- 执行 then\n\t\t- throw new Error('error!!!')\n\t\t- return Promise.reject(new Error('error!!!'))\n\t- 被 catch 捕捉\n\t\t- console.log(\"catch: \", err) err --> error\n\n- 运行结果\n\t- ![题目六运行结果](http://p0.meituan.net/myvideodistribute/a1cb4e4f5e5ec95e2215d5b7ecc6a32428525.png)\n\t\n\t\n3.7 题目七\n\n```javascript\nconst promise = Promise.resolve().then(() => {\n  return promise;\n})\npromise.catch(console.err)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 resolve ，并无返回值\n\t- 执行 then\n\t\t- return Promise.resolve(promise)\n\t\t- Chaining cycle detected for promise\n\t- 执行同步代码\n\t\t- promise.catch promise cycle\n\n- 运行结果\n\t- ![题目七运行结果](http://p0.meituan.net/myvideodistribute/70dbed986bad1d410ad7be3de8fe963d21008.png)\n\n\t\n3.8 题目八\n\n```javascript\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 resolve， return Promise.resolve(1)\n\t- .then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传\n\t- 第一个then和第二个then中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将resolve(1) 的值直接传到最后一个then里\n\n- 结论\n\t- **.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传**\n\n- 运行结果\n\t- ![题目八运行结果](http://p1.meituan.net/myvideodistribute/68c56ed26f2845300ecba0dc6dc7a3e914382.png)\n\n\n3.9 题目九\n\n```javascript\nPromise.reject('err!!!')\n  .then((res) => {\n    console.log('success', res)\n  }, (err) => {\n    console.log('error', err)\n  }).catch(err => {\n    console.log('catch', err)\n  })\n```\n\n- 我们可以先来看看，如果 catch 住了错误，err 会一直链式传递下去被 catch嘛\n- ![是否会被一直catch](http://p1.meituan.net/myvideodistribute/f9859062c1341e2e575f952e320aba4222620.png)\n\t- 一旦 catch 住当前报错，当前报错并不会再往下传递\n- ![逐行调用catch是会一直传递下去的](http://p1.meituan.net/myvideodistribute/9846287852a98f322045973bf302c58f24992.png)\n\t- 逐行调用 then 是会一直传递下去的\n- 那我还可以看看，如果没有错误，res 会一直链式传递 then 执行嘛\n- ![是否会被一直then](http://p1.meituan.net/myvideodistribute/e2e72158c05ceee7da7528ff9a20348426425.png)\n\t- 可以看出 then 是会一直往下传递的\n- ![逐行调用then 是会一直传递下去的](http://p0.meituan.net/myvideodistribute/abb8ccf3daffdd023ce079c86cafdfd626377.png)\n\t- 逐行调用 then 是会一直传递下去的\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态改变为 rejected，return 'err!!!'\n\t- 执行 then，then 中第二个函数，相当于 catch\n\t- 因此执行\n\t- console.log('error', err) err --> err!!!\n\n- 运行结果\n\t- ![题目九运行结果](http://p0.meituan.net/myvideodistribute/05e3b86caaf2b9cbf0c6326020e3385327546.png)\n\n\n```javascript\nPromise.resolve()\n  .then(function success (res) {\n    throw new Error('error!!!')\n  }, function fail1 (err) {\n    console.log('fail1', err)\n  }).catch(function fail2 (err) {\n    console.log('fail2', err)\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态变为 resolve，\n\t- 执行 then\n\t\t- throw new Error('error!!!')\n\t- 被 catch \n\t\t- console.log('fail2', err) err --> error!!!\n\n- 运行结果\n\t- ![运行结果](http://p0.meituan.net/myvideodistribute/c8643d8fb0fd251145befd28d635ed7e33265.png)\n\n3.10 题目十\n\n```javascript\nPromise.resolve('1')\n  .then(res => {\n    console.log(res)\n  })\n  .finally(() => {\n    console.log('finally')\n  })\nPromise.resolve('2')\n  .finally(() => {\n    console.log('finally2')\n  \treturn '我是finally2返回的值'\n  })\n  .then(res => {\n    console.log('finally2后面的then函数', res)\n  })\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- promise 状态变为 resolve，return 1\n\t- 执行 then\n\t\t- console.log(res) res --> return new Promise， resolve(1) 加入微任务队列\n\t- promise 状态变为 resolve, return 2\n\t\t- 执行 finally\n\t\t\t- console.log('finally2')\n\t\t\t- return new Promise， resolve('我是finally2返回的值') 加入微任务队列\n\t- 当前同步代码执行完成，开始还行微任务队列\n\t\t- console.log('finally')\n\t\t- console.log('finally2后面的then函数', res) res --> 2\n\n- 结论\n\t- .finally()方法不管Promise对象最后的状态如何都会执行\n\t- .finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道Promise最终的状态是resolved还是rejected的\n\t- 它最终返回的默认会是一个**上一次的Promise对象值**，不过如果抛出的是一个异常则返回异常的Promise对象。\n\t- **promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用** \n\t\t\n\t\n- 运行结果\n\t- ![题目十运行结果](http://p0.meituan.net/myvideodistribute/99d8936b8c5029a6786b464868666f7d47917.png)\n\n\t\n### Promise 中的 all 和 race\n\n- Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。\n- Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。\n\n\n4.1 题目一\n\n```javascript\nfunction runAsync (x) {\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n}\nPromise.all([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(res))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.all 入队微任务队列\n\t- 当前同步代码执行完成，开始执行微任务队列\n\t\t- 间隔一秒后，控制台会同时打印出1, 2, 3，还有一个数组[1, 2, 3]\n- 结论\n\t- **有了all，就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据**\n\t- .all()后面的.then()里的回调函数接收的就是所有异步操作的结果。\n\t- 而且这个结果中数组的顺序和Promise.all()接收到的数组顺序一致\n\n- 运行结果\n\t- ![题目一运行结果](http://p0.meituan.net/myvideodistribute/d3a6d5f4f158de806b690af124fcec9431029.png)\n\n\t\n4.2 题目二\n\n```javascript\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nfunction runReject (x) {\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n  return p\n}\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n  .then(res => console.log(res))\n  .catch(err => console.log(err))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.all 入队微任务队列\n\t- 当前同步代码执行完成，开始执行微任务队列\n\t\t- 间隔一秒后，控制台会同时打印出 1, 3\n\t- 由于 runReject(4) 比 runReject(2) 晚入微任务队列，且 catch 只执行一次\n\t\t- 再间隔一秒后\n\t\t\t- console.log(x) x --> 2\n\t\t\t- console.log('Error: 2')\n\t\t- 再间隔2秒后\n\t\t\t- console.log(x) x --> 4\n\t\t\t- 不会再执行 catch\n\n- 运行结果\n\t- ![题目二运行结果](http://p1.meituan.net/myvideodistribute/e0e25426dc0d49c3af9acee68744760d51135.png)\n\n- 等同于\n\t\n\t```javascript\n\tfunction runAsync (x) {\n\t  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n\t  return p\n\t}\n\tfunction runReject (x) {\n\t  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n\t  return p\n\t}\n\tPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n\t  .then(res => console.log(res), \n\t  err => console.log(err);\n\t```\n- 结论\n\t- all 和 race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被 then 的第二个参数或者后面的 catch 捕获；但并不会影响数组中其它的异步任务的执行。\n\n4.3 题目三\n\n```javascript\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log('result: ', res))\n  .catch(err => console.log(err))\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.race 入队微任务队列\n\t- 当前宏任务中同步任务执行完成，开始执行微任务\n\t- 在间隔时间都一样的情况下，runAsync1 最先加入队列\n\t- 因此\n\t\t- console.log(x) x --> 1\n\t- 由于 race 的特殊性，只捕捉最先执行完成的那个结果\n\t\t- console.log('result: ', res) res --> 1\n\t- 再\n\t\t- console.log(x) x --> 2\n\t\t- console.log(x) x --> 3\n\t- 没有报错，不会被 catch\n\n- 运行结果\n\t- ![题目三运行结果](http://p0.meituan.net/myvideodistribute/2eda438cd745e39ba934af362a80521038770.png)\n\n4.4 题目四\n\n```javascript\nfunction runAsync(x) {\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n}\nfunction runReject(x) {\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\n  );\n  return p;\n}\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(\"result: \", res))\n  .catch(err => console.log(err));\n```\n\n- 分析\n\t- 代码从上至下开始执行\n\t- Promise.race 入队微任务队列\n\t- 当前宏任务中同步任务执行完成，开始执行微任务\n\t- runReject(0) 最先传入\n\t- 因此\n\t\t- console.log(x) x --> 0\n\t\t- console.log(err) err --> Error: 0\n\t- 间隔小于1秒后\n\t- runAsync(1), runAsync(2), runAsync(3)\n\t\t- 依次为\n\t\t- console.log(x) x --> 1\n\t\t- console.log(x) x --> 2\n\t\t- console.log(x) x --> 3\n\n- 运行结果\n\t- ![题目四](http://p1.meituan.net/myvideodistribute/89acbf32e7218b90c050526171bd1b3d53719.png)\n\n\n\n\n\t\n## 参考文献\n- [题目来源](https://juejin.im/post/5e58c618e51d4526ed66b5cf)\n\n\n\n## 写在后面\n- 祝大家多多发财","slug":"Javascript-运行机制","published":1,"updated":"2020-05-12T09:08:33.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw7l1xp003l1wp3ftwh01cd","content":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>五一假期，来写一写 Promise 的题吧，嘿嘿嘿 😃</li>\n<li>五一倒计时 3 天</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(true) &#123;</span><br><span class=\"line\">      char sourcecode[1024];</span><br><span class=\"line\">      </span><br><span class=\"line\">      scanf(&#39;%s&#39;, &amp;sourcecode);</span><br><span class=\"line\">      NSString* code &#x3D; [NSString stringWithUTF8String: sourcecode];</span><br><span class=\"line\">      </span><br><span class=\"line\">      result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">      </span><br><span class=\"line\">      NSLog(@&quot;%@&quot;, [result toString]);</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如上实现一个简单的事件循环，用来输出 console</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/a99619da1cded49f443ded2fc219b27432778.png\" alt=\"OC 方法\"></li>\n<li>我们在 Javascript 中讲的微任务队列、宏任务队列，是 Javascript 调用方去使用 Javascript 的一种方式，如果仅是执行一段代码，是不需要事件循环的。通过这段代码，是可以看出来，Javascript 的事件循环，是在 JSContext 之外，事件循环相关知识，既不是 Javascript 引擎的一部分，也不是 Javascript 语言的一部分。</li>\n<li>code 的传入方式<ul>\n<li>&lt;script&gt;&lt;/script&gt; 普通代码片段</li>\n<li>&lt;script type=”module”&gt;&lt;/script&gt;</li>\n<li>函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; TODO: calculate the square of arg x</span><br><span class=\"line\">    NSString* code &#x3D; @&quot;(function(x)&#123; return x * x; &#125;)&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; like: result &#x3D; (function(x)&#123; return x * x; &#125;)</span><br><span class=\"line\">    result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; passing the number 4 into the function</span><br><span class=\"line\">    JSValue* arg1 &#x3D; [JSValue valueWithInt32:4 inContext:context];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; execute the function with arg of 4</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, [[result callWithArguments:@[arg1]] toString]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的 Object-C 代码，可以看出来，我们是将一段一段的代码，传入 evaluateScript 中执行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; TODO: calculate the square of arg x</span><br><span class=\"line\">    NSString* code &#x3D; @&quot;new Promise(resolve &#x3D;&gt; resolve()).then(() &#x3D;&gt; this.a &#x3D; 3), function()&#123;return this.a&#125;;&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">    result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; like: result();</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, [[result callWithArguments:@[]] toString]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>evaluateScript 实际上执行两步：</p>\n<ol>\n<li><p>执行整个方法</p>\n<blockquote>\n<p>new Promise(resolve =&gt; resolve()).then(() =&gt; this.a = 3), function(){return this.a};</p>\n</blockquote>\n<ul>\n<li>逗号表达式，永远返回后面的值，如果被调用，前面的会被执行</li>\n</ul>\n</li>\n<li><p>执行 Promise 中 then 后面的语句</p>\n</li>\n</ol>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/81d945c99778450fd86a710f20355cbc269796.png\" alt=\"evaluateScript\"></li>\n<li>有 then ,可能产生一个宏任务里面有多个微任务的情况， 一切JS 代码都是微任务中执行的</li>\n<li>拿浏览器举例：setTimeout、setInterval 这种其实不是 JS 语法本身的 API，是 JS 的宿主浏览器提供的 API， 所以是宏任务。</li>\n<li>而 Promise 是 JS 本身自带的 API，这种就是微任务。</li>\n</ul>\n</li>\n<li><p>总结：<strong>宿主提供的方法是宏任务，JS 自带的是微任务</strong></p>\n</li>\n<li><p><strong>任务列表列里面有很多宏任务，然后每个宏任务里面有一个微任务列表，每个宏任务执行下一个宏任务之前会把自己内部的微任务执行完</strong></p>\n</li>\n<li><p><strong>宏任务</strong>包括：script 、setTimeout、setInterval 、setImmediate 、I/O 、UI rendering。</p>\n</li>\n<li><p><strong>微任务</strong>包括：MutationObserver、Promise.then()或catch()、Promise为基础开发的其它技术，比如fetch API、V8的垃圾回收过程、Node独有的process.nextTick。</p>\n</li>\n</ul>\n<h1 id=\"Javascript-结构化程序设计基础设施\"><a href=\"#Javascript-结构化程序设计基础设施\" class=\"headerlink\" title=\"Javascript 结构化程序设计基础设施\"></a>Javascript 结构化程序设计基础设施</h1><ul>\n<li></li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"基础题\"><a href=\"#基础题\" class=\"headerlink\" title=\"基础题\"></a>基础题</h3><p>1.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, promise1);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析：</p>\n<ul>\n<li><p>从上至下，先执行 new Promise，执行该构造函数中 console.log(‘promise1’)</p>\n<blockquote>\n<p>console.log(‘1’, promise1);</p>\n</blockquote>\n</li>\n<li><p>再执行同步代码</p>\n</li>\n<li><p>执行完后， promise1 中并没有 resolved, rejected， 一直处在 pending 的状态</p>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f45e1dbe45d84e46ab2fd24703cad0c521137.png\" alt=\"题目一执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>resolve(‘success’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n<li>console.log(2);</li>\n</ul>\n</li>\n<li>promise.then 入队微任务队列</li>\n<li>再执行当前宏任务中的同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，且 promise 为resolved，执行 promise.then<ul>\n<li>console.log(3);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c31fd6e9ba9c9f9ac4062d6b395706f230745.png\" alt=\"题目二执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>console.log(2);</li>\n<li>该 promise 没有 resolved, rejected, 一直处在 pending</li>\n</ul>\n</li>\n<li>promise.then 入队微任务队列</li>\n<li>再执行当前宏任务中的同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，但 promise 为pending，不可能执行 promise.then 中方法</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b6e827ca293c65c261a83a81f1f5411227105.png\" alt=\"题目三执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  resolve(<span class=\"string\">'resolve1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, promise1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>, promise2);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(‘promise1’)</li>\n<li>resolve(‘resolve1’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>promise1.then 入队微任务队列</li>\n<li>promise2 是一个新状态为 pending 的 Promise</li>\n<li>执行同步代码<ul>\n<li>console.log(‘1’, promise1);<ul>\n<li>promise1 中状态在上面已经更改为 resolved</li>\n</ul>\n</li>\n<li>console.log(‘2’, promise2);<ul>\n<li>promise2 中状态为pending</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then <ul>\n<li>console.log(res) <ul>\n<li>其中 promise1.then， promise1 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f31e7f8db309521b5252143252eaed2551272.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>1.5 题目五</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，const fn = () =&gt; (Promise Object) 返回一个 promise 对象</li>\n<li>fn()，执行 fn 方法<ul>\n<li>console.log(1);</li>\n<li>resolve(‘success’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>Function.then 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then<ul>\n<li>console.log(res) 其中 promise 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/955895672615c24a4eb671617d8b739829033.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>1.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，const fn = () =&gt; (Promise Object) 返回一个 promise 对象</li>\n<li>执行同步代码<ul>\n<li>console.log(“start”);</li>\n</ul>\n</li>\n<li>fn(), 执行 fn 方法<ul>\n<li>console.log(1);</li>\n<li>resolve(“success”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>Function.then 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then<ul>\n<li>console.log(res); 其中 promise 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ccd1a9148be91f5aa24847a0d4e23dfb31837.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-结合-setTimeout\"><a href=\"#Promise-结合-setTimeout\" class=\"headerlink\" title=\"Promise 结合 setTimeout\"></a>Promise 结合 setTimeout</h3><p>2.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘end’)</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Promise.resolve().then<ul>\n<li>console.log(‘resolve’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …<ul>\n<li>console.log(‘time’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4a9c74ab2a26cc16e55ce53f6fb765d630133.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timerStart\"</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timerEnd\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(2);</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 其中 promise 中，并没有 resolved、rejected，一直在 pending，不可能执行 promise.then 中方法</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>第二个宏任务 setTimeout 代码从上至下执行</li>\n<li>执行同步代码<ul>\n<li>console.log(“timerStart”);</li>\n<li>resolve(“success”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n<li>console.log(“timerEnd”);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/66ea5bbd68d0841ad58cac5ca771625347414.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer3'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上执行</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码 <ul>\n<li>console.log(‘timer1’);</li>\n</ul>\n</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li>第三个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer3’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b5ab6578c5ba7d8d727a3bf47ba8879033812.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer1’);</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列<ul>\n<li>console.log(‘promise’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f65f2aa65848d2e8aaf5c3918509c6e934427.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timer2 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer1 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>执行同步代码</li>\n<li>console.log(‘start’);</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列</li>\n<li>执行同步代码</li>\n<li>console.log(‘promise1’);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>console.log(‘timer2’)</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码</li>\n<li>console.log(‘timer1’)</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列</li>\n<li>console.log(‘promise2’)</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/60a22379f31bb12de055ed83a31aca0b46969.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.5 题目五 ** 存在和之前一样的，promise resolved 后，状态上抛至上一个 宏任务队列的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>先执行 new Promise，执行该构造函数中</li>\n<li>setTimout … 入队宏任务队列</li>\n<li>promise1.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘promise1’, promise1)<ul>\n<li>其中 promise1 没有 resolved、rejected,一直处在 pending 状态</li>\n<li>promise1 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n<li>console.log(‘promise2’, promise2)<ul>\n<li>其中 promise1 一直处在 pending 状态，直接影响到 promise2 也一直处在 pending 状态</li>\n<li>promise2 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>由于 promise1 仍处于 pending 状态，不可能执行 promise1.then …</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务</li>\n<li>resolve(‘success’) 将 promise1 中的状态更改为 resolved，并保存下来</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘promise1’, promise1)<ul>\n<li>其中 promise1 处在 resolved 状态</li>\n<li>promise1 Promise {&lt;resolved&gt;: “success”}</li>\n</ul>\n</li>\n<li>console.log(‘promise2’, promise2)<ul>\n<li>promise2 Promise {&lt;rejected&gt;: Error: error!!! at &lt;anonymous&gt;:8:9}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ad654d66c66c648a058adf29154d879107368.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timer1\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1里的内容\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"error!!!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>, promise1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>, promise2);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timer2\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>, promise1);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>, promise2);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数</li>\n<li>setTimeout 入队宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(“promise1里的内容”);</li>\n</ul>\n</li>\n<li>promise1.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(“promise1”, promise1);<ul>\n<li>其中 promise1 没有 resolved、rejected 掉，一直处在 pending 状态<ul>\n<li>promise1 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>console.log(“promise2”, promise2);<ul>\n<li>primise1 的 pending 状态，直接影响 promise2 也处在 pending 状态<ul>\n<li>promise2 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>由于 promise1 仍处于 pending 状态，不可能执行 promise1.then …</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行第二个宏任务</li>\n<li>resolve(“success”); 将 promise1 中的状态更改为 resolved，并保存下来</li>\n<li>执行同步代码<ul>\n<li>console.log(“timer1”);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>throw new Error(“error!!!”);</li>\n</ul>\n</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务<ul>\n<li>执行同步代码<ul>\n<li>console.log(“timer2”);</li>\n<li>console.log(“promise1”, promise1);<ul>\n<li>其中 promise1 的状态已经 resloved</li>\n<li>promise1 Promise {&lt;resolved&gt;: “success”}</li>\n</ul>\n</li>\n<li>console.log(“promise2”, promise2);<ul>\n<li>promise2 Promise {&lt;rejected&gt;: Error: error!!! at &lt;anonymous&gt;:8:9}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/88a197ec5863fcca93b072d3baecf6a0113849.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-中的-then、catch、finally\"><a href=\"#Promise-中的-then、catch、finally\" class=\"headerlink\" title=\"Promise 中的 then、catch、finally\"></a>Promise 中的 then、catch、finally</h3><p>3.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success1\"</span>);</span><br><span class=\"line\">  reject(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then: \"</span>, res);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数<ul>\n<li>resolve(“success1”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …<ul>\n<li>console then:  success1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/448d9fb1db29ba7e76762f97a9508d1e35386.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise的状态一经改变就不能再改变</strong></li>\n<li><strong>构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>3.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then1: \"</span>, res);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then2: \"</span>, res);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then3: \"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数<ul>\n<li>reject(“error”); 将 promise 中的状态更改为 rejected，并保存下来</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …</li>\n<li>由于 promise 状态为 rejected，因此触发 catch ，不管 catch 连接到哪，都能捕获上层未捕捉过的错误<ul>\n<li>console.log(“catch: “, err);</li>\n<li>return a new promise</li>\n</ul>\n</li>\n<li>由于 新的 promise 没有返回值，因此返回 undefined</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>catch不管被连接到哪里，都能捕获上层未捕捉过的错误</strong></li>\n<li>至于 then3 也会被执行，那是因为*<em>catch()也会返回一个 Promise *</em>，且由于这个 Promise 没有返回值，所以打印出来的是 undefined 。</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/8523408bd03cb268237e720380e1273d47036.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态为 resolved, 因此触发 then<ul>\n<li>console.log(res); res –&gt; 1</li>\n</ul>\n</li>\n<li>没有报错，略过 catch</li>\n<li>被 then 捕捉<ul>\n<li>console.log(2); 返回新的 promise， promise 返回 resolve(2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise 可以链式调用</strong>，不过 promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样 return this。</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/2ca378bb1952c6fbacc3028024b1b89027624.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态为 rejected，因此触发 catch<ul>\n<li>console.log(err); err –&gt; 1</li>\n<li>return resolve(3)</li>\n</ul>\n</li>\n<li>被 then 捕捉<ul>\n<li>console.log(3) </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ed821dfd96ad96250140abdedf581fd930226.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.5 题目五</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>promise.then … 入队微任务队列</li>\n<li>promise.then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …</li>\n<li>因为 promise 状态并没有 resolved、rejected，一直处在 pending，并不能调用 then 方法</li>\n<li>同上</li>\n<li>第一个宏任务执行完成，开始执行第二个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer’)</li>\n<li>promise 状态更改为 resolved，并保存下来<ul>\n<li>状态往上抛</li>\n<li>console.log(res, Date.now() - start)</li>\n<li>console.log(res, Date.now() - start))</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。</strong></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/9ee74ca562f7c913d51c9fd5fe60680543896.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then: \"</span>, res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态更改为 resolve，并无返回值</li>\n<li>执行 then<ul>\n<li>throw new Error(‘error!!!’)</li>\n<li>return Promise.reject(new Error(‘error!!!’))</li>\n</ul>\n</li>\n<li>被 catch 捕捉<ul>\n<li>console.log(“catch: “, err) err –&gt; error</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a1cb4e4f5e5ec95e2215d5b7ecc6a32428525.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.7 题目七</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.catch(<span class=\"built_in\">console</span>.err)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 resolve ，并无返回值</li>\n<li>执行 then<ul>\n<li>return Promise.resolve(promise)</li>\n<li>Chaining cycle detected for promise</li>\n</ul>\n</li>\n<li>执行同步代码<ul>\n<li>promise.catch promise cycle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/70dbed986bad1d410ad7be3de8fe963d21008.png\" alt=\"题目七运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.8 题目八</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .then(<span class=\"built_in\">console</span>.log)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 resolve， return Promise.resolve(1)</li>\n<li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传</li>\n<li>第一个then和第二个then中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将resolve(1) 的值直接传到最后一个then里</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传</strong></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/68c56ed26f2845300ecba0dc6dc7a3e914382.png\" alt=\"题目八运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.9 题目九</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'err!!!'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, res)</span><br><span class=\"line\">  &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, err)</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我们可以先来看看，如果 catch 住了错误，err 会一直链式传递下去被 catch嘛</p>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/f9859062c1341e2e575f952e320aba4222620.png\" alt=\"是否会被一直catch\"></p>\n<ul>\n<li>一旦 catch 住当前报错，当前报错并不会再往下传递</li>\n</ul>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/9846287852a98f322045973bf302c58f24992.png\" alt=\"逐行调用catch是会一直传递下去的\"></p>\n<ul>\n<li>逐行调用 then 是会一直传递下去的</li>\n</ul>\n</li>\n<li><p>那我还可以看看，如果没有错误，res 会一直链式传递 then 执行嘛</p>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/e2e72158c05ceee7da7528ff9a20348426425.png\" alt=\"是否会被一直then\"></p>\n<ul>\n<li>可以看出 then 是会一直往下传递的</li>\n</ul>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/abb8ccf3daffdd023ce079c86cafdfd626377.png\" alt=\"逐行调用then 是会一直传递下去的\"></p>\n<ul>\n<li>逐行调用 then 是会一直传递下去的</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 rejected，return ‘err!!!’</li>\n<li>执行 then，then 中第二个函数，相当于 catch</li>\n<li>因此执行</li>\n<li>console.log(‘error’, err) err –&gt; err!!!</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/05e3b86caaf2b9cbf0c6326020e3385327546.png\" alt=\"题目九运行结果\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail1</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail1'</span>, err)</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail2</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail2'</span>, err)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态变为 resolve，</li>\n<li>执行 then<ul>\n<li>throw new Error(‘error!!!’)</li>\n</ul>\n</li>\n<li>被 catch <ul>\n<li>console.log(‘fail2’, err) err –&gt; error!!!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c8643d8fb0fd251145befd28d635ed7e33265.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.10 题目十</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally2'</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"string\">'我是finally2返回的值'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally2后面的then函数'</span>, res)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态变为 resolve，return 1</li>\n<li>执行 then<ul>\n<li>console.log(res) res –&gt; return new Promise， resolve(1) 加入微任务队列</li>\n</ul>\n</li>\n<li>promise 状态变为 resolve, return 2<ul>\n<li>执行 finally<ul>\n<li>console.log(‘finally2’)</li>\n<li>return new Promise， resolve(‘我是finally2返回的值’) 加入微任务队列</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当前同步代码执行完成，开始还行微任务队列<ul>\n<li>console.log(‘finally’)</li>\n<li>console.log(‘finally2后面的then函数’, res) res –&gt; 2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>.finally()方法不管Promise对象最后的状态如何都会执行</li>\n<li>.finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道Promise最终的状态是resolved还是rejected的</li>\n<li>它最终返回的默认会是一个<strong>上一次的Promise对象值</strong>，不过如果抛出的是一个异常则返回异常的Promise对象。</li>\n<li><strong>promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用</strong> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/99d8936b8c5029a6786b464868666f7d47917.png\" alt=\"题目十运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-中的-all-和-race\"><a href=\"#Promise-中的-all-和-race\" class=\"headerlink\" title=\"Promise 中的 all 和 race\"></a>Promise 中的 all 和 race</h3><ul>\n<li>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。</li>\n<li>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</li>\n</ul>\n<p>4.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.all 入队微任务队列</li>\n<li>当前同步代码执行完成，开始执行微任务队列<ul>\n<li>间隔一秒后，控制台会同时打印出1, 2, 3，还有一个数组[1, 2, 3]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>有了all，就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据</strong></li>\n<li>.all()后面的.then()里的回调函数接收的就是所有异步操作的结果。</li>\n<li>而且这个结果中数组的顺序和Promise.all()接收到的数组顺序一致</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d3a6d5f4f158de806b690af124fcec9431029.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>4.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runReject(<span class=\"number\">4</span>), runAsync(<span class=\"number\">3</span>), runReject(<span class=\"number\">2</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.all 入队微任务队列</li>\n<li>当前同步代码执行完成，开始执行微任务队列<ul>\n<li>间隔一秒后，控制台会同时打印出 1, 3</li>\n</ul>\n</li>\n<li>由于 runReject(4) 比 runReject(2) 晚入微任务队列，且 catch 只执行一次<ul>\n<li>再间隔一秒后<ul>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(‘Error: 2’)</li>\n</ul>\n</li>\n<li>再间隔2秒后<ul>\n<li>console.log(x) x –&gt; 4</li>\n<li>不会再执行 catch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e0e25426dc0d49c3af9acee68744760d51135.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n<li><p>等同于</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runReject(<span class=\"number\">4</span>), runAsync(<span class=\"number\">3</span>), runReject(<span class=\"number\">2</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res), </span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(err);</span><br></pre></td></tr></table></figure></li>\n<li><p>结论</p>\n<ul>\n<li>all 和 race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被 then 的第二个参数或者后面的 catch 捕获；但并不会影响数组中其它的异步任务的执行。</li>\n</ul>\n</li>\n</ul>\n<p>4.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.race 入队微任务队列</li>\n<li>当前宏任务中同步任务执行完成，开始执行微任务</li>\n<li>在间隔时间都一样的情况下，runAsync1 最先加入队列</li>\n<li>因此<ul>\n<li>console.log(x) x –&gt; 1</li>\n</ul>\n</li>\n<li>由于 race 的特殊性，只捕捉最先执行完成的那个结果<ul>\n<li>console.log(‘result: ‘, res) res –&gt; 1</li>\n</ul>\n</li>\n<li>再<ul>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(x) x –&gt; 3</li>\n</ul>\n</li>\n<li>没有报错，不会被 catch</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/2eda438cd745e39ba934af362a80521038770.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>4.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([runReject(<span class=\"number\">0</span>), runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result: \"</span>, res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.race 入队微任务队列</li>\n<li>当前宏任务中同步任务执行完成，开始执行微任务</li>\n<li>runReject(0) 最先传入</li>\n<li>因此<ul>\n<li>console.log(x) x –&gt; 0</li>\n<li>console.log(err) err –&gt; Error: 0</li>\n</ul>\n</li>\n<li>间隔小于1秒后</li>\n<li>runAsync(1), runAsync(2), runAsync(3)<ul>\n<li>依次为</li>\n<li>console.log(x) x –&gt; 1</li>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(x) x –&gt; 3</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/89acbf32e7218b90c050526171bd1b3d53719.png\" alt=\"题目四\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://juejin.im/post/5e58c618e51d4526ed66b5cf\" target=\"_blank\" rel=\"noopener\">题目来源</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>\n","site":{"data":{}},"excerpt":"<style  type=\"text/css\">\n.lx-entry a {\n    color: #191919;\n    padding: 2px 0 1px 0;\n    text-decoration: none;\n    background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n    transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;\n    background-size: 100% 200%;\n    background-position: 0 0;\n    word-break: break-word;\n}\n\n.lx-entry a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), rgba(247,65,65,.761) calc(50% - 9px), rgba(247,65,65,.761) 100% );\n  background-position: 0 100%;\n}\n\n.post-button a:hover {\n  background-image: linear-gradient( transparent 0%, transparent calc(50% - 9px), transparent calc(50% - 9px), transparent 100% ) !important;\n  background-position: 0 100% !important;\n  outline: none !important;\n  text-decoration: none !important;\n}\n</style>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><ul>\n<li>五一假期，来写一写 Promise 的题吧，嘿嘿嘿 😃</li>\n<li>五一倒计时 3 天</li>\n</ul>","more":"<h2 id=\"实践准备\"><a href=\"#实践准备\" class=\"headerlink\" title=\"实践准备\"></a>实践准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(true) &#123;</span><br><span class=\"line\">      char sourcecode[1024];</span><br><span class=\"line\">      </span><br><span class=\"line\">      scanf(&#39;%s&#39;, &amp;sourcecode);</span><br><span class=\"line\">      NSString* code &#x3D; [NSString stringWithUTF8String: sourcecode];</span><br><span class=\"line\">      </span><br><span class=\"line\">      result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">      </span><br><span class=\"line\">      NSLog(@&quot;%@&quot;, [result toString]);</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如上实现一个简单的事件循环，用来输出 console</li>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/a99619da1cded49f443ded2fc219b27432778.png\" alt=\"OC 方法\"></li>\n<li>我们在 Javascript 中讲的微任务队列、宏任务队列，是 Javascript 调用方去使用 Javascript 的一种方式，如果仅是执行一段代码，是不需要事件循环的。通过这段代码，是可以看出来，Javascript 的事件循环，是在 JSContext 之外，事件循环相关知识，既不是 Javascript 引擎的一部分，也不是 Javascript 语言的一部分。</li>\n<li>code 的传入方式<ul>\n<li>&lt;script&gt;&lt;/script&gt; 普通代码片段</li>\n<li>&lt;script type=”module”&gt;&lt;/script&gt;</li>\n<li>函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; TODO: calculate the square of arg x</span><br><span class=\"line\">    NSString* code &#x3D; @&quot;(function(x)&#123; return x * x; &#125;)&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; like: result &#x3D; (function(x)&#123; return x * x; &#125;)</span><br><span class=\"line\">    result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; passing the number 4 into the function</span><br><span class=\"line\">    JSValue* arg1 &#x3D; [JSValue valueWithInt32:4 inContext:context];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; execute the function with arg of 4</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, [[result callWithArguments:@[arg1]] toString]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的 Object-C 代码，可以看出来，我们是将一段一段的代码，传入 evaluateScript 中执行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argx, const char * argv[]) &#123;</span><br><span class=\"line\">  @autoreleasepool &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; var context &#x3D; new JSContext</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; define a javascript context</span><br><span class=\"line\">    JSContext* context &#x3D; [[JSContext alloc] init];</span><br><span class=\"line\">    &#x2F;&#x2F; like:var result &#x3D; null;</span><br><span class=\"line\">    JSValue* result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; TODO: calculate the square of arg x</span><br><span class=\"line\">    NSString* code &#x3D; @&quot;new Promise(resolve &#x3D;&gt; resolve()).then(() &#x3D;&gt; this.a &#x3D; 3), function()&#123;return this.a&#125;;&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">    result &#x3D; [context evaluateScript:code];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; like: result();</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, [[result callWithArguments:@[]] toString]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>evaluateScript 实际上执行两步：</p>\n<ol>\n<li><p>执行整个方法</p>\n<blockquote>\n<p>new Promise(resolve =&gt; resolve()).then(() =&gt; this.a = 3), function(){return this.a};</p>\n</blockquote>\n<ul>\n<li>逗号表达式，永远返回后面的值，如果被调用，前面的会被执行</li>\n</ul>\n</li>\n<li><p>执行 Promise 中 then 后面的语句</p>\n</li>\n</ol>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/81d945c99778450fd86a710f20355cbc269796.png\" alt=\"evaluateScript\"></li>\n<li>有 then ,可能产生一个宏任务里面有多个微任务的情况， 一切JS 代码都是微任务中执行的</li>\n<li>拿浏览器举例：setTimeout、setInterval 这种其实不是 JS 语法本身的 API，是 JS 的宿主浏览器提供的 API， 所以是宏任务。</li>\n<li>而 Promise 是 JS 本身自带的 API，这种就是微任务。</li>\n</ul>\n</li>\n<li><p>总结：<strong>宿主提供的方法是宏任务，JS 自带的是微任务</strong></p>\n</li>\n<li><p><strong>任务列表列里面有很多宏任务，然后每个宏任务里面有一个微任务列表，每个宏任务执行下一个宏任务之前会把自己内部的微任务执行完</strong></p>\n</li>\n<li><p><strong>宏任务</strong>包括：script 、setTimeout、setInterval 、setImmediate 、I/O 、UI rendering。</p>\n</li>\n<li><p><strong>微任务</strong>包括：MutationObserver、Promise.then()或catch()、Promise为基础开发的其它技术，比如fetch API、V8的垃圾回收过程、Node独有的process.nextTick。</p>\n</li>\n</ul>\n<h1 id=\"Javascript-结构化程序设计基础设施\"><a href=\"#Javascript-结构化程序设计基础设施\" class=\"headerlink\" title=\"Javascript 结构化程序设计基础设施\"></a>Javascript 结构化程序设计基础设施</h1><ul>\n<li></li>\n</ul>\n<h2 id=\"实践记录\"><a href=\"#实践记录\" class=\"headerlink\" title=\"实践记录\"></a>实践记录</h2><h3 id=\"基础题\"><a href=\"#基础题\" class=\"headerlink\" title=\"基础题\"></a>基础题</h3><p>1.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, promise1);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析：</p>\n<ul>\n<li><p>从上至下，先执行 new Promise，执行该构造函数中 console.log(‘promise1’)</p>\n<blockquote>\n<p>console.log(‘1’, promise1);</p>\n</blockquote>\n</li>\n<li><p>再执行同步代码</p>\n</li>\n<li><p>执行完后， promise1 中并没有 resolved, rejected， 一直处在 pending 的状态</p>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f45e1dbe45d84e46ab2fd24703cad0c521137.png\" alt=\"题目一执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>resolve(‘success’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n<li>console.log(2);</li>\n</ul>\n</li>\n<li>promise.then 入队微任务队列</li>\n<li>再执行当前宏任务中的同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，且 promise 为resolved，执行 promise.then<ul>\n<li>console.log(3);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c31fd6e9ba9c9f9ac4062d6b395706f230745.png\" alt=\"题目二执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>console.log(2);</li>\n<li>该 promise 没有 resolved, rejected, 一直处在 pending</li>\n</ul>\n</li>\n<li>promise.then 入队微任务队列</li>\n<li>再执行当前宏任务中的同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列，但 promise 为pending，不可能执行 promise.then 中方法</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b6e827ca293c65c261a83a81f1f5411227105.png\" alt=\"题目三执行\"></li>\n</ul>\n</li>\n</ul>\n<p>1.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">  resolve(<span class=\"string\">'resolve1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, promise1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>, promise2);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(‘promise1’)</li>\n<li>resolve(‘resolve1’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>promise1.then 入队微任务队列</li>\n<li>promise2 是一个新状态为 pending 的 Promise</li>\n<li>执行同步代码<ul>\n<li>console.log(‘1’, promise1);<ul>\n<li>promise1 中状态在上面已经更改为 resolved</li>\n</ul>\n</li>\n<li>console.log(‘2’, promise2);<ul>\n<li>promise2 中状态为pending</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then <ul>\n<li>console.log(res) <ul>\n<li>其中 promise1.then， promise1 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f31e7f8db309521b5252143252eaed2551272.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>1.5 题目五</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，const fn = () =&gt; (Promise Object) 返回一个 promise 对象</li>\n<li>fn()，执行 fn 方法<ul>\n<li>console.log(1);</li>\n<li>resolve(‘success’) 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>Function.then 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then<ul>\n<li>console.log(res) 其中 promise 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/955895672615c24a4eb671617d8b739829033.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>1.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\">fn().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，const fn = () =&gt; (Promise Object) 返回一个 promise 对象</li>\n<li>执行同步代码<ul>\n<li>console.log(“start”);</li>\n</ul>\n</li>\n<li>fn(), 执行 fn 方法<ul>\n<li>console.log(1);</li>\n<li>resolve(“success”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>Function.then 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Function.then<ul>\n<li>console.log(res); 其中 promise 的状态为 resolved</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ccd1a9148be91f5aa24847a0d4e23dfb31837.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-结合-setTimeout\"><a href=\"#Promise-结合-setTimeout\" class=\"headerlink\" title=\"Promise 结合 setTimeout\"></a>Promise 结合 setTimeout</h3><p>2.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'time'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘end’)</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 Promise.resolve().then<ul>\n<li>console.log(‘resolve’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …<ul>\n<li>console.log(‘time’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/4a9c74ab2a26cc16e55ce53f6fb765d630133.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timerStart\"</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timerEnd\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上至下，先执行 new Promise，执行该构造函数中<ul>\n<li>console.log(1);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>console.log(2);</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(4);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 其中 promise 中，并没有 resolved、rejected，一直在 pending，不可能执行 promise.then 中方法</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>第二个宏任务 setTimeout 代码从上至下执行</li>\n<li>执行同步代码<ul>\n<li>console.log(“timerStart”);</li>\n<li>resolve(“success”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n<li>console.log(“timerEnd”);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/66ea5bbd68d0841ad58cac5ca771625347414.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer3'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>从上执行</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码 <ul>\n<li>console.log(‘timer1’);</li>\n</ul>\n</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li>第三个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer3’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/b5ab6578c5ba7d8d727a3bf47ba8879033812.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>setTimeout … 加入宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘start’)</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer1’);</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列<ul>\n<li>console.log(‘promise’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/f65f2aa65848d2e8aaf5c3918509c6e934427.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timer2 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer2'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer1 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer1'</span>)</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>执行同步代码</li>\n<li>console.log(‘start’);</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列</li>\n<li>执行同步代码</li>\n<li>console.log(‘promise1’);</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务 setTimeout …</li>\n<li>console.log(‘timer2’)</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码</li>\n<li>console.log(‘timer1’)</li>\n<li>Promise.resolve().then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列</li>\n<li>console.log(‘promise2’)</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>console.log(‘timer2’)</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/60a22379f31bb12de055ed83a31aca0b46969.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.5 题目五 ** 存在和之前一样的，promise resolved 后，状态上抛至上一个 宏任务队列的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>先执行 new Promise，执行该构造函数中</li>\n<li>setTimout … 入队宏任务队列</li>\n<li>promise1.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(‘promise1’, promise1)<ul>\n<li>其中 promise1 没有 resolved、rejected,一直处在 pending 状态</li>\n<li>promise1 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n<li>console.log(‘promise2’, promise2)<ul>\n<li>其中 promise1 一直处在 pending 状态，直接影响到 promise2 也一直处在 pending 状态</li>\n<li>promise2 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>由于 promise1 仍处于 pending 状态，不可能执行 promise1.then …</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行下一个宏任务</li>\n<li>resolve(‘success’) 将 promise1 中的状态更改为 resolved，并保存下来</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务</li>\n<li>执行同步代码<ul>\n<li>console.log(‘promise1’, promise1)<ul>\n<li>其中 promise1 处在 resolved 状态</li>\n<li>promise1 Promise {&lt;resolved&gt;: “success”}</li>\n</ul>\n</li>\n<li>console.log(‘promise2’, promise2)<ul>\n<li>promise2 Promise {&lt;rejected&gt;: Error: error!!! at &lt;anonymous&gt;:8:9}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/3ad654d66c66c648a058adf29154d879107368.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>2.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timer1\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1里的内容\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"error!!!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>, promise1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>, promise2);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"timer2\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise1\"</span>, promise1);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"promise2\"</span>, promise2);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数</li>\n<li>setTimeout 入队宏任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(“promise1里的内容”);</li>\n</ul>\n</li>\n<li>promise1.then … 入队微任务队列</li>\n<li>执行同步代码<ul>\n<li>console.log(“promise1”, promise1);<ul>\n<li>其中 promise1 没有 resolved、rejected 掉，一直处在 pending 状态<ul>\n<li>promise1 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>console.log(“promise2”, promise2);<ul>\n<li>primise1 的 pending 状态，直接影响 promise2 也处在 pending 状态<ul>\n<li>promise2 Promise {&lt;pending&gt;}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>由于 promise1 仍处于 pending 状态，不可能执行 promise1.then …</li>\n</ul>\n</li>\n<li>第一个宏任务执行完了，开始执行第二个宏任务</li>\n<li>resolve(“success”); 将 promise1 中的状态更改为 resolved，并保存下来</li>\n<li>执行同步代码<ul>\n<li>console.log(“timer1”);</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise1.then …<ul>\n<li>throw new Error(“error!!!”);</li>\n</ul>\n</li>\n<li>第二个宏任务执行完了，开始执行下一个宏任务<ul>\n<li>执行同步代码<ul>\n<li>console.log(“timer2”);</li>\n<li>console.log(“promise1”, promise1);<ul>\n<li>其中 promise1 的状态已经 resloved</li>\n<li>promise1 Promise {&lt;resolved&gt;: “success”}</li>\n</ul>\n</li>\n<li>console.log(“promise2”, promise2);<ul>\n<li>promise2 Promise {&lt;rejected&gt;: Error: error!!! at &lt;anonymous&gt;:8:9}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/88a197ec5863fcca93b072d3baecf6a0113849.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-中的-then、catch、finally\"><a href=\"#Promise-中的-then、catch、finally\" class=\"headerlink\" title=\"Promise 中的 then、catch、finally\"></a>Promise 中的 then、catch、finally</h3><p>3.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success1\"</span>);</span><br><span class=\"line\">  reject(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then: \"</span>, res);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数<ul>\n<li>resolve(“success1”); 将 promise 中的状态更改为 resolved，并保存下来</li>\n</ul>\n</li>\n<li>promise.then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …<ul>\n<li>console then:  success1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/448d9fb1db29ba7e76762f97a9508d1e35386.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise的状态一经改变就不能再改变</strong></li>\n<li><strong>构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>3.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">\"success2\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then1: \"</span>, res);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then2: \"</span>, res);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then3: \"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数<ul>\n<li>reject(“error”); 将 promise 中的状态更改为 rejected，并保存下来</li>\n</ul>\n</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …</li>\n<li>由于 promise 状态为 rejected，因此触发 catch ，不管 catch 连接到哪，都能捕获上层未捕捉过的错误<ul>\n<li>console.log(“catch: “, err);</li>\n<li>return a new promise</li>\n</ul>\n</li>\n<li>由于 新的 promise 没有返回值，因此返回 undefined</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>catch不管被连接到哪里，都能捕获上层未捕捉过的错误</strong></li>\n<li>至于 then3 也会被执行，那是因为*<em>catch()也会返回一个 Promise *</em>，且由于这个 Promise 没有返回值，所以打印出来的是 undefined 。</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/8523408bd03cb268237e720380e1273d47036.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态为 resolved, 因此触发 then<ul>\n<li>console.log(res); res –&gt; 1</li>\n</ul>\n</li>\n<li>没有报错，略过 catch</li>\n<li>被 then 捕捉<ul>\n<li>console.log(2); 返回新的 promise， promise 返回 resolve(2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise 可以链式调用</strong>，不过 promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样 return this。</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/2ca378bb1952c6fbacc3028024b1b89027624.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态为 rejected，因此触发 catch<ul>\n<li>console.log(err); err –&gt; 1</li>\n<li>return resolve(3)</li>\n</ul>\n</li>\n<li>被 then 捕捉<ul>\n<li>console.log(3) </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/ed821dfd96ad96250140abdedf581fd930226.png\" alt=\"题目四运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.5 题目五</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timer'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行，先执行 new Promise，执行该构造函数</li>\n<li>setTimeout … 入队宏任务队列</li>\n<li>promise.then … 入队微任务队列</li>\n<li>promise.then … 入队微任务队列</li>\n<li>当前宏任务中的所有同步代码执行完毕，开始执行当前宏任务中的微任务队列 promise.then …</li>\n<li>因为 promise 状态并没有 resolved、rejected，一直处在 pending，并不能调用 then 方法</li>\n<li>同上</li>\n<li>第一个宏任务执行完成，开始执行第二个宏任务 setTimeout …</li>\n<li>执行同步代码<ul>\n<li>console.log(‘timer’)</li>\n<li>promise 状态更改为 resolved，并保存下来<ul>\n<li>状态往上抛</li>\n<li>console.log(res, Date.now() - start)</li>\n<li>console.log(res, Date.now() - start))</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>Promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。</strong></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/9ee74ca562f7c913d51c9fd5fe60680543896.png\" alt=\"题目五运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.6 题目六</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"then: \"</span>, res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"catch: \"</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态更改为 resolve，并无返回值</li>\n<li>执行 then<ul>\n<li>throw new Error(‘error!!!’)</li>\n<li>return Promise.reject(new Error(‘error!!!’))</li>\n</ul>\n</li>\n<li>被 catch 捕捉<ul>\n<li>console.log(“catch: “, err) err –&gt; error</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/a1cb4e4f5e5ec95e2215d5b7ecc6a32428525.png\" alt=\"题目六运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.7 题目七</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.catch(<span class=\"built_in\">console</span>.err)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 resolve ，并无返回值</li>\n<li>执行 then<ul>\n<li>return Promise.resolve(promise)</li>\n<li>Chaining cycle detected for promise</li>\n</ul>\n</li>\n<li>执行同步代码<ul>\n<li>promise.catch promise cycle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/70dbed986bad1d410ad7be3de8fe963d21008.png\" alt=\"题目七运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.8 题目八</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .then(<span class=\"built_in\">console</span>.log)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 resolve， return Promise.resolve(1)</li>\n<li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传</li>\n<li>第一个then和第二个then中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将resolve(1) 的值直接传到最后一个then里</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传</strong></li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/68c56ed26f2845300ecba0dc6dc7a3e914382.png\" alt=\"题目八运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.9 题目九</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'err!!!'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, res)</span><br><span class=\"line\">  &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, err)</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我们可以先来看看，如果 catch 住了错误，err 会一直链式传递下去被 catch嘛</p>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/f9859062c1341e2e575f952e320aba4222620.png\" alt=\"是否会被一直catch\"></p>\n<ul>\n<li>一旦 catch 住当前报错，当前报错并不会再往下传递</li>\n</ul>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/9846287852a98f322045973bf302c58f24992.png\" alt=\"逐行调用catch是会一直传递下去的\"></p>\n<ul>\n<li>逐行调用 then 是会一直传递下去的</li>\n</ul>\n</li>\n<li><p>那我还可以看看，如果没有错误，res 会一直链式传递 then 执行嘛</p>\n</li>\n<li><p><img src=\"http://p1.meituan.net/myvideodistribute/e2e72158c05ceee7da7528ff9a20348426425.png\" alt=\"是否会被一直then\"></p>\n<ul>\n<li>可以看出 then 是会一直往下传递的</li>\n</ul>\n</li>\n<li><p><img src=\"http://p0.meituan.net/myvideodistribute/abb8ccf3daffdd023ce079c86cafdfd626377.png\" alt=\"逐行调用then 是会一直传递下去的\"></p>\n<ul>\n<li>逐行调用 then 是会一直传递下去的</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态改变为 rejected，return ‘err!!!’</li>\n<li>执行 then，then 中第二个函数，相当于 catch</li>\n<li>因此执行</li>\n<li>console.log(‘error’, err) err –&gt; err!!!</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/05e3b86caaf2b9cbf0c6326020e3385327546.png\" alt=\"题目九运行结果\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail1</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail1'</span>, err)</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail2</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail2'</span>, err)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态变为 resolve，</li>\n<li>执行 then<ul>\n<li>throw new Error(‘error!!!’)</li>\n</ul>\n</li>\n<li>被 catch <ul>\n<li>console.log(‘fail2’, err) err –&gt; error!!!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/c8643d8fb0fd251145befd28d635ed7e33265.png\" alt=\"运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>3.10 题目十</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally2'</span>)</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"string\">'我是finally2返回的值'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally2后面的then函数'</span>, res)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>promise 状态变为 resolve，return 1</li>\n<li>执行 then<ul>\n<li>console.log(res) res –&gt; return new Promise， resolve(1) 加入微任务队列</li>\n</ul>\n</li>\n<li>promise 状态变为 resolve, return 2<ul>\n<li>执行 finally<ul>\n<li>console.log(‘finally2’)</li>\n<li>return new Promise， resolve(‘我是finally2返回的值’) 加入微任务队列</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当前同步代码执行完成，开始还行微任务队列<ul>\n<li>console.log(‘finally’)</li>\n<li>console.log(‘finally2后面的then函数’, res) res –&gt; 2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>.finally()方法不管Promise对象最后的状态如何都会执行</li>\n<li>.finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道Promise最终的状态是resolved还是rejected的</li>\n<li>它最终返回的默认会是一个<strong>上一次的Promise对象值</strong>，不过如果抛出的是一个异常则返回异常的Promise对象。</li>\n<li><strong>promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用</strong> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>运行结果<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/99d8936b8c5029a6786b464868666f7d47917.png\" alt=\"题目十运行结果\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise-中的-all-和-race\"><a href=\"#Promise-中的-all-和-race\" class=\"headerlink\" title=\"Promise 中的 all 和 race\"></a>Promise 中的 all 和 race</h3><ul>\n<li>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。</li>\n<li>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</li>\n</ul>\n<p>4.1 题目一</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.all 入队微任务队列</li>\n<li>当前同步代码执行完成，开始执行微任务队列<ul>\n<li>间隔一秒后，控制台会同时打印出1, 2, 3，还有一个数组[1, 2, 3]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>有了all，就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据</strong></li>\n<li>.all()后面的.then()里的回调函数接收的就是所有异步操作的结果。</li>\n<li>而且这个结果中数组的顺序和Promise.all()接收到的数组顺序一致</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/d3a6d5f4f158de806b690af124fcec9431029.png\" alt=\"题目一运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>4.2 题目二</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runReject(<span class=\"number\">4</span>), runAsync(<span class=\"number\">3</span>), runReject(<span class=\"number\">2</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.all 入队微任务队列</li>\n<li>当前同步代码执行完成，开始执行微任务队列<ul>\n<li>间隔一秒后，控制台会同时打印出 1, 3</li>\n</ul>\n</li>\n<li>由于 runReject(4) 比 runReject(2) 晚入微任务队列，且 catch 只执行一次<ul>\n<li>再间隔一秒后<ul>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(‘Error: 2’)</li>\n</ul>\n</li>\n<li>再间隔2秒后<ul>\n<li>console.log(x) x –&gt; 4</li>\n<li>不会再执行 catch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/e0e25426dc0d49c3af9acee68744760d51135.png\" alt=\"题目二运行结果\"></li>\n</ul>\n</li>\n<li><p>等同于</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([runAsync(<span class=\"number\">1</span>), runReject(<span class=\"number\">4</span>), runAsync(<span class=\"number\">3</span>), runReject(<span class=\"number\">2</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res), </span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(err);</span><br></pre></td></tr></table></figure></li>\n<li><p>结论</p>\n<ul>\n<li>all 和 race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被 then 的第二个参数或者后面的 catch 捕获；但并不会影响数组中其它的异步任务的执行。</li>\n</ul>\n</li>\n</ul>\n<p>4.3 题目三</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.race 入队微任务队列</li>\n<li>当前宏任务中同步任务执行完成，开始执行微任务</li>\n<li>在间隔时间都一样的情况下，runAsync1 最先加入队列</li>\n<li>因此<ul>\n<li>console.log(x) x –&gt; 1</li>\n</ul>\n</li>\n<li>由于 race 的特殊性，只捕捉最先执行完成的那个结果<ul>\n<li>console.log(‘result: ‘, res) res –&gt; 1</li>\n</ul>\n</li>\n<li>再<ul>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(x) x –&gt; 3</li>\n</ul>\n</li>\n<li>没有报错，不会被 catch</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p0.meituan.net/myvideodistribute/2eda438cd745e39ba934af362a80521038770.png\" alt=\"题目三运行结果\"></li>\n</ul>\n</li>\n</ul>\n<p>4.4 题目四</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> r(x, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runReject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> rej(<span class=\"string\">`Error: <span class=\"subst\">$&#123;x&#125;</span>`</span>, <span class=\"built_in\">console</span>.log(x)), <span class=\"number\">1000</span> * x)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([runReject(<span class=\"number\">0</span>), runAsync(<span class=\"number\">1</span>), runAsync(<span class=\"number\">2</span>), runAsync(<span class=\"number\">3</span>)])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result: \"</span>, res))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>分析</p>\n<ul>\n<li>代码从上至下开始执行</li>\n<li>Promise.race 入队微任务队列</li>\n<li>当前宏任务中同步任务执行完成，开始执行微任务</li>\n<li>runReject(0) 最先传入</li>\n<li>因此<ul>\n<li>console.log(x) x –&gt; 0</li>\n<li>console.log(err) err –&gt; Error: 0</li>\n</ul>\n</li>\n<li>间隔小于1秒后</li>\n<li>runAsync(1), runAsync(2), runAsync(3)<ul>\n<li>依次为</li>\n<li>console.log(x) x –&gt; 1</li>\n<li>console.log(x) x –&gt; 2</li>\n<li>console.log(x) x –&gt; 3</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<ul>\n<li><img src=\"http://p1.meituan.net/myvideodistribute/89acbf32e7218b90c050526171bd1b3d53719.png\" alt=\"题目四\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://juejin.im/post/5e58c618e51d4526ed66b5cf\" target=\"_blank\" rel=\"noopener\">题目来源</a></li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><ul>\n<li>祝大家多多发财</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckaw7l1vj00001wp34y6a11vp","category_id":"ckaw7l1vs00021wp33jjb7sx3","_id":"ckaw7l1w3000d1wp3axtiedbr"},{"post_id":"ckaw7l1vr00011wp36u9c1hte","category_id":"ckaw7l1vs00021wp33jjb7sx3","_id":"ckaw7l1w6000i1wp30yig49iz"},{"post_id":"ckaw7l1vv00041wp31pcq7ncy","category_id":"ckaw7l1w2000c1wp3h9kmasih","_id":"ckaw7l1w9000o1wp38psj6ayx"},{"post_id":"ckaw7l1vw00051wp339e734ds","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wc000v1wp3ged18xy1"},{"post_id":"ckaw7l1vx00061wp36jn5d10w","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wf00111wp3ct7kcahg"},{"post_id":"ckaw7l1w0000a1wp31avkdpap","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wi00181wp3euz78800"},{"post_id":"ckaw7l1we000z1wp3a2gbemvm","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wi001a1wp3f6k851vr"},{"post_id":"ckaw7l1wg00151wp3a6tq11gg","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wk001e1wp39aq90nk8"},{"post_id":"ckaw7l1w2000b1wp395aw0vdf","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wk001g1wp3d4doepe1"},{"post_id":"ckaw7l1w4000g1wp33q19ad9a","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wm001k1wp327sm60xl"},{"post_id":"ckaw7l1w5000h1wp3apxbhmox","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1wm001l1wp34yup76mb"},{"post_id":"ckaw7l1w7000l1wp3ewsob9en","category_id":"ckaw7l1wk001h1wp3dmdzf151","_id":"ckaw7l1wn001q1wp31pik9fh3"},{"post_id":"ckaw7l1w8000n1wp3h3mua3rl","category_id":"ckaw7l1wm001m1wp38d3d4f1c","_id":"ckaw7l1wo001v1wp342jnen83"},{"post_id":"ckaw7l1wa000r1wp3ehihbiog","category_id":"ckaw7l1wn001s1wp33gulbvx0","_id":"ckaw7l1wp001z1wp3cfsw4awt"},{"post_id":"ckaw7l1wb000t1wp3cehvd75v","category_id":"ckaw7l1wp001x1wp3e8idcwd6","_id":"ckaw7l1wq00231wp39p7815l2"},{"post_id":"ckaw7l1wf00131wp382831seu","category_id":"ckaw7l1wq00211wp3959s227o","_id":"ckaw7l1wr00261wp32wqk6z3y"},{"post_id":"ckaw7l1x1002a1wp31zijf5u6","category_id":"ckaw7l1vs00021wp33jjb7sx3","_id":"ckaw7l1x4002g1wp32gdjc9ne"},{"post_id":"ckaw7l1x2002b1wp30mgo2vgy","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1x5002j1wp36dvcfogc"},{"post_id":"ckaw7l1x2002d1wp314z3fs3b","category_id":"ckaw7l1wk001h1wp3dmdzf151","_id":"ckaw7l1x6002m1wp391i446d2"},{"post_id":"ckaw7l1x3002f1wp341gm3sw8","category_id":"ckaw7l1wk001h1wp3dmdzf151","_id":"ckaw7l1x7002p1wp3fjhzdawr"},{"post_id":"ckaw7l1x5002l1wp3cxgggjq0","category_id":"ckaw7l1wp001x1wp3e8idcwd6","_id":"ckaw7l1x9002t1wp38979erg9"},{"post_id":"ckaw7l1x4002i1wp32y9aaco2","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1x9002v1wp39ccifp9g"},{"post_id":"ckaw7l1x6002o1wp3hr10fp00","category_id":"ckaw7l1wp001x1wp3e8idcwd6","_id":"ckaw7l1x9002x1wp3dk009hbm"},{"post_id":"ckaw7l1x7002r1wp3h9trex04","category_id":"ckaw7l1w2000c1wp3h9kmasih","_id":"ckaw7l1xa002z1wp3a3p60rn3"},{"post_id":"ckaw7l1xc00301wp3h583904e","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1xf00361wp34woy140n"},{"post_id":"ckaw7l1xd00311wp35ljif4rr","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1xg00391wp34zlychew"},{"post_id":"ckaw7l1xe00331wp3a87m0imh","category_id":"ckaw7l1wk001h1wp3dmdzf151","_id":"ckaw7l1xg003b1wp3eq3iakpt"},{"post_id":"ckaw7l1xe00351wp32p43860k","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1xh003f1wp3hf2l6bk2"},{"post_id":"ckaw7l1xf00381wp300pkagxh","category_id":"ckaw7l1xh003c1wp3fnx484hc","_id":"ckaw7l1xi003h1wp3hzxx2uj3"},{"post_id":"ckaw7l1xk003i1wp3bvri1801","category_id":"ckaw7l1wk001h1wp3dmdzf151","_id":"ckaw7l1xn003k1wp3061a765c"},{"post_id":"ckaw7l1xp003l1wp3ftwh01cd","category_id":"ckaw7l1w6000j1wp3372kg0i6","_id":"ckaw7l1xq003n1wp3a3rzcl1c"}],"PostTag":[{"post_id":"ckaw7l1vj00001wp34y6a11vp","tag_id":"ckaw7l1vu00031wp3clri2cvu","_id":"ckaw7l1w000091wp31ggt3any"},{"post_id":"ckaw7l1vr00011wp36u9c1hte","tag_id":"ckaw7l1vu00031wp3clri2cvu","_id":"ckaw7l1w4000f1wp3b16k7il7"},{"post_id":"ckaw7l1vv00041wp31pcq7ncy","tag_id":"ckaw7l1w3000e1wp34rsh6quv","_id":"ckaw7l1w8000m1wp31s9h93ae"},{"post_id":"ckaw7l1vw00051wp339e734ds","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wb000s1wp35c8s3lqg"},{"post_id":"ckaw7l1vx00061wp36jn5d10w","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1we000y1wp3ajwb34l2"},{"post_id":"ckaw7l1w0000a1wp31avkdpap","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wg00141wp3hdmvd0w2"},{"post_id":"ckaw7l1we000z1wp3a2gbemvm","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wh00161wp38kpi89kv"},{"post_id":"ckaw7l1wg00151wp3a6tq11gg","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wi001b1wp35f0obhmh"},{"post_id":"ckaw7l1w2000b1wp395aw0vdf","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wk001f1wp3ckul6s3y"},{"post_id":"ckaw7l1w2000b1wp395aw0vdf","tag_id":"ckaw7l1wi00191wp30a6warsf","_id":"ckaw7l1wl001i1wp30mfg7qpj"},{"post_id":"ckaw7l1w4000g1wp33q19ad9a","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wn001o1wp3axwu6uro"},{"post_id":"ckaw7l1w4000g1wp33q19ad9a","tag_id":"ckaw7l1wi00191wp30a6warsf","_id":"ckaw7l1wn001p1wp36njebq2f"},{"post_id":"ckaw7l1w5000h1wp3apxbhmox","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1wo001t1wp333n7baq6"},{"post_id":"ckaw7l1w5000h1wp3apxbhmox","tag_id":"ckaw7l1w3000e1wp34rsh6quv","_id":"ckaw7l1wo001u1wp3b4hz7ew3"},{"post_id":"ckaw7l1w7000l1wp3ewsob9en","tag_id":"ckaw7l1wn001r1wp3cx17229n","_id":"ckaw7l1wp001y1wp3bzq25ig2"},{"post_id":"ckaw7l1w8000n1wp3h3mua3rl","tag_id":"ckaw7l1wo001w1wp3bh1g4v2u","_id":"ckaw7l1wq00221wp3d4eoanxh"},{"post_id":"ckaw7l1wa000r1wp3ehihbiog","tag_id":"ckaw7l1wp00201wp3gt2m8syt","_id":"ckaw7l1wr00251wp325ag3sdg"},{"post_id":"ckaw7l1wb000t1wp3cehvd75v","tag_id":"ckaw7l1wq00241wp3ce12alfr","_id":"ckaw7l1wr00281wp3e53y0hu7"},{"post_id":"ckaw7l1wf00131wp382831seu","tag_id":"ckaw7l1wr00271wp3glba9jvd","_id":"ckaw7l1wr00291wp3fxotd481"},{"post_id":"ckaw7l1x1002a1wp31zijf5u6","tag_id":"ckaw7l1vu00031wp3clri2cvu","_id":"ckaw7l1x2002c1wp34q4ehmlq"},{"post_id":"ckaw7l1x2002b1wp30mgo2vgy","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1x3002e1wp39e40ckjr"},{"post_id":"ckaw7l1x2002d1wp314z3fs3b","tag_id":"ckaw7l1wn001r1wp3cx17229n","_id":"ckaw7l1x4002h1wp3e5g9gzoy"},{"post_id":"ckaw7l1x3002f1wp341gm3sw8","tag_id":"ckaw7l1wn001r1wp3cx17229n","_id":"ckaw7l1x5002k1wp3060i4kqa"},{"post_id":"ckaw7l1x5002l1wp3cxgggjq0","tag_id":"ckaw7l1wq00241wp3ce12alfr","_id":"ckaw7l1x7002q1wp321e2hria"},{"post_id":"ckaw7l1x6002o1wp3hr10fp00","tag_id":"ckaw7l1wq00241wp3ce12alfr","_id":"ckaw7l1x9002s1wp376ztc4y1"},{"post_id":"ckaw7l1x7002r1wp3h9trex04","tag_id":"ckaw7l1w3000e1wp34rsh6quv","_id":"ckaw7l1x9002u1wp3c3jbds20"},{"post_id":"ckaw7l1x4002i1wp32y9aaco2","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1x9002w1wp3a1nt3t3d"},{"post_id":"ckaw7l1x4002i1wp32y9aaco2","tag_id":"ckaw7l1x6002n1wp32qhg0l8z","_id":"ckaw7l1xa002y1wp31np7ds3b"},{"post_id":"ckaw7l1xc00301wp3h583904e","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1xe00321wp33v81fkuu"},{"post_id":"ckaw7l1xd00311wp35ljif4rr","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1xe00341wp3fzst0p9l"},{"post_id":"ckaw7l1xe00331wp3a87m0imh","tag_id":"ckaw7l1wn001r1wp3cx17229n","_id":"ckaw7l1xf00371wp3eom74w63"},{"post_id":"ckaw7l1xe00351wp32p43860k","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1xg003a1wp3bu9ccm41"},{"post_id":"ckaw7l1xe00351wp32p43860k","tag_id":"ckaw7l1w3000e1wp34rsh6quv","_id":"ckaw7l1xh003e1wp31itva4le"},{"post_id":"ckaw7l1xf00381wp300pkagxh","tag_id":"ckaw7l1xh003d1wp3f57pdstf","_id":"ckaw7l1xi003g1wp33vx7fmua"},{"post_id":"ckaw7l1xk003i1wp3bvri1801","tag_id":"ckaw7l1wn001r1wp3cx17229n","_id":"ckaw7l1xn003j1wp31cfh6lq6"},{"post_id":"ckaw7l1xp003l1wp3ftwh01cd","tag_id":"ckaw7l1w7000k1wp37rrgbi6g","_id":"ckaw7l1xq003m1wp3264ccwhh"}],"Tag":[{"name":"CSS","_id":"ckaw7l1vu00031wp3clri2cvu"},{"name":"算法","_id":"ckaw7l1w3000e1wp34rsh6quv"},{"name":"前端概念","_id":"ckaw7l1w7000k1wp37rrgbi6g"},{"name":"正则表达式","_id":"ckaw7l1wi00191wp30a6warsf"},{"name":"浏览器","_id":"ckaw7l1wn001r1wp3cx17229n"},{"name":"react","_id":"ckaw7l1wo001w1wp3bh1g4v2u"},{"name":"性能监控","_id":"ckaw7l1wp00201wp3gt2m8syt"},{"name":"微信小程序","_id":"ckaw7l1wq00241wp3ce12alfr"},{"name":"计算机图形学","_id":"ckaw7l1wr00271wp3glba9jvd"},{"name":"UTF-8","_id":"ckaw7l1x6002n1wp32qhg0l8z"},{"name":"计算机网络","_id":"ckaw7l1xh003d1wp3f57pdstf"}]}}